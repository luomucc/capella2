<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="org.polarsys.capella.common.ui.progress" xmlns="http://www.w3.org/2001/XMLSchema">
<annotation>
      <appInfo>
         <meta.schema plugin="org.polarsys.capella.common.ui.progress" id="ProgressItemsBuilder" name="Progress Items Builder"/>
      </appInfo>
      <documentation>
         This extension point sould be implemented to provide an abstraction level over platform specific progress widgets.
      </documentation>
   </annotation>

   <element name="extension">
      <annotation>
         <appInfo>
            <meta.element />
         </appInfo>
      </annotation>
      <complexType>
         <sequence>
            <element ref="Factory"/>
         </sequence>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
               <appInfo>
                  <meta.attribute translatable="true"/>
               </appInfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="Factory">
      <complexType>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="class" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
               <appInfo>
                  <meta.attribute kind="java" basedOn=":org.polarsys.capella.common.ui.progress.api.IProgressItemsFactory"/>
               </appInfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appInfo>
         <meta.section type="since"/>
      </appInfo>
      <documentation>
         1.0.3
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="examples"/>
      </appInfo>
      <documentation>
         Basically, you should implement a Progress Items Builder specific to the platform allowing to create platform specifics Progress Dialogs Handlers.
For example, for RSX, the class implementing the extension point is:
&lt;code&gt;RSXProgressItemsBuilder&lt;/code&gt;
The method &lt;code&gt;getModalProgressDialogHandler()&lt;/code&gt; of this class returns an instance of &lt;code&gt;RsxModalProgressDialogHandler&lt;/code&gt;.
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="apiinfo"/>
      </appInfo>
      <documentation>
         Let&apos;s use the RSX example to illustrate how it works.
In RSX there are 2 other classes involved in the mechanism:&lt;br&gt;
&lt;code&gt;RSXProgressHandler implements IProgressHandler&lt;/code&gt;&lt;br&gt; and&lt;br&gt; &lt;code&gt;RsxModalProgressDialogHandler implements IModalProgressDialogHandler&lt;/code&gt;.&lt;br&gt;
The main idea is to create a Progress Dialog Handler with the builder, and, if you want to report the amount of work done, to create a Progress Handler related to this Progress Dialog Handler.&lt;br&gt;
For example, this could be done as following.&lt;br&gt;
First, you have to get the convenient builder calling:&lt;br&gt;
&lt;code&gt;
IProgressItemsBuilder progressItemsBuilder=ProgressItemsBuilderFactory.getProgressItemsBuilder();
&lt;/code&gt;&lt;br&gt;
Then, you have to create a progress dialog handler and call the convenient run method:&lt;br&gt;
&lt;code&gt;
progressItemsBuilder.getModalProgressDialogHandler().asynchronousRunWithProgress(runnable_p, taskName_p);
&lt;/code&gt;&lt;br&gt;
If you want to report the amount of work processed, it is a little bit more complicated.&lt;br&gt;
Before calling the &quot;run&quot; method, you have to intialize the progress handler of the progress dialog handler calling &lt;code&gt;IModalProgressDialogHandler::initializeProgressHandler()&lt;/code&gt; and call a &quot;run&quot; method having an integer parameter representing the total amount of work.&lt;br&gt;
PLEASE NOTE that in this case, you have to handle the progress handler very carefully (like Progress Monitors in Eclipse):&lt;br&gt;
==&gt;YOU MUST call the &lt;code&gt;worked(int amountProcessed)&lt;/code&gt; when convenient in the process whose progress is reported.&lt;br&gt;
==&gt;YOU MUST call the &lt;code&gt;done()&lt;/code&gt; method at the end of the managed process.
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="implementation"/>
      </appInfo>
      <documentation>
         [Enter information about supplied implementation of this extension point.]
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="copyright"/>
      </appInfo>
      <documentation>
         Copyright (c) 2006, 2014 THALES GLOBAL SERVICES.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
   Thales - initial API and implementation
      </documentation>
   </annotation>

</schema>
