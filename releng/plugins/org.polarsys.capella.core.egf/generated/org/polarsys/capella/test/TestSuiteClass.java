//Generated with EGF 1.5.0.v20170706-0846
package org.polarsys.capella.test;

import org.eclipse.egf.common.helper.*;
import java.util.*;
import org.eclipse.emf.ecore.*;
import org.eclipse.egf.model.pattern.*;
import org.eclipse.egf.pattern.execution.*;
import org.eclipse.egf.pattern.query.*;
import org.eclipse.emf.common.util.*;

public class TestSuiteClass extends org.eclipse.egf.emf.pattern.base.GenClassJava {
	protected static String nl;

	public static synchronized TestSuiteClass create(String lineSeparator) {
		nl = lineSeparator;
		TestSuiteClass result = new TestSuiteClass();
		nl = null;
		return result;
	}

	public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
	protected final String TEXT_1 = "/**" + NL + " * Copyright (c) THALES 2007, 2009. All rights reserved." + NL + " */"
			+ NL + "package ";
	protected final String TEXT_2 = ";" + NL + NL;
	protected final String TEXT_3 = "import java.util.ArrayList;" + NL + "import java.util.List;" + NL + "" + NL
			+ "import org.polarsys.capella.test.common.IExtendedTest;" + NL
			+ "import org.polarsys.capella.core.model.tests.ju.CapellaModelAbstractTestSuite;" + NL + "" + NL
			+ "import junit.framework.Test;" + NL + NL;
	protected final String TEXT_4 = "/**" + NL + " * ";
	protected final String TEXT_5 = " Cross Referencing test suite." + NL + " * " + NL + " * Class generated by SolFa."
			+ NL + " * This code shall not be modified manually." + NL + " *" + NL + " * @generated" + NL + " */" + NL
			+ "public class ";
	protected final String TEXT_6 = "_CrossReferencingTestSuite extends CapellaModelAbstractTestSuite {" + NL + "  /**"
			+ NL + "   * @see org.polarsys.capella.test.common.ju.AbstractCapellaTestSuite#getTests()" + NL
			+ "   * @generated" + NL + "   */" + NL + "  @Override" + NL
			+ "  protected List<IExtendedTest> getTests() {" + NL
			+ "    ArrayList<IExtendedTest> tests = new ArrayList<IExtendedTest>(1);" + NL + NL;
	protected final String TEXT_7 = NL + "    return tests;" + NL + "  }" + NL + "" + NL + "  /**" + NL
			+ "   * Returns the suite. This is required to use the JUnit Launcher." + NL + "   * @generated" + NL
			+ "   */" + NL + "  public static Test suite() {" + NL + "    return new ";
	protected final String TEXT_8 = "_CrossReferencingTestSuite();" + NL + "  }" + NL + "}" + NL;
	protected final String TEXT_9 = NL;
	protected final String TEXT_10 = NL;

	public TestSuiteClass() {
		//Here is the constructor
		StringBuffer stringBuffer = new StringBuffer();

	}

	public String generate(Object argument) throws Exception {
		final StringBuffer stringBuffer = new StringBuffer();

		InternalPatternContext ctx = (InternalPatternContext) argument;
		Map<String, String> queryCtx = null;
		IQuery.ParameterDescription paramDesc = null;
		Node.Container currentNode = ctx.getNode();

		List<Object> parameterList = null;
		//this pattern can only be called by another (i.e. it's not an entry point in execution)

		for (Object parameterParameter : parameterList) {

			this.parameter = (org.eclipse.emf.codegen.ecore.genmodel.GenClass) parameterParameter;

			if (preCondition(ctx)) {
				ctx.setNode(new Node.Container(currentNode, getClass()));
				orchestration(ctx);
			}

		}
		ctx.setNode(currentNode);
		if (ctx.useReporter()) {
			ctx.getReporter().executionFinished(OutputManager.computeExecutionOutput(ctx), ctx);
		}

		stringBuffer.append(TEXT_9);
		stringBuffer.append(TEXT_10);
		return stringBuffer.toString();
	}

	public String orchestration(PatternContext ctx) throws Exception {
		InternalPatternContext ictx = (InternalPatternContext) ctx;

		super.orchestration(new SuperOrchestrationContext(ictx));

		method_generatePackage(new StringBuffer(), ictx);

		method_generateImports(new StringBuffer(), ictx);

		method_beginClass(new StringBuffer(), ictx);
		{
			ExecutionContext ctx_local = new ExecutionContext(ictx);
			ctx_local.setValue(PatternContext.INJECTED_CONTEXT, genModel);
			CallHelper.executeWithContextInjection(
					"platform:/plugin/org.polarsys.capella.core.egf/egf/capella.fcore#_iHlL8G6nEeGgrZQeRREOYg",
					ctx_local);
		}

		method_endClass(new StringBuffer(), ictx);

		if (ictx.useReporter()) {
			Map<String, Object> parameterValues = new HashMap<String, Object>();
			parameterValues.put("parameter", this.parameter);
			String outputWithCallBack = OutputManager.computeLoopOutput(ictx);
			String loop = OutputManager.computeLoopOutputWithoutCallback(ictx);
			ictx.getReporter().loopFinished(loop, outputWithCallBack, ictx, parameterValues);
		}
		return null;
	}

	protected java.lang.String eclassCondition = null;

	public void set_eclassCondition(java.lang.String object) {
		this.eclassCondition = object;
	}

	protected java.lang.String generatedSourceFolderPath = null;

	public void set_generatedSourceFolderPath(java.lang.String object) {
		this.generatedSourceFolderPath = object;
	}

	protected org.eclipse.emf.codegen.ecore.genmodel.GenClass genClass = null;

	public void set_genClass(org.eclipse.emf.codegen.ecore.genmodel.GenClass object) {
		this.genClass = object;
	}

	public Map<String, Object> getParameters() {
		final Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("parameter", this.parameter);
		return parameters;
	}

	protected void method_setReporterVariables(final StringBuffer stringBuffer, final PatternContext ctx)
			throws Exception {

		genClass = parameter;
		eclassCondition = (String) ctx.getValue("eclassCondition");
		generatedSourceFolderPath = (String) ctx.getValue("generatedSourceFolderPath");

		targetPath = "/org.polarsys.capella.core.model.tests.ju/generated";
		packageName = generatedSourceFolderPath;
		className = eclassCondition + "_CrossReferencingTestSuite";

		InternalPatternContext ictx = (InternalPatternContext) ctx;
		new Node.DataLeaf(ictx.getNode(), getClass(), "setReporterVariables", stringBuffer.toString());
	}

	protected void method_generatePackage(final StringBuffer stringBuffer, final PatternContext ctx) throws Exception {

		stringBuffer.append(TEXT_1);
		stringBuffer.append(generatedSourceFolderPath);
		stringBuffer.append(TEXT_2);
		InternalPatternContext ictx = (InternalPatternContext) ctx;
		new Node.DataLeaf(ictx.getNode(), getClass(), "generatePackage", stringBuffer.toString());
	}

	protected void method_generateImports(final StringBuffer stringBuffer, final PatternContext ctx) throws Exception {

		stringBuffer.append(TEXT_3);
		InternalPatternContext ictx = (InternalPatternContext) ctx;
		new Node.DataLeaf(ictx.getNode(), getClass(), "generateImports", stringBuffer.toString());
	}

	protected void method_beginClass(final StringBuffer stringBuffer, final PatternContext ctx) throws Exception {

		stringBuffer.append(TEXT_4);
		stringBuffer.append(eclassCondition);
		stringBuffer.append(TEXT_5);
		stringBuffer.append(eclassCondition);
		stringBuffer.append(TEXT_6);
		InternalPatternContext ictx = (InternalPatternContext) ctx;
		new Node.DataLeaf(ictx.getNode(), getClass(), "beginClass", stringBuffer.toString());
	}

	protected void method_endClass(final StringBuffer stringBuffer, final PatternContext ctx) throws Exception {

		stringBuffer.append(TEXT_7);
		stringBuffer.append(eclassCondition);
		stringBuffer.append(TEXT_8);
		InternalPatternContext ictx = (InternalPatternContext) ctx;
		new Node.DataLeaf(ictx.getNode(), getClass(), "endClass", stringBuffer.toString());
	}
}