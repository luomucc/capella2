<?xml version="1.0" encoding="UTF-8"?>
<!--
This file was generated by Eclipse EGF
-->
<project name="project" default="all">
    <property environment="env" />

	<property name="relengDir" value="${basedir}"/>
	<tstamp>
		<format property="myTimestamp" pattern="yyyyMMdd-HHmm"/>
	</tstamp>

    <condition property="build.root" value="${env.WORKSPACE}">
        <isset property="env.WORKSPACE" />
    </condition>
    <condition property="tools" value="${env.tools}">
        <isset property="env.tools" />
    </condition>
    <condition property="result" value="${env.result}">
        <isset property="env.result" />
    </condition>
    <condition property="publish" value="${env.publish}">
        <isset property="env.publish" />
    </condition>
    <condition property="workspace" value="${env.ECLIPSE_WORKSPACE}">
        <isset property="env.ECLIPSE_WORKSPACE" />
    </condition>
    <condition property="timestamp" value="${env.BUILD_ID}">
        <isset property="env.BUILD_ID" />
    </condition>
    <condition property="VERSION" value="${env.VERSION}">
        <isset property="env.VERSION" />
    </condition>
    <condition property="buildVersion" value="${env.buildVersion}">
        <isset property="env.buildVersion" />
    </condition>
    <condition property="qualifier.replacement.*" value="${env.qualifier.replacement.*}">
        <isset property="env.qualifier.replacement.*" />
    </condition>
    <condition property="hudson.job.url" value="${env.hudson.job.url}">
        <isset property="env.hudson.job.url" />
    </condition>
    <condition property="capella.version" value="${env.capella.version}">
        <isset property="env.capella.version" />
    </condition>
    <condition property="site_QueryLegacy" value="${env.site_QueryLegacy}">
        <isset property="env.site_QueryLegacy" />
    </condition>
    <condition property="site_DiffMerge" value="${env.site_DiffMerge}">
        <isset property="env.site_DiffMerge" />
    </condition>
    <condition property="site_Patterns" value="${env.site_Patterns}">
        <isset property="env.site_Patterns" />
    </condition>
    <condition property="site_Kitalpha_CTK" value="${env.site_Kitalpha_CTK}">
        <isset property="env.site_Kitalpha_CTK" />
    </condition>
    <condition property="site_Kitalpha_SDK" value="${env.site_Kitalpha_SDK}">
        <isset property="env.site_Kitalpha_SDK" />
    </condition>
    <condition property="site_Amalgam" value="${env.site_Amalgam}">
        <isset property="env.site_Amalgam" />
    </condition>
    <condition property="launch_configs" value="${env.launch_configs}">
        <isset property="env.launch_configs" />
    </condition>

    <property file="build.properties" />

    <!-- This macro executes the default application of an eclipse installation that resides
         in the folder ${buildtools}/@app
      -->
    <macrodef name="eclipse.launch">
        <attribute name="app" />
        <attribute name="workspace" default="${workspace}" />
        <element name="args" optional="true" />
        <sequential>
            <!-- We assume that the eclipse installation is beneath ${tools} -->
            <property name="@{app}.deploy.dir" value="${tools}/@{app}" />

            <!-- Find the Eclipse launcher and assing its location to the @{app}.launcher property -->
            <pathconvert property="@{app}.launcher">
                <first count="1">
                    <sort>
                        <fileset dir="${@{app}.deploy.dir}/plugins" includes="**/org.eclipse.equinox.launcher_*.jar" />
                        <reverse xmlns="antlib:org.apache.tools.ant.types.resources.comparators">
                            <date />
                        </reverse>
                    </sort>
                </first>
            </pathconvert>

			<!-- Copy Eclipse Variables preferences -->
			<copy file="${relengDir}/templates/org.eclipse.core.variables.prefs"
				toFile="@{workspace}/.metadata/.plugins/org.eclipse.core.runtime/.settings/org.eclipse.core.variables.prefs"/>

            <!-- Launch the eclipse application -->
            <java fork="true" jar="${@{app}.launcher}" dir="${@{app}.deploy.dir}" failonerror="true">
                    <jvmarg value="-Xmx1024m"/>
                    <jvmarg value="-XX:MaxPermSize=256m"/>

	                <jvmarg value="-DrelengDir=relengDir"/>
	                <jvmarg value="-Dbuild.root=${build.root}"/>
	                <jvmarg value="-Dtools=${tools}"/>
	                <jvmarg value="-Dresult=${result}"/>
	                <jvmarg value="-Dpublish=${publish}"/>
	                <jvmarg value="-Dworkspace=${workspace}"/>
	                <jvmarg value="-Dtimestamp=${timestamp}"/>
	                <jvmarg value="-DVERSION=${VERSION}"/>
	                <jvmarg value="-DbuildVersion=${buildVersion}"/>
	                <jvmarg value="-Dqualifier.replacement.*=${qualifier.replacement.*}"/>
	                <jvmarg value="-Dhudson.job.url=${hudson.job.url}"/>
	                <jvmarg value="-Dcapella.version=${capella.version}"/>
	                <jvmarg value="-Dsite_QueryLegacy=${site_QueryLegacy}"/>
	                <jvmarg value="-Dsite_DiffMerge=${site_DiffMerge}"/>
	                <jvmarg value="-Dsite_Patterns=${site_Patterns}"/>
	                <jvmarg value="-Dsite_Kitalpha_CTK=${site_Kitalpha_CTK}"/>
	                <jvmarg value="-Dsite_Kitalpha_SDK=${site_Kitalpha_SDK}"/>
	                <jvmarg value="-Dsite_Amalgam=${site_Amalgam}"/>
	                <jvmarg value="-Dlaunch_configs=${launch_configs}"/>
                    <arg value="-data" />
                    <arg value="@{workspace}" />
                <args />
            </java>
        </sequential>
    </macrodef>
    <target name="install.director">
        <available file="${tools}/director/director" property="director.exists" />
        <antcall target="do.install.director" />
    </target>
    
    <target name="do.install.director" unless="director.exists">
        <echo message="Fetching headless director application" />
        <tempfile destdir="${java.io.tmpdir}" prefix="director-" suffix=".zip" property="director.zip" deleteonexit="true" />
        <get src="${director.url}" dest="${director.zip}" />
        <mkdir dir="${tools}" />
        <unzip src="${director.zip}" dest="${tools}" />
        <delete file="${director.zip}" />
    </target>
    <target name="install.buckminster">
        <available file="${tools}/buckminster/buckminster" property="buckminster.exists" />
        <antcall target="do.install.buckminster" />
	</target>
	
    <target name="do.install.buckminster" unless="buckminster.exists" depends="install.director">
        <echo message="Configuring headless buckminster with needed features" />
        <echo message="Headless site: ${bm.headless.site}" />
        <echo message="External site: ${bm.external.site}" />
        <eclipse.launch app="director">
            <args>
                <jvmarg value="-Declipse.p2.mirrors=false" />
                <arg value="-r" />
                <arg value="${bm.headless.site}" />
                <arg value="-d" />
                <arg value="${tools}/buckminster" />
                <arg value="-p" />
                <arg value="Buckminster" />
                <arg value="-i" />
                <arg value="org.eclipse.buckminster.cmdline.product" />
                <arg value="-i" />
                <arg value="org.eclipse.buckminster.core.headless.feature.feature.group" />
                <arg value="-i" />
                <arg value="org.eclipse.buckminster.pde.headless.feature.feature.group" />
            </args>
        </eclipse.launch>
    </target>
        <target name="install.egf">
        <available file="${tools}/egf/eclipse.ini" property="egf.exists" />
        <antcall target="do.install.egf" />
	</target>

	<target name="do.install.egf" unless="egf.exists" depends="install.director">
        <echo message="Configuring EGF with needed features" />
        <echo message="EGF site: ${egf.site}" />
        <echo message="EGF eclipse site: ${egf.eclipse.site}" />
        <eclipse.launch app="director">
            <args>
                <jvmarg value="-Declipse.p2.mirrors=false" />
                <arg value="-r" />
                <arg value="${egf.site}" />
                <arg value="-r" />
                <arg value="${egf.eclipse.site}" />
                <arg value="-d" />
                <arg value="${tools}/egf" />
                <arg value="-p" />
                <arg value="EGF" />
                <arg value="-i" />
                <arg value="org.eclipse.platform.ide" />
                <arg value="-i" />
                <arg value="org.eclipse.egf.feature.group" />
                <arg value="-i" />
                <arg value="org.eclipse.egf.portfolio.feature.group" />
                <arg value="-i" />
                <arg value="org.eclipse.egf.portfolio.emf.feature.group" />
                <arg value="-i" />
                <arg value="org.eclipse.egf.portfolio.genchain.feature.group" />
            </args>
        </eclipse.launch>
    </target>
    <macrodef name="buckminster">
        <attribute name="command" />
        <element name="globargs" optional="true" />
        <element name="cmdargs" optional="true" />
        <sequential>
            <eclipse.launch app="buckminster">
                <args>
                    <jvmarg value="-Dbugfix.288796=true"/>
                    <arg value="--loglevel" />
                    <arg value="${buckminster.loglevel}" />
                    <arg value="--displaystacktrace" />
                    <globargs />
                    <arg value="@{command}" />
                    <arg value="-P" />
                    <arg value="${properties.tmp}" />
                    <cmdargs />
                </args>
            </eclipse.launch>
        </sequential>
    </macrodef>
	<macrodef name="egf">
        <element name="activities" />
        <element name="globargs" optional="true" />
        <element name="cmdargs" optional="true" />
        <sequential>
            <eclipse.launch app="egf">
                <args>
                    <arg value="-application" />
                    <arg value="org.eclipse.egf.application.activity" />
                    <arg value="-consoleLog" />
                    <globargs />
                    <arg value="-activities" />
                    <activities />
                    <cmdargs />
                </args>
            </eclipse.launch>
        </sequential>
    </macrodef>
	<macrodef name="anteclipse">
        <attribute name="buildfile" default="${relengDir}/build.xml" />
        <attribute name="target" />
        <element name="globargs" optional="true" />
        <sequential>
            <eclipse.launch app="egf">
                <args>
					<arg value="-application" />
					<arg value="org.eclipse.ant.core.antRunner" />
					<arg value="-consoleLog" />
                    <globargs />
					<arg value="-buildfile" />
					<arg value="@{buildfile}" />
					<arg value="@{target}" />
                </args>
            </eclipse.launch>
        </sequential>
    </macrodef>
    <target name="clean.result">
        <delete dir="${result}" failonerror="true" quiet="true" />
    </target>

    <target name="clean.workspace">
        <delete dir="${workspace}" failonerror="true" quiet="true" />
    </target>

    <target name="clean.tools">
        <delete dir="${tools}" failonerror="true" quiet="true" />
    </target>

    <target name="clean.all">
		<antcall target="clean.workspace" />
		<antcall target="clean.result" />
		<antcall target="clean.tools" />
    </target>
	<target name="init" depends="init.build.properties" >
		<echo message="Available variables are : "/>
		<echo message="Builtin $${relengDir} : ${relengDir}" />
		<echo message="Builtin $${build.root} : ${build.root}" />
		<echo message="Builtin $${tools} : ${tools}" />
		<echo message="Builtin $${result} : ${result}" />
		<echo message="Builtin $${publish} : ${publish}" />
		<echo message="Builtin $${workspace} : ${workspace}" />
		<echo message="Builtin $${timestamp} : ${timestamp}" />
		<echo message="Provided $${VERSION} : ${VERSION}" />
		<echo message="Provided $${buildVersion} : ${buildVersion}" />
		<echo message="Provided $${qualifier.replacement.*} : ${qualifier.replacement.*}" />
		<echo message="Provided $${hudson.job.url} : ${hudson.job.url}" />
		<echo message="Provided $${capella.version} : ${capella.version}" />
		<echo message="Provided $${site_QueryLegacy} : ${site_QueryLegacy}" />
		<echo message="Provided $${site_DiffMerge} : ${site_DiffMerge}" />
		<echo message="Provided $${site_Patterns} : ${site_Patterns}" />
		<echo message="Provided $${site_Kitalpha_CTK} : ${site_Kitalpha_CTK}" />
		<echo message="Provided $${site_Kitalpha_SDK} : ${site_Kitalpha_SDK}" />
		<echo message="Provided $${site_Amalgam} : ${site_Amalgam}" />
		<echo message="Provided $${launch_configs} : ${launch_configs}" />
	</target>

    <target name="init.build.properties">
        <!-- Echo relevant properties to a temporary file so that Buckminster can read them -->
        <tempfile destdir="${java.io.tmpdir}" prefix="build-" suffix=".properties" deleteonexit="true" property="properties.tmp" />
        <echoproperties destfile="${properties.tmp}">
            <!-- We don't want these. basedir in particular will cause problems if passed explicitly -->
            <propertyset negate="true">
                <propertyref name="basedir" />
                <propertyref name="eclipse.home" />
                <propertyref name="properties.tmp" />
                <propertyref name="line.separator" />
                <propertyref name="path.separator" />
                <propertyref prefix="ant." />
                <propertyref prefix="file." />
                <propertyref prefix="java." />
                <propertyref prefix="sun." />
                <propertyref prefix="user." />
            </propertyset>
        </echoproperties>
    </target>
	
	<target name="all" depends="InitializeEnv,RunCapellaTestSuites" />
	<target name="InitializeEnv" depends="InitializeEnv_Clean_Result,InitializeEnv_delete_TP,InitializeEnv_Download_CapellaTP" />
	<target name="RunCapellaTestSuites" depends="RunCapellaTestSuites_Install_Jacoco,RunCapellaTestSuites_Run_TestSuites,RunCapellaTestSuites_Save_Jacoco_report" />
	<target name="RunCapellaTestSuites_Install_Jacoco" depends="RunCapellaTestSuites_Install_Jacoco_install.jacoco" />
	<target name="RunCapellaTestSuites_Run_TestSuites" depends="RunCapellaTestSuites_Run_TestSuites_Clean_Workspace,RunCapellaTestSuites_Run_TestSuites_Import_Test_Plugins,RunCapellaTestSuites_Run_TestSuites_PublishStep_3,RunCapellaTestSuites_Run_TestSuites_RunInUITestSuite,RunCapellaTestSuites_Run_TestSuites_RunInNotUITestSuite,RunCapellaTestSuites_Run_TestSuites_LocalTestSuite" />
	<target name="InitializeEnv_Clean_Result" >
		<antcall target="clean.result" />
	</target>
	<target name="RunCapellaTestSuites_Run_TestSuites_Clean_Workspace" >
		<antcall target="clean.workspace" />
	</target>
    <target name="RunCapellaTestSuites_Run_TestSuites_Import_Test_Plugins" depends="init,install.buckminster">
        <echo message="Importing projects into workspace ${workspace} and binaries into target platform" />

		<echo message="install JRE ${env.JAVA_HOME}" />
    	<buckminster command="installJRE">
            <cmdargs>
                <arg value="--location" />
                <arg value="${env.JAVA_HOME}" />
            </cmdargs>
        </buckminster>


		<echo message="import target platform" />
        <buckminster command="importtargetdefinition">
            <cmdargs>
                <arg value="--active" />
                <arg value="${relengDir}/buckminster_RunCapellaTestSuites_Run_TestSuites_Import_Test_Plugins/build.target" />
            </cmdargs>
        </buckminster>
		<echo message="provision : import projects in workspace" />
        <buckminster command="import">
            <!-- Uncomment to debug <globargs><jvmarg value="-agentlib:jdwp=transport=dt_socket,address=8000,server=y,suspend=y"/></globargs> -->
            <cmdargs>
                <arg value="${relengDir}/buckminster_RunCapellaTestSuites_Run_TestSuites_Import_Test_Plugins/build.mspec" />
            </cmdargs>
        </buckminster>


        <echo message="Invoking all eclipse builders on workspace ${workspace}" />
        <buckminster command="build" >
            <cmdargs>
                <arg value="--clean" />
                <arg value="--thorough" />
            </cmdargs>
		</buckminster>
    </target>

	<target name="RunCapellaTestSuites_Run_TestSuites_PublishStep_3" depends="init,install.buckminster" >

		
		<echo message="Generate Site"/>
		<buckminster command="perform">
			<globargs>
				<arg value="-Dsite.include.top=true"/>
				<arg value="-Dsite.signing=false"/>				
				<arg value="-Dcbi.include.source=true"/>				
			</globargs>
			<cmdargs>
				<arg value="org.polarsys.capella.test.feature:eclipse.feature#site.p2" />
			</cmdargs>
		</buckminster>

		<echo message="Publish site"/>
		<mkdir dir="${publish}/org.polarsys.capella.test.feature/site.p2/"/>
		<copy todir="${publish}/org.polarsys.capella.test.feature/site.p2/">
			<fileset dir="${result}/output">
				<include name="org.polarsys.capella.test.feature*/site.p2/*"/>
				<include name="org.polarsys.capella.test.feature*/site.p2/**"/>
			</fileset>
			<filtermapper>
				<replaceregex pattern=".*site\.p2" replace="" />
			</filtermapper>
		</copy>
		
	</target>

	<target name="RunCapellaTestSuites_Run_TestSuites_RunInUITestSuite" depends="init,install.buckminster">
	  <echo message="Running Junit tests " />
      <buckminster command="junit">
        <cmdargs>
          <arg value="-l" />
          <arg value="${launch_configs}/RunInUITestSuite.launch" />
          <arg value="-o" />
          <arg value="${result}/testReportRunCapellaTestSuites_Run_TestSuites_RunInUITestSuite.xml" />
          <arg value="--terseXML" />
          <arg value="--flatXML"/>
        </cmdargs>
      </buckminster>
	</target>

	<target name="RunCapellaTestSuites_Run_TestSuites_RunInNotUITestSuite" depends="init,install.buckminster">
	  <echo message="Running Junit tests " />
      <buckminster command="junit">
        <cmdargs>
          <arg value="-l" />
          <arg value="${launch_configs}/RunInNotUITestSuite.launch" />
          <arg value="-o" />
          <arg value="${result}/testReportRunCapellaTestSuites_Run_TestSuites_RunInNotUITestSuite.xml" />
          <arg value="--terseXML" />
          <arg value="--flatXML"/>
        </cmdargs>
      </buckminster>
	</target>

	<target name="RunCapellaTestSuites_Run_TestSuites_LocalTestSuite" depends="init,install.buckminster">
	  <echo message="Running Junit tests " />
      <buckminster command="junit">
        <cmdargs>
          <arg value="-l" />
          <arg value="${launch_configs}/LocalTestSuite.launch" />
          <arg value="-o" />
          <arg value="${result}/testReportRunCapellaTestSuites_Run_TestSuites_LocalTestSuite.xml" />
          <arg value="--terseXML" />
          <arg value="--flatXML"/>
        </cmdargs>
      </buckminster>
	</target>


	<target name="InitializeEnv_Download_CapellaTP">
		<antcall target="DownloadCapellaTP"/>
	</target>

<target name="DownloadCapellaTP">
	 <dirname property="dir" file="${publish}/CapellaTP.ts"/>
	 <mkdir dir="${dir}" />

	<get 
		src="${hudson.job.url}/buildTimestamp?format=yyyy-MM-dd_HH-mm-ss" 
		dest="${publish}/CapellaTP.ts"/>
	
	<loadfile srcfile="${publish}/CapellaTP.ts" property="ts"/>
	<echo>${publish}/CapellaTP timestamp: ${ts}</echo>

	<get 
		src="${hudson.job.url}/artifact/result/publish/capella-${capella.version}.${ts}-linux-gtk-x86_64-${eclipseCodeName}.tar.gz"
		dest="${publish}/CapellaTP.tar.gz"/>

<gunzip src="${publish}/CapellaTP.tar.gz"/>
<untar src="${publish}/CapellaTP.tar" dest="${publish}/CapellaTP"/>

</target> 



	<target name="RunCapellaTestSuites_Install_Jacoco_install.jacoco">
		<antcall target="install.jacoco"/>
	</target>

<target name="install.jacoco">
	<property name="jacoco.url">http://search.maven.org/remotecontent?filepath=org/jacoco/jacoco/0.7.1.201405082137/jacoco-0.7.1.201405082137.zip</property>

	<available file="${tools}/jacoco" property="jacoco.exists" />
	<antcall target="do.install.jacoco" />
</target>

<target name="do.install.jacoco" unless="jacoco.exists">

	<echo message="Fetching jacoco library" />
	<tempfile destdir="${java.io.tmpdir}" prefix="jacoco-" suffix=".zip" property="jacoco.zip" deleteonexit="true" />
	<get src="${jacoco.url}" dest="${jacoco.zip}" />
	<mkdir dir="${tools}" />
	<unzip src="${jacoco.zip}" dest="${tools}/jacoco" />
	<delete file="${jacoco.zip}" />
</target>

	<target name="RunCapellaTestSuites_Save_Jacoco_report" depends="init">
		<copy todir="${publish}/org.polarsys.capella.test.feature/site.p2/"  >
			<fileset file="${result}/jacoco.exec"/>
		</copy>
	</target>

	<target name="InitializeEnv_delete_TP" depends="init">
		<delete dir="${publish}/CapellaTP" >

		</delete>
	</target>

</project>