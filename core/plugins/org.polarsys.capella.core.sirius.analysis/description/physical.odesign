<?xml version="1.0" encoding="ASCII"?>
<description:Group xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:description="http://www.eclipse.org/sirius/description/1.1.0" xmlns:description_1="http://www.eclipse.org/sirius/table/description/1.1.0" xmlns:description_2="http://www.eclipse.org/sirius/diagram/description/1.1.0" xmlns:description_3="http://www.eclipse.org/sirius/diagram/sequence/description/2.0.0" xmlns:filter="http://www.eclipse.org/sirius/diagram/description/filter/1.1.0" xmlns:style="http://www.eclipse.org/sirius/diagram/description/style/1.1.0" xmlns:tool="http://www.eclipse.org/sirius/description/tool/1.1.0" xmlns:tool_1="http://www.eclipse.org/sirius/diagram/description/tool/1.1.0" name="Physical Descriptions" version="12.0.0.2017041100">
  <ownedViewpoints name="Physical Architecture" modelFileExtension="melodymodeller" icon="">
    <ownedRepresentations xsi:type="description_1:CrossTableDescription" name="Physical Functions - Requirements" domainClass="PhysicalArchitecture">
      <ownedLineMappings name="Physical Functions 2" domainClass="AbstractFunction" semanticCandidatesExpression="&lt;%getTableRootAbstractFunctions()%>" headerLabelExpression="feature:name">
        <ownedSubLines name="Sub Physical Functions 2" reusedSubLines="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Functions%20-%20Requirements']/@ownedLineMappings[name='Physical%20Functions%202']/@ownedSubLines[name='Sub%20Physical%20Functions%20Pkg'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Functions%20-%20Requirements']/@ownedLineMappings[name='Physical%20Functions%202']/@ownedSubLines[name='Sub%20Physical%20Functions%202']" reusedInMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Functions%20-%20Requirements']/@ownedLineMappings[name='Physical%20Functions%202']/@ownedSubLines[name='Sub%20Physical%20Functions%202'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Functions%20-%20Requirements']/@ownedLineMappings[name='FunctionPkgs'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Functions%20-%20Requirements']/@ownedLineMappings[name='Physical%20Functions%202']/@ownedSubLines[name='Sub%20Physical%20Functions%20Pkg']" domainClass="PhysicalFunction" semanticCandidatesExpression="&lt;%getOwnedAbstractFunctions()%>" headerLabelExpression="feature:name">
          <delete name="No delete" precondition="false">
            <variables name="element" documentation="The currently edited element."/>
            <variables name="root" documentation="The semantic element corresponding to the current table."/>
          </delete>
        </ownedSubLines>
        <ownedSubLines name="Sub Physical Functions Pkg" reusedSubLines="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Functions%20-%20Requirements']/@ownedLineMappings[name='Physical%20Functions%202']/@ownedSubLines[name='Sub%20Physical%20Functions%202'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Functions%20-%20Requirements']/@ownedLineMappings[name='Physical%20Functions%202']/@ownedSubLines[name='Sub%20Physical%20Functions%20Pkg']" reusedInMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Functions%20-%20Requirements']/@ownedLineMappings[name='Physical%20Functions%202']/@ownedSubLines[name='Sub%20Physical%20Functions%202'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Functions%20-%20Requirements']/@ownedLineMappings[name='FunctionPkgs'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Functions%20-%20Requirements']/@ownedLineMappings[name='Physical%20Functions%202']/@ownedSubLines[name='Sub%20Physical%20Functions%20Pkg']" domainClass="FunctionPkg" semanticCandidatesExpression="&lt;%getOwnedAbstractFunctionPkgs()%>" headerLabelExpression="feature:name">
          <delete name="No delete" precondition="false">
            <variables name="element" documentation="The currently edited element."/>
            <variables name="root" documentation="The semantic element corresponding to the current table."/>
          </delete>
        </ownedSubLines>
        <delete name="No delete" precondition="false">
          <variables name="element" documentation="The currently edited element."/>
          <variables name="root" documentation="The semantic element corresponding to the current table."/>
        </delete>
      </ownedLineMappings>
      <ownedLineMappings name="FunctionPkgs" reusedSubLines="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Functions%20-%20Requirements']/@ownedLineMappings[name='Physical%20Functions%202']/@ownedSubLines[name='Sub%20Physical%20Functions%202'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Functions%20-%20Requirements']/@ownedLineMappings[name='Physical%20Functions%202']/@ownedSubLines[name='Sub%20Physical%20Functions%20Pkg']" domainClass="FunctionPkg" semanticCandidatesExpression="&lt;%getTableRootAbstractFunctionPkgs()%>">
        <delete name="No delete" precondition="false">
          <variables name="element" documentation="The currently edited element."/>
          <variables name="root" documentation="The semantic element corresponding to the current table."/>
        </delete>
      </ownedLineMappings>
      <ownedColumnMappings name="Requirements 6" headerLabelExpression="&lt;%getRequirementElementLabel()%>" domainClass="Requirement">
        <delete name="No delete" precondition="false">
          <variables name="element" documentation="The currently edited element."/>
          <variables name="root" documentation="The semantic element corresponding to the current table."/>
        </delete>
      </ownedColumnMappings>
      <intersection name="Trace 6" lineMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Functions%20-%20Requirements']/@ownedLineMappings[name='Physical%20Functions%202'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Functions%20-%20Requirements']/@ownedLineMappings[name='Physical%20Functions%202']/@ownedSubLines[name='Sub%20Physical%20Functions%202']" columnMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Functions%20-%20Requirements']/@ownedColumnMappings.0" labelExpression="X" useDomainClass="true" columnFinderExpression="feature:targetElement" lineFinderExpression="feature:sourceElement" domainClass="RequirementsTrace">
        <directEdit>
          <variables name="table" documentation="The current DTable."/>
          <variables name="line" documentation="The DLine of the current DCell."/>
          <variables name="element" documentation="The currently edited element."/>
          <variables name="lineSemantic" documentation="The semantic element corresponding to the line."/>
          <variables name="columnSemantic" documentation="The semantic element corresponding to the column."/>
          <variables name="root" documentation="The semantic element of the table."/>
          <firstModelOperation xsi:type="tool:If" conditionExpression="&lt;%$0 == &quot;&quot; &amp;&amp; $root.eAllContents().filter(&quot;RequirementsTrace&quot;)[targetElement == $columnSemantic &amp;&amp; sourceElement == $lineSemantic].nSize() > 0%>">
            <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$root.eAllContents().filter(&quot;RequirementsTrace&quot;)[targetElement == $columnSemantic &amp;&amp; sourceElement == $lineSemantic].nFirst()%>">
              <subModelOperations xsi:type="tool:RemoveElement"/>
            </subModelOperations>
          </firstModelOperation>
          <mask mask="{0}"/>
        </directEdit>
        <create name="DDDD" forceRefresh="true">
          <variables name="lineSemantic" documentation="The semantic element corresponding to the line."/>
          <variables name="columnSemantic" documentation="The semantic element corresponding to the column."/>
          <variables name="root" documentation="The semantic root element of the table."/>
          <firstModelOperation xsi:type="tool:ChangeContext" browseExpression="&lt;%$lineSemantic%>">
            <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%$0 == &quot;X&quot;%>">
              <subModelOperations xsi:type="tool:CreateInstance" typeName="RequirementsTrace" referenceName="ownedTraces">
                <subModelOperations xsi:type="tool:SetValue" featureName="sourceElement" valueExpression="&lt;%$lineSemantic%>"/>
                <subModelOperations xsi:type="tool:SetValue" featureName="targetElement" valueExpression="&lt;%$columnSemantic%>"/>
              </subModelOperations>
            </subModelOperations>
          </firstModelOperation>
          <mask mask="{0}"/>
        </create>
      </intersection>
    </ownedRepresentations>
    <ownedRepresentations xsi:type="description_1:CrossTableDescription" name="Physical Components - Requirements" domainClass="PhysicalArchitecture">
      <ownedLineMappings name="Physical Component 2" domainClass="PhysicalComponent" semanticCandidatesExpression="&lt;%ownedPhysicalComponent.subPhysicalComponents%>" headerLabelExpression="feature:name">
        <ownedSubLines name="Sub Physical Component 2" reusedSubLines="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Components%20-%20Requirements']/@ownedLineMappings[name='Physical%20Component%202']/@ownedSubLines[name='Sub%20Physical%20Component%202']" reusedInMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Components%20-%20Requirements']/@ownedLineMappings[name='Physical%20Component%202']/@ownedSubLines[name='Sub%20Physical%20Component%202']" domainClass="PhysicalComponent" semanticCandidatesExpression="feature:subPhysicalComponents" headerLabelExpression="feature:name">
          <delete name="No delete" precondition="false">
            <variables name="element" documentation="The currently edited element."/>
            <variables name="root" documentation="The semantic element corresponding to the current table."/>
          </delete>
        </ownedSubLines>
        <delete name="No delete" precondition="false">
          <variables name="element" documentation="The currently edited element."/>
          <variables name="root" documentation="The semantic element corresponding to the current table."/>
        </delete>
      </ownedLineMappings>
      <ownedColumnMappings name="Requirements 2" headerLabelExpression="&lt;%getRequirementElementLabel()%>" domainClass="Requirement">
        <delete name="No delete" precondition="false">
          <variables name="element" documentation="The currently edited element."/>
          <variables name="root" documentation="The semantic element corresponding to the current table."/>
        </delete>
      </ownedColumnMappings>
      <intersection name="Trace 2" lineMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Components%20-%20Requirements']/@ownedLineMappings[name='Physical%20Component%202'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Components%20-%20Requirements']/@ownedLineMappings[name='Physical%20Component%202']/@ownedSubLines[name='Sub%20Physical%20Component%202']" columnMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Components%20-%20Requirements']/@ownedColumnMappings.0" labelExpression="X" useDomainClass="true" columnFinderExpression="feature:targetElement" lineFinderExpression="feature:sourceElement" domainClass="RequirementsTrace">
        <directEdit>
          <variables name="table" documentation="The current DTable."/>
          <variables name="line" documentation="The DLine of the current DCell."/>
          <variables name="element" documentation="The currently edited element."/>
          <variables name="lineSemantic" documentation="The semantic element corresponding to the line."/>
          <variables name="columnSemantic" documentation="The semantic element corresponding to the column."/>
          <variables name="root" documentation="The semantic element of the table."/>
          <firstModelOperation xsi:type="tool:If" conditionExpression="&lt;%$0 == &quot;&quot; &amp;&amp; $root.eAllContents().filter(&quot;RequirementsTrace&quot;)[targetElement == $columnSemantic &amp;&amp; sourceElement == $lineSemantic].nSize() > 0%>">
            <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$root.eAllContents().filter(&quot;RequirementsTrace&quot;)[targetElement == $columnSemantic &amp;&amp; sourceElement == $lineSemantic].nFirst()%>">
              <subModelOperations xsi:type="tool:RemoveElement"/>
            </subModelOperations>
          </firstModelOperation>
          <mask mask="{0}"/>
        </directEdit>
        <create name="TR2" forceRefresh="true">
          <variables name="lineSemantic" documentation="The semantic element corresponding to the line."/>
          <variables name="columnSemantic" documentation="The semantic element corresponding to the column."/>
          <variables name="root" documentation="The semantic root element of the table."/>
          <firstModelOperation xsi:type="tool:ChangeContext" browseExpression="&lt;%$lineSemantic%>">
            <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%$0 == &quot;X&quot;%>">
              <subModelOperations xsi:type="tool:CreateInstance" typeName="RequirementsTrace" referenceName="ownedTraces">
                <subModelOperations xsi:type="tool:SetValue" featureName="sourceElement" valueExpression="&lt;%$lineSemantic%>"/>
                <subModelOperations xsi:type="tool:SetValue" featureName="targetElement" valueExpression="&lt;%$columnSemantic%>"/>
              </subModelOperations>
            </subModelOperations>
          </firstModelOperation>
          <mask mask="{0}"/>
        </create>
      </intersection>
    </ownedRepresentations>
    <ownedRepresentations xsi:type="description_1:CrossTableDescription" name="Physical Functions - Logical Functions" domainClass="PhysicalArchitecture">
      <ownedLineMappings name="Physical Functions 1" domainClass="AbstractFunction" semanticCandidatesExpression="&lt;%getTableRootAbstractFunctions()%>" headerLabelExpression="feature:name">
        <ownedSubLines name="Sub Physical Functions 1" reusedSubLines="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Functions%20-%20Logical%20Functions']/@ownedLineMappings[name='Physical%20Functions%201']/@ownedSubLines[name='Sub%20Physical%20Functions%20Pkg%201'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Functions%20-%20Logical%20Functions']/@ownedLineMappings[name='Physical%20Functions%201']/@ownedSubLines[name='Sub%20Physical%20Functions%201']" reusedInMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Functions%20-%20Logical%20Functions']/@ownedLineMappings[name='FunctionPkgs'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Functions%20-%20Logical%20Functions']/@ownedLineMappings[name='Physical%20Functions%201']/@ownedSubLines[name='Sub%20Physical%20Functions%20Pkg%201'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Functions%20-%20Logical%20Functions']/@ownedLineMappings[name='Physical%20Functions%201']/@ownedSubLines[name='Sub%20Physical%20Functions%201']" domainClass="PhysicalFunction" semanticCandidatesExpression="&lt;%getOwnedAbstractFunctions()%>" headerLabelExpression="feature:name">
          <delete name="No delete" precondition="false">
            <variables name="element" documentation="The currently edited element."/>
            <variables name="root" documentation="The semantic element corresponding to the current table."/>
          </delete>
        </ownedSubLines>
        <ownedSubLines name="Sub Physical Functions Pkg 1" reusedSubLines="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Functions%20-%20Logical%20Functions']/@ownedLineMappings[name='Physical%20Functions%201']/@ownedSubLines[name='Sub%20Physical%20Functions%201'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Functions%20-%20Logical%20Functions']/@ownedLineMappings[name='Physical%20Functions%201']/@ownedSubLines[name='Sub%20Physical%20Functions%20Pkg%201']" reusedInMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Functions%20-%20Logical%20Functions']/@ownedLineMappings[name='FunctionPkgs'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Functions%20-%20Logical%20Functions']/@ownedLineMappings[name='Physical%20Functions%201']/@ownedSubLines[name='Sub%20Physical%20Functions%20Pkg%201'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Functions%20-%20Logical%20Functions']/@ownedLineMappings[name='Physical%20Functions%201']/@ownedSubLines[name='Sub%20Physical%20Functions%201']" domainClass="FunctionPkg" semanticCandidatesExpression="&lt;%getOwnedAbstractFunctionPkgs()%>" headerLabelExpression="feature:name">
          <delete name="No delete" precondition="false">
            <variables name="element" documentation="The currently edited element."/>
            <variables name="root" documentation="The semantic element corresponding to the current table."/>
          </delete>
        </ownedSubLines>
        <delete name="No delete" precondition="false">
          <variables name="element" documentation="The currently edited element."/>
          <variables name="root" documentation="The semantic element corresponding to the current table."/>
        </delete>
      </ownedLineMappings>
      <ownedLineMappings name="FunctionPkgs" reusedSubLines="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Functions%20-%20Logical%20Functions']/@ownedLineMappings[name='Physical%20Functions%201']/@ownedSubLines[name='Sub%20Physical%20Functions%20Pkg%201'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Functions%20-%20Logical%20Functions']/@ownedLineMappings[name='Physical%20Functions%201']/@ownedSubLines[name='Sub%20Physical%20Functions%201']" domainClass="FunctionPkg" semanticCandidatesExpression="&lt;%getTableRootAbstractFunctionPkgs()%>">
        <delete name="No delete" precondition="false">
          <variables name="element" documentation="The currently edited element."/>
          <variables name="root" documentation="The semantic element corresponding to the current table."/>
        </delete>
      </ownedLineMappings>
      <ownedColumnMappings name="Logical Functions 2" headerLabelExpression="feature:name" domainClass="AbstractFunction" semanticCandidatesExpression="&lt;%getRootContainer().eAllContents().filter(&quot;LogicalArchitecture&quot;).eAllContents().filter(&quot;AbstractFunction&quot;).nFirst().eAllContents().filter(&quot;AbstractFunction&quot;)%>">
        <delete name="No delete" precondition="false">
          <variables name="element" documentation="The currently edited element."/>
          <variables name="root" documentation="The semantic element corresponding to the current table."/>
        </delete>
      </ownedColumnMappings>
      <intersection name="Function Realisations 2" lineMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Functions%20-%20Logical%20Functions']/@ownedLineMappings[name='Physical%20Functions%201'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Functions%20-%20Logical%20Functions']/@ownedLineMappings[name='Physical%20Functions%201']/@ownedSubLines[name='Sub%20Physical%20Functions%201']" columnMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Functions%20-%20Logical%20Functions']/@ownedColumnMappings.0" labelExpression="X" useDomainClass="true" columnFinderExpression="&lt;%allocatedFunction.filter(&quot;AbstractFunction&quot;)%>" lineFinderExpression="&lt;%allocatingFunction.filter(&quot;AbstractFunction&quot;)%>" domainClass="FunctionRealization">
        <directEdit>
          <variables name="table" documentation="The current DTable."/>
          <variables name="line" documentation="The DLine of the current DCell."/>
          <variables name="element" documentation="The currently edited element."/>
          <variables name="lineSemantic" documentation="The semantic element corresponding to the line."/>
          <variables name="columnSemantic" documentation="The semantic element corresponding to the column."/>
          <variables name="root" documentation="The semantic element of the table."/>
          <firstModelOperation xsi:type="tool:If" conditionExpression="&lt;%$0 == &quot;&quot; &amp;&amp; $lineSemantic.ownedFunctionRealizations[allocatedFunction == $columnSemantic &amp;&amp; allocatingFunction == $lineSemantic].nSize() > 0%>">
            <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$lineSemantic.ownedFunctionRealizations[allocatedFunction == $columnSemantic &amp;&amp; allocatingFunction == $lineSemantic].nFirst()%>">
              <subModelOperations xsi:type="tool:RemoveElement"/>
            </subModelOperations>
          </firstModelOperation>
          <mask mask="{0}"/>
        </directEdit>
        <create name="FR2" precondition="&lt;%$0 == &quot;X&quot;%>" forceRefresh="true">
          <variables name="lineSemantic" documentation="The semantic element corresponding to the line."/>
          <variables name="columnSemantic" documentation="The semantic element corresponding to the column."/>
          <variables name="root" documentation="The semantic root element of the table."/>
          <firstModelOperation xsi:type="tool:ChangeContext" browseExpression="&lt;%$lineSemantic%>">
            <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%$0 == &quot;X&quot;%>">
              <subModelOperations xsi:type="tool:CreateInstance" typeName="FunctionRealization" referenceName="ownedFunctionRealizations">
                <subModelOperations xsi:type="tool:SetValue" featureName="sourceElement" valueExpression="&lt;%$lineSemantic%>"/>
                <subModelOperations xsi:type="tool:SetValue" featureName="targetElement" valueExpression="&lt;%$columnSemantic%>"/>
              </subModelOperations>
            </subModelOperations>
          </firstModelOperation>
          <mask mask="{0}"/>
        </create>
      </intersection>
    </ownedRepresentations>
    <ownedRepresentations xsi:type="description_1:CrossTableDescription" name="Physical Components - Logical Components" domainClass="PhysicalArchitecture">
      <ownedLineMappings name="Physical Components 1" domainClass="PhysicalComponent" semanticCandidatesExpression="&lt;%ownedPhysicalComponent.subPhysicalComponents%>" headerLabelExpression="feature:name">
        <ownedSubLines name="Sub Physical Component 1" reusedSubLines="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Components%20-%20Logical%20Components']/@ownedLineMappings[name='Physical%20Components%201']/@ownedSubLines[name='Sub%20Physical%20Component%201']" reusedInMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Components%20-%20Logical%20Components']/@ownedLineMappings[name='Physical%20Components%201']/@ownedSubLines[name='Sub%20Physical%20Component%201']" domainClass="PhysicalComponent" semanticCandidatesExpression="feature:subPhysicalComponents" headerLabelExpression="feature:name">
          <delete name="No delete" precondition="false">
            <variables name="element" documentation="The currently edited element."/>
            <variables name="root" documentation="The semantic element corresponding to the current table."/>
          </delete>
        </ownedSubLines>
        <delete name="No delete" precondition="false">
          <variables name="element" documentation="The currently edited element."/>
          <variables name="root" documentation="The semantic element corresponding to the current table."/>
        </delete>
      </ownedLineMappings>
      <ownedColumnMappings name="Logical Components" headerLabelExpression="feature:name" domainClass="LogicalComponent" semanticCandidatesExpression="&lt;%getRootContainer().eAllContents().filter(&quot;LogicalComponent&quot;).nFirst().eAllContents().filter(&quot;LogicalComponent&quot;)[subLogicalComponents.nSize() == 0]%>">
        <delete name="No delete" precondition="false">
          <variables name="element" documentation="The currently edited element."/>
          <variables name="root" documentation="The semantic element corresponding to the current table."/>
        </delete>
      </ownedColumnMappings>
      <intersection name="Logical Component Realisations" canEdit="" lineMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Components%20-%20Logical%20Components']/@ownedLineMappings[name='Physical%20Components%201'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Components%20-%20Logical%20Components']/@ownedLineMappings[name='Physical%20Components%201']/@ownedSubLines[name='Sub%20Physical%20Component%201']" columnMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Components%20-%20Logical%20Components']/@ownedColumnMappings.0" labelExpression="X" useDomainClass="true" columnFinderExpression="&lt;%allocatedComponent.filter(&quot;LogicalComponent&quot;)%>" lineFinderExpression="&lt;%allocatingComponent.filter(&quot;PhysicalComponent&quot;)%>" domainClass="LogicalComponentRealization">
        <directEdit>
          <variables name="table" documentation="The current DTable."/>
          <variables name="line" documentation="The DLine of the current DCell."/>
          <variables name="element" documentation="The currently edited element."/>
          <variables name="lineSemantic" documentation="The semantic element corresponding to the line."/>
          <variables name="columnSemantic" documentation="The semantic element corresponding to the column."/>
          <variables name="root" documentation="The semantic element of the table."/>
          <firstModelOperation xsi:type="tool:If" conditionExpression="&lt;%$0 == &quot;&quot; &amp;&amp; $lineSemantic.ownedLogicalComponentRealizations[allocatedComponent == $columnSemantic &amp;&amp; allocatingComponent == $lineSemantic].nSize() > 0%>">
            <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$lineSemantic.ownedLogicalComponentRealizations[allocatedComponent == $columnSemantic &amp;&amp; allocatingComponent == $lineSemantic].nFirst()%>">
              <subModelOperations xsi:type="tool:RemoveElement"/>
            </subModelOperations>
          </firstModelOperation>
          <mask mask="{0}"/>
        </directEdit>
        <create name="LCR" forceRefresh="true">
          <variables name="lineSemantic" documentation="The semantic element corresponding to the line."/>
          <variables name="columnSemantic" documentation="The semantic element corresponding to the column."/>
          <variables name="root" documentation="The semantic root element of the table."/>
          <firstModelOperation xsi:type="tool:ChangeContext" browseExpression="&lt;%$lineSemantic%>">
            <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%$0 == &quot;X&quot;%>">
              <subModelOperations xsi:type="tool:CreateInstance" typeName="LogicalComponentRealization" referenceName="ownedLogicalComponentRealizations">
                <subModelOperations xsi:type="tool:SetValue" featureName="sourceElement" valueExpression="&lt;%$lineSemantic%>"/>
                <subModelOperations xsi:type="tool:SetValue" featureName="targetElement" valueExpression="&lt;%$columnSemantic%>"/>
              </subModelOperations>
            </subModelOperations>
          </firstModelOperation>
          <mask mask="{0}"/>
        </create>
      </intersection>
    </ownedRepresentations>
    <ownedRepresentations xsi:type="description_1:CrossTableDescription" name="Physical Components - Physical Functions" label="Physical Components/Actors - Physical Functions" domainClass="PhysicalArchitecture">
      <ownedLineMappings name="Physical Components 3" domainClass="Component" semanticCandidatesExpression="&lt;%ownedPhysicalComponent.subPhysicalComponents+ownedPhysicalActorPkg.getAllphysicalActors()%>" headerLabelExpression="feature:name">
        <ownedSubLines name="Sub Physical Component 3" reusedSubLines="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Components%20-%20Physical%20Functions']/@ownedLineMappings[name='Physical%20Components%203']/@ownedSubLines[name='Sub%20Physical%20Component%203']" reusedInMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Components%20-%20Physical%20Functions']/@ownedLineMappings[name='Physical%20Components%203']/@ownedSubLines[name='Sub%20Physical%20Component%203']" domainClass="PhysicalComponent" semanticCandidatesExpression="feature:subPhysicalComponents" headerLabelExpression="feature:name">
          <delete name="No delete" precondition="false">
            <variables name="element" documentation="The currently edited element."/>
            <variables name="root" documentation="The semantic element corresponding to the current table."/>
          </delete>
        </ownedSubLines>
        <delete name="No delete" precondition="false">
          <variables name="element" documentation="The currently edited element."/>
          <variables name="root" documentation="The semantic element corresponding to the current table."/>
        </delete>
      </ownedLineMappings>
      <ownedColumnMappings name="Physical Functions" headerLabelExpression="feature:name" domainClass="AbstractFunction" semanticCandidatesExpression="&lt;%getAllLeafAbstractFunctions()%>">
        <delete name="No delete" precondition="false">
          <variables name="element" documentation="The currently edited element."/>
          <variables name="root" documentation="The semantic element corresponding to the current table."/>
        </delete>
      </ownedColumnMappings>
      <intersection name="Component Functional Allocations" lineMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Components%20-%20Physical%20Functions']/@ownedLineMappings[name='Physical%20Components%203'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Components%20-%20Physical%20Functions']/@ownedLineMappings[name='Physical%20Components%203']/@ownedSubLines[name='Sub%20Physical%20Component%203']" columnMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Components%20-%20Physical%20Functions']/@ownedColumnMappings.0" labelExpression="X" useDomainClass="true" columnFinderExpression="&lt;%function.filter(&quot;AbstractFunction&quot;)%>" lineFinderExpression="feature:block" domainClass="ComponentFunctionalAllocation">
        <directEdit>
          <variables name="table" documentation="The current DTable."/>
          <variables name="line" documentation="The DLine of the current DCell."/>
          <variables name="element" documentation="The currently edited element."/>
          <variables name="lineSemantic" documentation="The semantic element corresponding to the line."/>
          <variables name="columnSemantic" documentation="The semantic element corresponding to the column."/>
          <variables name="root" documentation="The semantic element of the table."/>
          <firstModelOperation xsi:type="tool:If" conditionExpression="&lt;%$0 == &quot;&quot; &amp;&amp; $lineSemantic.ownedFunctionalAllocation[function == $columnSemantic &amp;&amp; block == $lineSemantic].nSize() > 0%>">
            <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$lineSemantic.ownedFunctionalAllocation[function == $columnSemantic &amp;&amp; block == $lineSemantic].nFirst()%>">
              <subModelOperations xsi:type="tool:RemoveElement"/>
            </subModelOperations>
          </firstModelOperation>
          <mask mask="{0}"/>
        </directEdit>
        <create name="CFA" precondition="&lt;%$0 == &quot;X&quot;%>" forceRefresh="true">
          <variables name="lineSemantic" documentation="The semantic element corresponding to the line."/>
          <variables name="columnSemantic" documentation="The semantic element corresponding to the column."/>
          <variables name="root" documentation="The semantic root element of the table."/>
          <firstModelOperation xsi:type="tool:ChangeContext" browseExpression="&lt;%$lineSemantic%>">
            <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%$0 == &quot;X&quot; &amp;&amp;  $lineSemantic.getAvailableFunctionalAllocation().nContains($columnSemantic)%>">
              <subModelOperations xsi:type="tool:CreateInstance" typeName="ComponentFunctionalAllocation" referenceName="ownedFunctionalAllocation">
                <subModelOperations xsi:type="tool:SetValue" featureName="sourceElement" valueExpression="&lt;%$lineSemantic%>"/>
                <subModelOperations xsi:type="tool:SetValue" featureName="targetElement" valueExpression="&lt;%$columnSemantic%>"/>
              </subModelOperations>
            </subModelOperations>
          </firstModelOperation>
          <mask mask="{0}"/>
        </create>
      </intersection>
    </ownedRepresentations>
    <ownedRepresentations xsi:type="description_1:CrossTableDescription" name="Physical Interface - Logical Interface" label="Physical Interfaces - Logical Interfaces" domainClass="PhysicalArchitecture">
      <ownedLineMappings name="PILI Physical Interface Line" domainClass="Interface" semanticCandidatesExpression="&lt;%eAllContents().filter(&quot;Interface&quot;)%>">
        <delete name="No delete" precondition="false">
          <variables name="element" documentation="The currently edited element."/>
          <variables name="root" documentation="The semantic element corresponding to the current table."/>
        </delete>
      </ownedLineMappings>
      <ownedColumnMappings name="PILI Logical Interface column" initialWidth="50" domainClass="Interface" semanticCandidatesExpression="&lt;%precedingSibling.filter(&quot;BlockArchitecture&quot;).nLast().eAllContents().filter(&quot;Interface&quot;)%>">
        <delete name="No delete" precondition="false">
          <variables name="element" documentation="The currently edited element."/>
          <variables name="root" documentation="The semantic element corresponding to the current table."/>
        </delete>
      </ownedColumnMappings>
      <intersection name="PILI Interface Realisation" lineMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Interface%20-%20Logical%20Interface']/@ownedLineMappings[name='PILI%20Physical%20Interface%20Line']" columnMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Interface%20-%20Logical%20Interface']/@ownedColumnMappings.0" labelExpression="X" useDomainClass="true" columnFinderExpression="feature:targetElement" lineFinderExpression="feature:sourceElement" domainClass="LogicalInterfaceRealization">
        <directEdit>
          <variables name="table" documentation="The current DTable."/>
          <variables name="line" documentation="The DLine of the current DCell."/>
          <variables name="element" documentation="The currently edited element."/>
          <variables name="lineSemantic" documentation="The semantic element corresponding to the line."/>
          <variables name="columnSemantic" documentation="The semantic element corresponding to the column."/>
          <variables name="root" documentation="The semantic element of the table."/>
          <firstModelOperation xsi:type="tool:If" conditionExpression="&lt;%$0 == &quot;&quot; &amp;&amp; $root.eAllContents().filter(&quot;LogicalInterfaceRealization&quot;)[targetElement == $columnSemantic &amp;&amp; sourceElement == $lineSemantic].nSize() > 0%>">
            <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$root.eAllContents().filter(&quot;LogicalInterfaceRealization&quot;)[targetElement == $columnSemantic &amp;&amp; sourceElement == $lineSemantic].nFirst()%>">
              <subModelOperations xsi:type="tool:RemoveElement"/>
            </subModelOperations>
          </firstModelOperation>
          <mask mask="{0}"/>
        </directEdit>
        <create name="Context Interface Realisation" forceRefresh="true">
          <variables name="lineSemantic" documentation="The semantic element corresponding to the line."/>
          <variables name="columnSemantic" documentation="The semantic element corresponding to the column."/>
          <variables name="root" documentation="The semantic root element of the table."/>
          <firstModelOperation xsi:type="tool:ChangeContext" browseExpression="&lt;%$lineSemantic%>">
            <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%$0 == &quot;X&quot;%>">
              <subModelOperations xsi:type="tool:CreateInstance" typeName="LogicalInterfaceRealization" referenceName="ownedInterfaceAllocations">
                <subModelOperations xsi:type="tool:SetValue" featureName="sourceElement" valueExpression="&lt;%$lineSemantic%>"/>
                <subModelOperations xsi:type="tool:SetValue" featureName="targetElement" valueExpression="&lt;%$columnSemantic%>"/>
              </subModelOperations>
            </subModelOperations>
          </firstModelOperation>
          <mask mask="{0}"/>
        </create>
      </intersection>
    </ownedRepresentations>
    <ownedRepresentations xsi:type="description_2:DiagramDescription" name="Physical Function Breakdown" titleExpression="[PFBD] &lt;%current.name%>" domainClass="PhysicalFunction" preconditionExpression="">
      <dropDescriptions href="#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Function%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20Constraints%20From%20Project%20Explorer']"/>
      <dropDescriptions href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20PV%20From%20Project%20Explorer']"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/LogicalArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.common.data.activity.gen/model/Activity.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.common.data.behavior.gen/model/Behavior.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CompositeStructure.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/FunctionalAnalysis.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Interaction.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CapellaCommon.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CapellaCore.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.common.data.core.gen/model/ModellingCore.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Requirement.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/PhysicalArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#//communication"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#//datatype"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#//datavalue"/>
      <metamodel href="http://www.eclipse.org/emf/2002/Ecore#/"/>
      <filters xsi:type="filter:CompositeFilterDescription" name="Hide Control Nodes">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Function%20Breakdown']/@defaultLayer/@nodeMappings[name='PFB_PhysicalFunction']" semanticConditionExpression="&lt;%!isControlNode()%>"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="Hide Property Values">
        <filters xsi:type="filter:MappingFilter">
          <mappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV']"/>
          <mappings xsi:type="description_2:ContainerMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG']"/>
        </filters>
      </filters>
      <layout xsi:type="description_2:OrderedTreeLayout" childrenExpression="feature:subFunctions" nodeMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Function%20Breakdown']/@defaultLayer/@nodeMappings[name='PFB_PhysicalFunction']"/>
      <defaultLayer name="default">
        <nodeMappings name="PFB_PhysicalFunction" detailDescriptions="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Physical%20Data%20Flow%20Blank'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Function%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='Physical%20Function%20Breakdown']" deletionDescription="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Function%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20SF']" labelDirectEdit="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Function%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='rename%20Physical%20Function']" semanticCandidatesExpression="service:getFBDSemanticFunctions()" domainClass="PhysicalFunction">
          <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="7" labelPosition="node" resizeKind="NSEW">
            <borderColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Border_Green']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <color xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Green']"/>
          </style>
          <conditionnalStyles predicateExpression="&lt;%current == $container%>">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="7" labelPosition="node" resizeKind="NSEW">
              <borderColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Border_Green']"/>
              <labelFormat>bold</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <color xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Green']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="service:isControlNode()">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="7" labelPosition="node" resizeKind="NSEW">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <color xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xBD_ControlNode']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="service:hasAllocationBlocks()">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="7" labelPosition="node" resizeKind="NSEW">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_blue']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <color xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="service:isNotLeafAndisAllLeavesFunctionActorAllocated()">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="7" labelPosition="node" resizeKind="NSEW">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_blue']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <color xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue']"/>
            </style>
          </conditionnalStyles>
        </nodeMappings>
        <edgeMappings name="PFB_PhysicalFunction_subFunctions" deletionDescription="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Function%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20subFunctionLink']" semanticCandidatesExpression="&lt;%current.eAllContents%>" sourceMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Function%20Breakdown']/@defaultLayer/@nodeMappings[name='PFB_PhysicalFunction']" targetMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Function%20Breakdown']/@defaultLayer/@nodeMappings[name='PFB_PhysicalFunction']" targetFinderExpression="service:getFBDParentFunction()" reconnections="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Function%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='changeContainer']">
          <style routingStyle="tree" foldingStyle="TARGET">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
            <centerLabelStyleDescription>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <reusedMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_ContrainedElements']"/>
        <reusedMappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']"/>
        <reusedMappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV']"/>
        <reusedMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_PVconnector']"/>
        <reusedMappings xsi:type="description_2:ContainerMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG']"/>
        <reusedMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_PVGconnector']"/>
        <toolSections name="Functions">
          <ownedTools xsi:type="tool_1:NodeCreationDescription" documentation="Creates a new Physical Function in the target Function" name="Physical Function" precondition="&lt;%$containerView.isValidCreationDFFunction()%>" forceRefresh="true" elementsToSelect="&lt;%selectOnlyCreatedView()%>" nodeMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Function%20Breakdown']/@defaultLayer/@nodeMappings[name='PFB_PhysicalFunction']" extraMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Function%20Breakdown']/@defaultLayer/@nodeMappings[name='PFB_PhysicalFunction']">
            <variable name="container">
              <subVariables xsi:type="tool:AcceleoVariable" name="tool" computationExpression="Physical Function"/>
            </variable>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$container.createFunction()%>">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="CreateView" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.CreateViewAction">
                  <parameters name="context" value="&lt;% $container %>"/>
                  <parameters name="scope" value="&lt;% current %>"/>
                  <parameters name="containerViewExpression" value="&lt;%$containerView.getDiagramContainer()%>"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolGroup" name="ControlNodes">
            <tools xsi:type="tool_1:NodeCreationDescription" documentation="Creates a new Duplicate Function in the target Function" name="Duplicate" precondition="&lt;%$containerView.isValidCreationDFControlNode()%>" forceRefresh="true" elementsToSelect="&lt;%selectOnlyCreatedView()%>" nodeMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Function%20Breakdown']/@defaultLayer/@nodeMappings[name='PFB_PhysicalFunction']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FunctionKind_Duplicate.gif" extraMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Function%20Breakdown']/@defaultLayer/@nodeMappings[name='PFB_PhysicalFunction']">
              <variable name="container">
                <subVariables xsi:type="tool:AcceleoVariable" name="tool" computationExpression="Fork"/>
              </variable>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$container.createDuplicateFunction()%>">
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="CreateView" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.CreateViewAction">
                    <parameters name="context" value="&lt;% $container %>"/>
                    <parameters name="scope" value="&lt;% current %>"/>
                    <parameters name="containerViewExpression" value="&lt;%$containerView.getDiagramContainer()%>"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_1:NodeCreationDescription" documentation="Creates a new Gather Function in the target Function" name="Gather" precondition="&lt;%$containerView.isValidCreationDFControlNode()%>" forceRefresh="true" elementsToSelect="&lt;%selectOnlyCreatedView()%>" nodeMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Function%20Breakdown']/@defaultLayer/@nodeMappings[name='PFB_PhysicalFunction']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FunctionKind_Gather.gif" extraMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Function%20Breakdown']/@defaultLayer/@nodeMappings[name='PFB_PhysicalFunction']">
              <variable name="container">
                <subVariables xsi:type="tool:AcceleoVariable" name="tool" computationExpression="Fork"/>
              </variable>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$container.createGatherFunction()%>">
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="CreateView" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.CreateViewAction">
                    <parameters name="context" value="&lt;% $container %>"/>
                    <parameters name="scope" value="&lt;% current %>"/>
                    <parameters name="containerViewExpression" value="&lt;%$containerView.getDiagramContainer()%>"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_1:NodeCreationDescription" documentation="Creates a new Route Function in the target Function" name="Route" precondition="&lt;%$containerView.isValidCreationDFControlNode()%>" forceRefresh="true" elementsToSelect="&lt;%selectOnlyCreatedView()%>" nodeMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Function%20Breakdown']/@defaultLayer/@nodeMappings[name='PFB_PhysicalFunction']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FunctionKind_Route.gif" extraMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Function%20Breakdown']/@defaultLayer/@nodeMappings[name='PFB_PhysicalFunction']">
              <variable name="container">
                <subVariables xsi:type="tool:AcceleoVariable" name="tool" computationExpression="Fork"/>
              </variable>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$container.createRouteFunction()%>">
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="CreateView" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.CreateViewAction">
                    <parameters name="context" value="&lt;% $container %>"/>
                    <parameters name="scope" value="&lt;% current %>"/>
                    <parameters name="containerViewExpression" value="&lt;%$containerView.getDiagramContainer()%>"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_1:NodeCreationDescription" documentation="Creates a new Select Function in the target Function" name="Select" precondition="&lt;%$containerView.isValidCreationDFControlNode()%>" forceRefresh="true" elementsToSelect="&lt;%selectOnlyCreatedView()%>" nodeMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Function%20Breakdown']/@defaultLayer/@nodeMappings[name='PFB_PhysicalFunction']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FunctionKind_Select.gif" extraMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Function%20Breakdown']/@defaultLayer/@nodeMappings[name='PFB_PhysicalFunction']">
              <variable name="container">
                <subVariables xsi:type="tool:AcceleoVariable" name="tool" computationExpression="Fork"/>
              </variable>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$container.createSelectFunction()%>">
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="CreateView" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.CreateViewAction">
                    <parameters name="context" value="&lt;% $container %>"/>
                    <parameters name="scope" value="&lt;% current %>"/>
                    <parameters name="containerViewExpression" value="&lt;%$containerView.getDiagramContainer()%>"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_1:NodeCreationDescription" documentation="Creates a new Split Function in the target Function" name="Split" precondition="&lt;%$containerView.isValidCreationDFControlNode()%>" forceRefresh="true" elementsToSelect="&lt;%selectOnlyCreatedView()%>" nodeMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Function%20Breakdown']/@defaultLayer/@nodeMappings[name='PFB_PhysicalFunction']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FunctionKind_Split.gif" extraMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Function%20Breakdown']/@defaultLayer/@nodeMappings[name='PFB_PhysicalFunction']">
              <variable name="container">
                <subVariables xsi:type="tool:AcceleoVariable" name="tool" computationExpression="Fork"/>
              </variable>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$container.createSplitFunction()%>">
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="CreateView" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.CreateViewAction">
                    <parameters name="context" value="&lt;% $container %>"/>
                    <parameters name="scope" value="&lt;% current %>"/>
                    <parameters name="containerViewExpression" value="&lt;%$containerView.getDiagramContainer()%>"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool_1:EdgeCreationDescription" documentation="Sets the target Function as the new container of the source Function" name="Contained In" precondition="&lt;%$preSource.isValidDndDFBAbstractFunction($preTargetView)%>" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Function%20Breakdown']/@defaultLayer/@edgeMappings[name='PFB_PhysicalFunction_subFunctions']" iconPath="/org.polarsys.capella.core.sirius.analysis/description/images/containedIn.png">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$source.dndDFBAbstractFunction($source.eContainer, $target)%>"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ReconnectEdgeDescription" name="changeContainer" precondition="&lt;%$element.isValidDndDFBAbstractFunction($targetView)%>" forceRefresh="true">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$element.dndDFBAbstractFunction($source, $target)%>"/>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool_1:DirectEditLabel" name="rename Physical Function" inputLabelExpression="feature:name">
            <mask mask="{0}"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%current%>">
                <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="&lt;%$0%>"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:DiagramCreationDescription" name="Physical Function Breakdown" precondition="&lt;%isInLib() &amp;&amp; current.filter(&quot;PhysicalFunction&quot;).nSize() > 0%>" titleExpression="[PFBD] &lt;%current.name%>" diagramDescription="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Function%20Breakdown']">
            <initialOperation/>
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
          </ownedTools>
          <ownedTools xsi:type="tool_1:DeleteElementDescription" name="delete subFunctionLink" forceRefresh="true">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView.sourceNode.target.dndDFBAbstractFunction($elementView.sourceNode.target.eContainer, $containerView.target)%>"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:DeleteElementDescription" name="delete SF" precondition="&lt;%!($containerView[!filter(&quot;DDiagram&quot;)].eContainer(&quot;DDiagram&quot;).target + $containerView[filter(&quot;DDiagram&quot;)].target.ancestor + $containerView[filter(&quot;DDiagram&quot;)].target + $containerView[!filter(&quot;DDiagram&quot;)].eContainer(&quot;DDiagram&quot;).target.ancestor).nContains($element)%>" forceRefresh="true">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $element %>">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="CapellaDeleteExternalAction" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.delete.CapellaDeleteExternalAction"/>
              </firstModelOperations>
            </initialOperation>
            <hook id="org.polarsys.capella.core.sirius.analysis.delete.CapellaDeleteActionHook"/>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ContainerDropDescription" name="D&amp;D Constraints From Project Explorer" precondition="&lt;% $element.isA(&quot;Constraint&quot;) &amp;&amp; $element.canBeDropped($newViewContainer) %>" forceRefresh="true" dragSource="PROJECT_EXPLORER">
            <mappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']"/>
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$element%>"/>
            </initialOperation>
          </ownedTools>
        </toolSections>
        <toolSections name="Common">
          <ownedTools xsi:type="tool_1:NodeCreationDescription" documentation="Create a new Constraint." name="Constraint" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Constraint.gif">
            <nodeMappings href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']"/>
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$container%>">
                <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% $containerView.filter(&quot;DDiagram&quot;).nSize() == 1 %>">
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="Constraint" referenceName="ownedConstraints">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%creationService%>"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:EdgeCreationDescription" documentation="Allocate a Source Constraint to an available Target Capella Element." name="ConstraintElement" precondition="&lt;%!( $preSource.constrainedElements.nContains($preTarget))%>" forceRefresh="true" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ClassCarries.gif">
            <edgeMappings href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_ContrainedElements']"/>
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:If" conditionExpression="&lt;%$source.filter(&quot;Constraint&quot;).nSize() == 1%>">
                <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% $source.constrainedElements.nSize() == 0%>">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$source%>">
                    <subModelOperations xsi:type="tool:SetValue" featureName="constrainedElements" valueExpression="&lt;%$target%>"/>
                    <subModelOperations xsi:type="tool:MoveElement" newContainerExpression="&lt;%$target%>" featureName="ownedConstraints"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% $source.constrainedElements.nSize() != 0%>">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$source%>">
                    <subModelOperations xsi:type="tool:SetValue" featureName="constrainedElements" valueExpression="&lt;%$target%>"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolDescription" documentation="Creates or deletes graphical objects corresponding to existing Constraints. Removing a Constraint graphical object does not delete this Constraint from the model. This tool does not modify the semantic model." name="Show/Hide Constraints" label="Constraints" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool:AcceleoVariable" name="constraintsInDiagram" computationExpression="&lt;% getExistingConstraintsFromDiagram($elementView.getDiagramContainer())%>"/>
              <subVariables xsi:type="tool:AcceleoVariable" name="diagram" computationExpression="&lt;% $elementView.eContainer(&quot;DDiagram&quot;) %>"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView%>">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectedConstraints" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectLinksFromTransferWizard">
                  <parameters name="context" value="&lt;% $elementView%>"/>
                  <parameters name="scope" value="&lt;% getConstraintToInsertInDiagram() - $constraintsInDiagram%>"/>
                  <parameters name="initialSelection" value="&lt;%$constraintsInDiagram%>"/>
                  <parameters name="resultVariable" value="selectedConstraints"/>
                  <parameters name="wizardMessage" value="Select Constraints to show."/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%($selectedConstraints != &quot;WIZARD_CANCELED&quot;)%>">
                  <subModelOperations xsi:type="tool:For" expression="&lt;%$selectedConstraints%>">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%createConstraintWithConstaintedElementInDiagram($i,$diagram,$constraintsInDiagram,true)%>"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:For" expression="&lt;%$constraintsInDiagram%>">
                    <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%! $selectedConstraints.nContains($i)%>">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView.getDiagramContainer().getNodesAndNodeListElements()[target == $i]%>">
                        <subModelOperations xsi:type="tool:DeleteView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView.getDiagramContainer().forceRefresh%>"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <reusedTools xsi:type="tool_1:ToolGroup" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='PV']"/>
          <reusedTools xsi:type="tool_1:ContainerDropDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20PV%20From%20Project%20Explorer']"/>
        </toolSections>
        <toolSections name="Select All Common Tools">
          <reusedTools xsi:type="tool:PopupMenu" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.2/@ownedTools[name='selectMenu']"/>
        </toolSections>
      </defaultLayer>
    </ownedRepresentations>
    <ownedRepresentations xsi:type="description_2:DiagramDescription" name="Physical Data Flow Blank" titleExpression="[PDFB] &lt;%current.name%>" domainClass="AbstractFunctionalChainContainer" preconditionExpression="&lt;%isA(&quot;PhysicalFunction&quot;) || (isA(&quot;CapabilityRealization&quot;) &amp;&amp; eContainer(&quot;BlockArchitecture&quot;).isA(&quot;PhysicalArchitecture&quot;))%>">
      <dropDescriptions href="#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='DnD%20DF%20AbstractFunction']"/>
      <dropDescriptions href="#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20Constraints%20From%20Project%20Explorer']"/>
      <dropDescriptions href="#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20Function%20From%20Project%20Explorer']"/>
      <dropDescriptions href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20PV%20From%20Project%20Explorer']"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.common.data.activity.gen/model/Activity.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.common.data.behavior.gen/model/Behavior.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CompositeStructure.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/FunctionalAnalysis.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Interaction.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/LogicalArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CapellaCommon.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CapellaCore.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.common.data.core.gen/model/ModellingCore.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Requirement.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#//communication"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#//datatype"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#//datavalue"/>
      <metamodel href="http://www.eclipse.org/emf/2002/Ecore#/"/>
      <filters xsi:type="filter:CompositeFilterDescription" name="Collapse Ports">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE" mappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='PDFB_Function']/@borderedNodeMappings[name='PDFB_Pin'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='PDFB_Function']/@borderedNodeMappings[name='PDFB_InputPin%20by%20Categorie'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='PDFB_Function']/@borderedNodeMappings[name='PDFB_OutputPin%20by%20Categorie']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="Hide Functional Exchanges">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@edgeMappings[name='PDFB_Exchange'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@edgeMappings[name='PDFB_Exchange%20by%20Categorie']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="Hide Function Ports without Exchanges">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='PDFB_Function']/@borderedNodeMappings[name='PDFB_Pin']" semanticConditionExpression="" viewConditionExpression="&lt;%isFunctionPortWithoutExchanges(eContainer(&quot;DDiagram&quot;))%>"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="Hide Exchange Categories">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@edgeMappings[name='PDFB_Exchange%20by%20Categorie']" semanticConditionExpression=""/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="Show ExchangeItems" label="Show [EI1, EI2]">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE" semanticConditionExpression="">
          <mappings xsi:type="description_2:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Data%20Flow%20Blank']/@defaultLayer/@nodeMappings[name='SDFB_Dummy']"/>
        </filters>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="Show ExchangeItems parameters" label="Show EI1(param1:type1, param2:type2), EI2(param3:type3)">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE">
          <mappings xsi:type="description_3:InstanceRoleMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='hideSequenceLabelDF']"/>
        </filters>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="Show Functional Exchanges [ExchangeItems]" label="Show FE [EI1, EI2]">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE">
          <mappings xsi:type="description_3:InstanceRoleMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='hideSequenceLabelDF']"/>
        </filters>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="Show Functional Exchanges (Parameters)" label="Show FE (type1, type2, type3)">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE">
          <mappings xsi:type="description_3:InstanceRoleMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='hideSequenceLabelDF']"/>
        </filters>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="Show Functional Exchanges [ExchangeItems(Parameters)]" label="Show FE [EI1(param1:type1, param2:type2), EI2(param3:type3)]">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE">
          <mappings xsi:type="description_3:InstanceRoleMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='hideSequenceLabelDF']"/>
        </filters>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="Hide Functional Exchanges names">
        <filters xsi:type="filter:MappingFilter">
          <mappings xsi:type="description_2:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='CA%20Dummy']"/>
        </filters>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="Hide Property Values">
        <filters xsi:type="filter:MappingFilter">
          <mappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV']"/>
          <mappings xsi:type="description_2:ContainerMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG']"/>
        </filters>
      </filters>
      <layout xsi:type="description_2:CompositeLayout" direction="LeftToRight"/>
      <defaultLayer name="default">
        <nodeMappings name="PDFB_Node" preconditionExpression="false" labelDirectEdit="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='node']" semanticCandidatesExpression="" createElements="false" documentation="pr&#xe9;condition : &lt;%(filter(&quot;ForkFunction&quot;)+filter(&quot;JoinFunction&quot;)+filter(&quot;DecisionFunction&quot;)).nSize > 0 &amp;&amp; eContainer(&quot;PhysicalFunctionPkg&quot;).eAllContents().filter(&quot;FunctionalExchange&quot;)[(source == current(1) &amp;&amp; $viewpoint.target.eAllContents().nContains(target)) || (target == current(1) &amp;&amp; $viewpoint.target.eAllContents().nContains(source))].nSize() > 0%>" domainClass="AbstractFunction">
          <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="" resizeKind="NSEW">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
          </style>
          <conditionnalStyles predicateExpression="&lt;%(filter(&quot;ForkFunction&quot;) + filter(&quot;JoinFunction&quot;)).nSize() > 0%>">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" resizeKind="NSEW" width="1" height="7">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="&lt;%filter(&quot;DecisionFunction&quot;).nSize() > 0%>">
            <style xsi:type="style:LozengeNodeDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="1" resizeKind="NSEW" widthComputationExpression="5" heightComputationExpression="5">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_gray']"/>
            </style>
          </conditionnalStyles>
        </nodeMappings>
        <nodeMappings name="PDFB_FunctionalChainEnd" deletionDescription="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20SF']" labelDirectEdit="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='rename%20name']" semanticCandidatesExpression="" createElements="false" domainClass="FunctionalChain">
          <detailDescriptions xsi:type="tool_1:DiagramCreationDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@toolSections.0/@ownedTools[name='Functional%20Chain%20Description']"/>
          <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="&lt;%getFunctionalChainLabel($diagram) %>" sizeComputationExpression="1" resizeKind="NSEW" width="2" height="2">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
          </style>
        </nodeMappings>
        <nodeMappings name="PDFB_Dummy" semanticCandidatesExpression="ocl:Set {}" domainClass="EObject"/>
        <edgeMappings name="PDFB_Exchange" preconditionExpression="service:isValidDFFunctionalExchangeEdge(sourceView, targetView)" deletionDescription="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20SF']" labelDirectEdit="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='rename%20exchanges']" semanticCandidatesExpression="service:diagram.getDFFunctionalExchangeSemanticCandidates" semanticElements="var:self" sourceMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='PDFB_Function']/@borderedNodeMappings[name='PDFB_Pin'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@nodeMappings[name='PDFB_Node']" targetMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='PDFB_Function']/@borderedNodeMappings[name='PDFB_Pin'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@nodeMappings[name='PDFB_Node']" targetFinderExpression="feature:target" sourceFinderExpression="feature:source" domainClass="FunctionalExchange" useDomainElement="true" reconnections="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='PDFB%20Reconnect%20Function%20Exchanges']">
          <style targetArrow="InputFillClosedArrow" centeredSourceMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='PDFB_Function']/@borderedNodeMappings[name='PDFB_Pin']" centeredTargetMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='PDFB_Function']/@borderedNodeMappings[name='PDFB_Pin']">
            <strokeColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Border_Green']"/>
            <centerLabelStyleDescription labelExpression="&lt;%getFunctionalExchangeLabel($diagram)%>">
              <labelColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Border_Green']"/>
            </centerLabelStyleDescription>
          </style>
          <conditionnalStyles predicateExpression="&lt;%$diagram.activatedFilters[name==&quot;Collapse Ports&quot;].nSize()==0%>">
            <style targetArrow="NoDecoration" centeredSourceMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='PDFB_Function']/@borderedNodeMappings[name='PDFB_Pin']" centeredTargetMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='PDFB_Function']/@borderedNodeMappings[name='PDFB_Pin']">
              <strokeColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Border_Green']"/>
              <centerLabelStyleDescription labelExpression="&lt;%getFunctionalExchangeLabel($diagram)%>">
                <labelColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Border_Green']"/>
              </centerLabelStyleDescription>
            </style>
          </conditionnalStyles>
        </edgeMappings>
        <edgeMappings name="PDFB_Exchange by Categorie" deletionDescription="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20category']" labelDirectEdit="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='rename%20exchanges']" semanticCandidatesExpression="" createElements="false" semanticElements="service:getEdgeExchangeCategorySemanticElements(view)" sourceMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='PDFB_Function']/@borderedNodeMappings[name='PDFB_OutputPin%20by%20Categorie']" targetMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='PDFB_Function']/@borderedNodeMappings[name='PDFB_InputPin%20by%20Categorie']" targetFinderExpression="&lt;%current%>" sourceFinderExpression="&lt;%current%>" targetExpression="var:self" domainClass="ExchangeCategory" useDomainElement="true">
          <style targetArrow="InputFillClosedArrow" sizeComputationExpression="2" endsCentering="Both">
            <strokeColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Border_Green']"/>
            <centerLabelStyleDescription labelExpression="service:capellaLabelService(view, diagram)">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
          <conditionnalStyles predicateExpression="&lt;%$diagram.activatedFilters[name==&quot;Collapse Ports&quot;].nSize()==0%>">
            <style targetArrow="NoDecoration" sizeComputationExpression="2" endsCentering="Both">
              <strokeColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Border_Green']"/>
              <centerLabelStyleDescription labelExpression="service:capellaLabelService(view, diagram)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </centerLabelStyleDescription>
            </style>
          </conditionnalStyles>
        </edgeMappings>
        <edgeMappings name="PDFB_InternLink" preconditionExpression="service:isValidDFFunctionalChainInternalLinkEdge(sourceView, targetView)" createElements="false" sourceMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='PDFB_Function']/@borderedNodeMappings[name='PDFB_Pin']" targetMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='PDFB_Function']/@borderedNodeMappings[name='PDFB_Pin']" targetFinderExpression="service:getFunctionalChainTargets()" sourceFinderExpression="service:getFunctionalChainSources()" domainClass="FunctionalChain" useDomainElement="true">
          <style targetArrow="InputFillClosedArrow" endsCentering="Both">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_red']"/>
            <centerLabelStyleDescription showIcon="false">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <containerMappings name="PDFB_Function" detailDescriptions="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Physical%20Data%20Flow%20Blank'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Function%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='Physical%20Function%20Breakdown']" deletionDescription="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20SF']" labelDirectEdit="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='rename%20name']" semanticCandidatesExpression="" createElements="false" domainClass="PhysicalFunction" dropDescriptions="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='DnD%20DF%20FunctionPort'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='DnD%20DF%20AbstractFunction'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20Function%20From%20Project%20Explorer']" reusedNodeMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@nodeMappings[name='PDFB_Node']" reusedContainerMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='PDFB_Function']">
          <borderedNodeMappings name="PDFB_Pin" deletionDescription="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20SF']" labelDirectEdit="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='rename%20name']" semanticCandidatesExpression="service:getAvailablePins(viewpoint, containerView)" domainClass="ActivityNode">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" hideLabelByDefault="true" sizeComputationExpression="1" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/FunctionInputPort.png">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
            <conditionnalStyles predicateExpression="service:isAFunctionOutputPort()">
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" hideLabelByDefault="true" sizeComputationExpression="1" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/FunctionOutputPort.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </conditionnalStyles>
          </borderedNodeMappings>
          <borderedNodeMappings name="PDFB_InputPin by Categorie" deletionDescription="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20category']" labelDirectEdit="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='rename%20name']" semanticCandidatesExpression="" createElements="false" semanticElements="service:getInputPinCategorySemanticElements(view)" domainClass="ExchangeCategory">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" hideLabelByDefault="true" sizeComputationExpression="1" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/CategoryInput.png">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </borderedNodeMappings>
          <borderedNodeMappings name="PDFB_OutputPin by Categorie" deletionDescription="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20category']" labelDirectEdit="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='rename%20name']" semanticCandidatesExpression="" createElements="false" semanticElements="service:getOutputPinCategorySemanticElements(view)" domainClass="ExchangeCategory">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" hideLabelByDefault="true" sizeComputationExpression="1" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/CategoryOutput.png">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </borderedNodeMappings>
          <style xsi:type="style:FlatContainerStyleDescription" arcWidth="18" arcHeight="18" borderSizeComputationExpression="1" labelExpression="&lt;%$view.computeFunctionLabel%>" roundedCorner="true" backgroundStyle="GradientTopToBottom">
            <borderColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xDFB_Function_Border_Green']"/>
            <labelColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xDFB_Function_Green_Label']"/>
            <backgroundColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xDFB_Function_Green_min']"/>
            <foregroundColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xDFB_Function_Green']"/>
          </style>
          <conditionnalStyles predicateExpression="service:isDuplicateFunction()">
            <style xsi:type="style:WorkspaceImageDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression="&lt;%$view.computeFunctionLabel%>" sizeComputationExpression="5" resizeKind="NSEW" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/FunctionKind_Duplicate.png">
              <borderColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xDFB_Function_Border_Green']"/>
              <labelColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xDFB_Function_Green_Label']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="service:isGatherFunction()">
            <style xsi:type="style:WorkspaceImageDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression="&lt;%$view.computeFunctionLabel%>" sizeComputationExpression="5" resizeKind="NSEW" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/FunctionKind_Gather.png">
              <borderColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xDFB_Function_Border_Green']"/>
              <labelColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xDFB_Function_Green_Label']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="service:isRouteFunction()">
            <style xsi:type="style:WorkspaceImageDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression="&lt;%$view.computeFunctionLabel%>" sizeComputationExpression="5" resizeKind="NSEW" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/FunctionKind_Route.png">
              <borderColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xDFB_Function_Border_Green']"/>
              <labelColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xDFB_Function_Green_Label']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="service:isSelectFunction()">
            <style xsi:type="style:WorkspaceImageDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression="&lt;%$view.computeFunctionLabel%>" sizeComputationExpression="5" resizeKind="NSEW" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/FunctionKind_Select.png">
              <borderColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xDFB_Function_Border_Green']"/>
              <labelColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xDFB_Function_Green_Label']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="service:isSplitFunction()">
            <style xsi:type="style:WorkspaceImageDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression="&lt;%$view.computeFunctionLabel%>" sizeComputationExpression="5" resizeKind="NSEW" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/FunctionKind_Split.png">
              <borderColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xDFB_Function_Border_Green']"/>
              <labelColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xDFB_Function_Green_Label']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="service:hasAllocationBlocks()">
            <style xsi:type="style:FlatContainerStyleDescription" arcWidth="18" arcHeight="18" borderSizeComputationExpression="1" labelExpression="&lt;%$view.computeFunctionLabel%>" roundedCorner="true" backgroundStyle="GradientTopToBottom">
              <borderColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
              <labelColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
              <backgroundColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_min']"/>
              <foregroundColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="service:isNotLeafAndisAllLeavesFunctionActorAllocated()">
            <style xsi:type="style:FlatContainerStyleDescription" arcWidth="18" arcHeight="18" borderSizeComputationExpression="1" labelExpression="&lt;%$view.computeFunctionLabel%>" roundedCorner="true" backgroundStyle="GradientTopToBottom">
              <borderColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
              <labelColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
              <backgroundColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_min']"/>
              <foregroundColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue']"/>
            </style>
          </conditionnalStyles>
        </containerMappings>
        <reusedMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_ContrainedElements']"/>
        <reusedMappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']"/>
        <reusedMappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV']"/>
        <reusedMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_PVconnector']"/>
        <reusedMappings xsi:type="description_2:ContainerMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG']"/>
        <reusedMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_PVGconnector']"/>
        <toolSections name="Functions">
          <ownedTools xsi:type="tool_1:ToolGroup" name="FunctionCreation">
            <tools xsi:type="tool_1:ContainerCreationDescription" documentation="Creates a new Physical Function" name="Physical Function" precondition="&lt;%$containerView.isValidCreationDFFunction() &amp;&amp; ($container.isA(&quot;CapabilityRealization&quot;) || $container.allocationBlocks.filter(&quot;AbstractActor&quot;).nSize == 0) %>" containerMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='PDFB_Function']">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $containerView.getDFTarget()%>">
                  <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%isFunction()%>">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% current.createFunction()%>">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%allocateToCapability($containerView)%>"/>
                      <subModelOperations xsi:type="tool:ExternalJavaAction" name="CreateView" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.CreateViewAction">
                        <parameters name="context" value="&lt;% $container %>"/>
                        <parameters name="scope" value="&lt;% current %>"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_1:ContainerCreationDescription" documentation="Creates a new Duplicate" name="Duplicate" precondition="&lt;%$containerView.isValidCreationDFControlNode()%>" containerMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='PDFB_Function']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FunctionKind_Duplicate.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $containerView.getDFTarget()%>">
                  <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%isFunction() || isActorFunction()%>">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% current.createDuplicateFunction()%>">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%allocateToCapability($containerView)%>"/>
                      <subModelOperations xsi:type="tool:ExternalJavaAction" name="CreateView" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.CreateViewAction">
                        <parameters name="context" value="&lt;% $container %>"/>
                        <parameters name="scope" value="&lt;% current %>"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_1:ContainerCreationDescription" documentation="Creates a new Gather" name="Gather" precondition="&lt;%$containerView.isValidCreationDFControlNode()%>" containerMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='PDFB_Function']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FunctionKind_Gather.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $containerView.getDFTarget()%>">
                  <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%isFunction() || isActorFunction()%>">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% current.createGatherFunction()%>">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%allocateToCapability($containerView)%>"/>
                      <subModelOperations xsi:type="tool:ExternalJavaAction" name="CreateView" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.CreateViewAction">
                        <parameters name="context" value="&lt;% $container %>"/>
                        <parameters name="scope" value="&lt;% current %>"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_1:ContainerCreationDescription" documentation="Creates a new Route" name="Route" precondition="&lt;%$containerView.isValidCreationDFControlNode()%>" containerMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='PDFB_Function']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FunctionKind_Route.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $containerView.getDFTarget()%>">
                  <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%isFunction() || isActorFunction()%>">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% current.createRouteFunction()%>">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%allocateToCapability($containerView)%>"/>
                      <subModelOperations xsi:type="tool:ExternalJavaAction" name="CreateView" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.CreateViewAction">
                        <parameters name="context" value="&lt;% $container %>"/>
                        <parameters name="scope" value="&lt;% current %>"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_1:ContainerCreationDescription" documentation="Creates a new Select" name="Select" precondition="&lt;%$containerView.isValidCreationDFControlNode()%>" containerMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='PDFB_Function']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FunctionKind_Select.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $containerView.getDFTarget()%>">
                  <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%isFunction() || isActorFunction()%>">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% current.createSelectFunction()%>">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%allocateToCapability($containerView)%>"/>
                      <subModelOperations xsi:type="tool:ExternalJavaAction" name="CreateView" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.CreateViewAction">
                        <parameters name="context" value="&lt;% $container %>"/>
                        <parameters name="scope" value="&lt;% current %>"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_1:ContainerCreationDescription" documentation="Creates a new Split" name="Split" precondition="&lt;%$containerView.isValidCreationDFControlNode()%>" containerMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='PDFB_Function']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FunctionKind_Split.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $containerView.getDFTarget()%>">
                  <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%isFunction() || isActorFunction()%>">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% current.createSplitFunction()%>">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%allocateToCapability($containerView)%>"/>
                      <subModelOperations xsi:type="tool:ExternalJavaAction" name="CreateView" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.CreateViewAction">
                        <parameters name="context" value="&lt;% $container %>"/>
                        <parameters name="scope" value="&lt;% current %>"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ContainerCreationDescription" documentation="Creates a new Physical Function allocated to a new Physical Actor" name="Actor Function" precondition="&lt;%$containerView.isValidCreationDFFunction() &amp;&amp; $containerView.isA(&quot;DDiagram&quot;)%>" containerMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='PDFB_Function']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ActorPhysicalFunction.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $container.getRootFunction()%>">
                <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%isFunction()%>">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% current.createActorFunction()%>">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%allocateToCapability($containerView)%>"/>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%allocateToNewActor()%>"/>
                    <subModelOperations xsi:type="tool:ExternalJavaAction" name="CreateView" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.CreateViewAction">
                      <parameters name="context" value="&lt;% $container %>"/>
                      <parameters name="scope" value="&lt;% current %>"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolGroup" name="FunctionalExchanges">
            <tools xsi:type="tool_1:EdgeCreationDescription" documentation="Creates a new Functional Exchange between the Source and Target Physical Functions. If necessary, Function Ports are created automatically. The Functional Exchange is created under the common parent Function of the Source and Target." name="Functional Exchange" precondition="&lt;%isValidCreationFunctionalExchange($preSource, $preTarget)%>" elementsToSelect="var:result" edgeMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@edgeMappings[name='PDFB_Exchange']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FunctionalExchange.gif" extraSourceMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='PDFB_Function']" extraTargetMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='PDFB_Function']" connectionStartPrecondition="&lt;%isValidCreationFunctionalExchange($preSource)%>">
              <sourceVariable name="source"/>
              <targetVariable name="target"/>
              <sourceViewVariable name="sourceView"/>
              <targetViewVariable name="targetView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$source.createDFFunctionalExchange($sourceView, $targetView)%>"/>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_1:NodeCreationDescription" documentation="Creates a new Input Port on the target Function" name="Input Port" precondition="&lt;%$containerView.isValidCreationFunctionInputPort()%>" nodeMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='PDFB_Function']/@borderedNodeMappings[name='PDFB_Pin']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/InFlowPort.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$container%>">
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="FunctionInputPort" referenceName="inputs">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%creationService%>"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_1:NodeCreationDescription" documentation="Creates a new Output Port on the target Function" name="Output Port" precondition="&lt;%$containerView.isValidCreationFunctionOutputPort()%>" nodeMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='PDFB_Function']/@borderedNodeMappings[name='PDFB_Pin']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/OutFlowPort.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$container%>">
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="FunctionOutputPort" referenceName="outputs">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%creationService%>"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolDescription" documentation="Insert/Remove Functions. Create or delete graphical objects corresponding to already existing Functions. Removing a Function graphical object from the diagram does not delete the Function from the model. This tool does not modify the semantic model." name="Show/Hide Functions" label="Functions" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool:AcceleoVariable" name="visibleFunctions" computationExpression="&lt;% $elementView.getDisplayedAbstractFunctions() %>"/>
              <subVariables xsi:type="tool:AcceleoVariable" name="visibleFunctionViews" computationExpression="&lt;% $elementView.getDisplayedAbstractFunctionViews() %>"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView%>">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectFunctions" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                  <parameters name="context" value="&lt;% $elementView %>"/>
                  <parameters name="scope" value="&lt;% $elementView.getAvailableAbstractFunctionsToInsertInDataFlowBlank() %>"/>
                  <parameters name="resultVariable" value="selectedFunctions"/>
                  <parameters name="wizardMessage" value="Select Functions and ControlNodes to show in &lt;%$element.name%>."/>
                  <parameters name="initialSelection" value="&lt;% $visibleFunctions%>"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% ! ($selectedFunctions == &quot;WIZARD_CANCELED&quot;) %>">
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="ShowHideFunctions" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.ShowHideFunctions">
                    <parameters name="view" value="&lt;%$elementView%>"/>
                    <parameters name="selected functions" value="&lt;%$selectedFunctions%>"/>
                    <parameters name="visible functions" value="&lt;%$visibleFunctions%>"/>
                    <parameters name="visible function views" value="&lt;%$visibleFunctionViews%>"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView.getDiagramContainer().forceRefresh%>"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolGroup" name="Show/Hide exchanges">
            <tools xsi:type="tool:ToolDescription" documentation="Insert/Remove Functional Exchange. Create or delete graphical objects corresponding to already existing Functional Exchanges and the corresponding source/target Functions if they are not present on the diagram yet. Removing a Functional Exchange graphical object from the diagram does not delete the Functional Exchange from the model. This tool does not modify the semantic model." name="Show/Hide Functional Exchanges" label="Functional Exchanges" precondition="&lt;%($elementView.target.filter(&quot;AbstractFunction&quot;).nSize() > 0) &amp;&amp; ($elementView.filter(&quot;DDiagram&quot;).nSize() == 0) %>" forceRefresh="true" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
              <element name="element"/>
              <elementView name="elementView">
                <subVariables xsi:type="tool:AcceleoVariable" name="displayedExchanges" computationExpression="&lt;%$elementView.getDisplayedFunctionalExchanges()%>"/>
                <subVariables xsi:type="tool:AcceleoVariable" name="scope" computationExpression="&lt;%getAvailableFunctionalExchangesToInsert()%>"/>
              </elementView>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView%>">
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectExchanges" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectLinksFromTransferWizard">
                    <parameters name="context" value="&lt;% $element%>"/>
                    <parameters name="scope" value="&lt;%$scope%>"/>
                    <parameters name="initialSelection" value="&lt;%$displayedExchanges%>"/>
                    <parameters name="resultVariable" value="selectedExchanges"/>
                    <parameters name="wizardMessage" value="Select Functional Exchanges to show in &lt;%$element.name%>."/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%($selectedExchanges != &quot;WIZARD_CANCELED&quot;)%>">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView.showDFFunctionalExchange($scope, $selectedExchanges )%>"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:ToolDescription" documentation="[Available only when the diagram is unsynchronized] Insert/Remove Function Ports. Create or delete graphical objects corresponding to already existing Function Ports. Removing a Function Port graphical object from the diagram does not delete the Function Port from the model. This tool does not modify the semantic model." name="Show/Hide Function Ports" label="Function Ports" precondition="&lt;%($elementView.filter(&quot;DNodeContainer&quot;).nSize > 0) &amp;&amp; ($elementView.target.filter(&quot;AbstractFunction&quot;).nSize > 0) &amp;&amp; (!$elementView.getDiagramContainer().isSynchronized())%>" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
              <filters precondition="feature:synchronized" elementsToListen="&lt;%current%>">
                <listeners domainClass="DDiagram" featureName="synchronized"/>
              </filters>
              <element name="element"/>
              <elementView name="elementView">
                <subVariables xsi:type="tool:AcceleoVariable" name="displayedPorts" computationExpression="&lt;% $elementView.ownedBorderedNodes.target.filter(&quot;Port&quot;) %>"/>
              </elementView>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView%>">
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectPorts" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                    <parameters name="context" value="&lt;% $element %>"/>
                    <parameters name="scope" value="&lt;% $elementView.target.getAvailablePins($elementView.getDiagramContainer(), $elementView)%>"/>
                    <parameters name="resultVariable" value="selection"/>
                    <parameters name="wizardMessage" value="Select Ports to show in &lt;%$element.name%>."/>
                    <parameters name="initialSelection" value="&lt;% $displayedPorts %>"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% ! ($selection == &quot;WIZARD_CANCELED&quot;) %>">
                    <subModelOperations xsi:type="tool:For" expression="&lt;% $selection %>">
                      <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%! $displayedPorts.nContains($i)%>">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$i%>">
                          <subModelOperations xsi:type="tool_1:CreateView" mapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='PDFB_Function']/@borderedNodeMappings[name='PDFB_Pin']" containerViewExpression="&lt;%$elementView%>"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:For" expression="&lt;%$displayedPorts%>">
                      <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%! $selection.nContains($i)%>">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView.ownedBorderedNodes[target == $i].nFirst%>">
                          <subModelOperations xsi:type="tool:DeleteView"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:ToolDescription" documentation="[Available only when the diagram is unsynchronized] Insert/Remove Categorized Exchanges. Create or delete graphical objects corresponding to already existing Categorized Exchanges and the corresponding source/target Functions if they are not present on the diagram yet. Removing a Categorized Exchange graphical object from the diagram does not delete the Exchange from the model. This tool does not modify the semantic model." name="Show/Hide Exchange Categories" label="Exchange Categories" precondition="&lt;%($elementView.filter(&quot;DNodeContainer&quot;).nSize() > 0)  &amp;&amp; ($elementView.target.filter(&quot;AbstractFunction&quot;).nSize() > 0)%>" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
              <filters precondition="feature:synchronized" elementsToListen="&lt;%current%>">
                <listeners domainClass="DDiagram" featureName="synchronized"/>
              </filters>
              <element name="element"/>
              <elementView name="elementView">
                <subVariables xsi:type="tool:AcceleoVariable" name="diagram" computationExpression="&lt;% $elementView.getDiagramContainer() %>"/>
              </elementView>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $elementView %>">
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectExchangeCategories" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromCheckBoxWizard">
                    <parameters name="context" value="&lt;% $elementView %>"/>
                    <parameters name="resultVariable" value="selectedExchangeCategories"/>
                    <parameters name="wizardMessage" value="Select Exchange Categories and targeted Functions to show in &lt;%$element.name%>."/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% ! ($selectedExchangeCategories == &quot;WIZARD_CANCELED&quot;) %>">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView.getDiagramContainer().forceRefresh%>"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool_1:NodeCreationDescription" documentation="Insert/Remove Functional Chain. Create or delete graphical objects corresponding to already existing Functional Chains. Removing a Functional Chain graphical object from the diagram does not delete the Functional Chain from the model. This tool does not modify the semantic model." name="Show/Hide Functional Chains" label="Functional Chains" nodeMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@nodeMappings[name='PDFB_FunctionalChainEnd']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <variable name="container"/>
            <viewVariable name="containerView">
              <subVariables xsi:type="tool:AcceleoVariable" name="ownedElements" computationExpression="&lt;%$containerView.getSetOfDiagramElements()%>"/>
              <subVariables xsi:type="tool:AcceleoVariable" name="initialSelection" computationExpression="&lt;%$containerView.getNodesAndNodeListElements()[visible &amp;&amp; target.filter(&quot;FunctionalChain&quot;).nSize() > 0].target%>"/>
              <subVariables xsi:type="tool:AcceleoVariable" name="diagram" computationExpression="&lt;%$containerView.getDiagramContainer()%>"/>
            </viewVariable>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $container %>">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectFunctionalChains" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                  <parameters name="context" value="&lt;% $container %>"/>
                  <parameters name="scope" value="&lt;%getFunctionalChainsToInsert($containerView, $container.getAllFunctionalChain())%>"/>
                  <parameters name="initialSelection" value="&lt;%$initialSelection%>"/>
                  <parameters name="resultVariable" value="selectedFunctionalChains"/>
                  <parameters name="wizardMessage" value="Select Functional Chains to show in &lt;%$container.name%>."/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% ! ($selectedFunctionalChains == &quot;WIZARD_CANCELED&quot;) %>">
                  <subModelOperations xsi:type="tool:For" expression="&lt;%$initialSelection%>">
                    <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%!$selectedFunctionalChains.nContains($i)%>">
                      <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%$diagram.target.isA(&quot;AbstractCapability&quot;)%>">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $diagram.target.removeFunctionalChainAbstractCapabilityInvolvement($i)%>"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$containerView.getNodesAndNodeListElements()[target == $i].nFirst%>">
                        <subModelOperations xsi:type="tool:DeleteView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:For" expression="&lt;%$selectedFunctionalChains - $initialSelection%>">
                    <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%$diagram.target.isA(&quot;AbstractCapability&quot;)%>">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $diagram.target.createFunctionalChainAbstractCapabilityInvolvement($i)%>"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$i%>">
                      <subModelOperations xsi:type="tool_1:CreateView" mapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@nodeMappings[name='PDFB_FunctionalChainEnd']" containerViewExpression="&lt;%$containerView%>"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$containerView.getDiagramContainer().forceRefresh%>"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolDescription" documentation="Switch between the representation of individual Physical Links and their representation as Category-based Physical Links." name="Switch Functional Exchanges / Categories" precondition="&lt;%($elementView.filter(&quot;DDiagram&quot;).nSize() > 0)%>" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView%>">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="SetVariable $scope" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                  <parameters name="context" value="&lt;% $element%>"/>
                  <parameters name="variable" value="scope"/>
                  <parameters name="value" value="&lt;% $elementView.getSwitchFECategoriesScope() %>"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="SetVariable $initialSelection" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                  <parameters name="context" value="&lt;% $element%>"/>
                  <parameters name="variable" value="initialSelection"/>
                  <parameters name="value" value="&lt;% $elementView.getSwitchFECategoriesInitialSelection()%>"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectElements" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectLinksFromTransferWizard">
                  <parameters name="context" value="&lt;% $element%>"/>
                  <parameters name="scope" value="&lt;%$scope%>"/>
                  <parameters name="initialSelection" value="&lt;%$initialSelection%>"/>
                  <parameters name="resultVariable" value="selectedElements"/>
                  <parameters name="wizardMessage" value="Select Categories to reveal"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%($selectedElements != &quot;WIZARD_CANCELED&quot;)%>">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView.switchFECategories($scope, $initialSelection, $selectedElements )%>"/>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView.getDiagramContainer().forceRefresh%>"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:DeleteElementDescription" name="delete SF" precondition="&lt;%!($containerView[!filter(&quot;DDiagram&quot;)].eContainer(&quot;DDiagram&quot;).target + $containerView[filter(&quot;DDiagram&quot;)].target.ancestor + $containerView[filter(&quot;DDiagram&quot;)].target + $containerView[!filter(&quot;DDiagram&quot;)].eContainer(&quot;DDiagram&quot;).target.ancestor).nContains($element)%>">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $element %>">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="CapellaDeleteExternalAction" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.delete.CapellaDeleteExternalAction"/>
              </firstModelOperations>
            </initialOperation>
            <hook id="org.polarsys.capella.core.sirius.analysis.delete.CapellaDeleteActionHook"/>
          </ownedTools>
          <ownedTools xsi:type="tool_1:DeleteElementDescription" name="delete category">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $element %>">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="NoDeleteElement" id="org.polarsys.capella.core.sirius.analysis.delete.NoDeleteExternalAction"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:DirectEditLabel" name="rename name" inputLabelExpression="feature:name">
            <mask mask="{0}"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%current%>">
                <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="&lt;%$0%>"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:DirectEditLabel" name="rename exchanges" forceRefresh="true" inputLabelExpression="feature:name">
            <mask mask="{0}"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%current%>">
                <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="&lt;%$0%>"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:DirectEditLabel" name="node" inputLabelExpression="feature:name">
            <mask mask="{0}"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%current%>">
                <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="&lt;%$0%>"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:DiagramCreationDescription" name="Physical Data Flow Blank" precondition="&lt;%isInLib() &amp;&amp; isA(&quot;PhysicalFunction&quot;) || isA(&quot;CapabilityRealization&quot;)%>" titleExpression="[PDFB] &lt;%current.name%>" browseExpression="" diagramDescription="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']">
            <initialOperation/>
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ContainerDropDescription" name="DnD DF FunctionPort" precondition="&lt;%$element.isValidDndDFFunctionPort($newViewContainer) %>" mappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='PDFB_Function']/@borderedNodeMappings[name='PDFB_Pin']" moveEdges="true">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$element.dndDFFunctionPort($oldSemanticContainer, $newSemanticContainer)%>"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ContainerDropDescription" name="DnD DF AbstractFunction" precondition="&lt;%$element.isValidDndDFBAbstractFunction($newViewContainer) %>" forceRefresh="true" mappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='PDFB_Function']" moveEdges="true">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$element.dndDFAbstractFunction($oldSemanticContainer, $newSemanticContainer)%>"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ReconnectEdgeDescription" name="PDFB Reconnect Function Exchanges" precondition="&lt;% $element.isFunctionalExchangeReconnectable($sourceView.getDiagramContainer(), $source, $target) %>" reconnectionKind="RECONNECT_BOTH">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $element.reconnectFunctionalExchange($source,$target) %>"/>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ContainerDropDescription" name="D&amp;D Constraints From Project Explorer" precondition="&lt;% $element.isA(&quot;Constraint&quot;) &amp;&amp; $element.canBeDropped($newViewContainer) %>" forceRefresh="true" dragSource="PROJECT_EXPLORER">
            <mappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']"/>
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$element%>"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ContainerDropDescription" name="D&amp;D Function From Project Explorer" precondition="&lt;% $element.isA(&quot;AbstractFunction&quot;) &amp;&amp; $element.canBeDropped($newViewContainer) %>" forceRefresh="true" mappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='PDFB_Function']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$element%>">
                <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% !$newContainerView.getDiagramContainer().target.isA(&quot;AbstractFunction&quot;) %>">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$newContainerView.getDiagramContainer().target%>">
                    <subModelOperations xsi:type="tool:CreateInstance" typeName="AbstractFunctionAbstractCapabilityInvolvement" referenceName="ownedAbstractFunctionAbstractCapabilityInvolvements" variableName="involvement">
                      <subModelOperations xsi:type="tool:SetValue" featureName="involved" valueExpression="&lt;%$element%>"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:PopupMenu" name="Functional Chain" label="Functional Chain">
            <menuItemDescription xsi:type="tool:OperationAction" name="Create a Functional Chain" precondition="&lt;%isValidFunctionalChainSelection($views)%>" forceRefresh="true">
              <view name="views"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%createFunctionalChain($views)%>">
                  <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%current.isA(&quot;FunctionalChain&quot;)%>">
                    <subModelOperations xsi:type="tool_1:CreateView" mapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@nodeMappings[name='PDFB_FunctionalChainEnd']" containerViewExpression="&lt;%$views.nFirst().getDiagramContainer()%>"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </menuItemDescription>
          </ownedTools>
        </toolSections>
        <toolSections name="Accelerators">
          <ownedTools xsi:type="tool:ToolDescription" documentation="Insert all the Functions available in a given Mode / State. This tool does not modify the semantic model." name="State-Mode Elements" label="Functions from Mode / State" precondition="&lt;%$elementView.isValidDFInsertStateModes()%>" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Mode.gif">
            <element name="element"/>
            <elementView name="elementView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$element%>">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectStates" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                  <parameters name="context" value="&lt;%$element%>"/>
                  <parameters name="scope" value="&lt;%$elementView.getDFInsertStateModesScope()%>"/>
                  <parameters name="multiple" value="true"/>
                  <parameters name="resultVariable" value="elements"/>
                  <parameters name="wizardMessage" value="Select States/Modes to display all its available functions."/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% ! ($elements == &quot;WIZARD_CANCELED&quot;) %>">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView.showDFStateModes($elements)%>"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolDescription" documentation="Insert all the Functions and Functional Exchanges contributing to a given Scenario. This tool does not modify the semantic model." name="Scenario Elements" label="Elements from Scenario" precondition="&lt;%$elementView.isValidDFInsertScenarios()%>" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Scenario.gif">
            <element name="element"/>
            <elementView name="elementView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$element%>">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectElements" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                  <parameters name="context" value="&lt;%$element%>"/>
                  <parameters name="scope" value="&lt;%$elementView.getDFInsertScenariosScope()%>"/>
                  <parameters name="multiple" value="true"/>
                  <parameters name="resultVariable" value="elements"/>
                  <parameters name="wizardMessage" value="Select Scenarios to display all involved elements."/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% ! ($elements == &quot;WIZARD_CANCELED&quot;) %>">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView.showDFScenarios($elements)%>"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ContainerCreationDescription" documentation="Insert all the Functions and Functional Exchanges contributing to a given Functional Chain. " name="Show Functional Chain Elements" label="Functional Chain Elements" containerMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='PDFB_Function']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FunctionalChain.gif">
            <variable name="container"/>
            <viewVariable name="containerView">
              <subVariables xsi:type="tool:AcceleoVariable" name="scope" computationExpression="&lt;%$container.getAllFunctionalChain()%>"/>
              <subVariables xsi:type="tool:AcceleoVariable" name="diagram" computationExpression="&lt;%$containerView.getDiagramContainer()%>"/>
            </viewVariable>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $container %>">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectFunctions" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                  <parameters name="context" value="&lt;% $container %>"/>
                  <parameters name="scope" value="&lt;%$scope%>"/>
                  <parameters name="multiple" value="true"/>
                  <parameters name="resultVariable" value="selectedFunctionalChains"/>
                  <parameters name="wizardMessage" value="Select FunctionChains to display all involved elements in &lt;%$container.name%>."/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% ! ($selectedFunctionalChains == &quot;WIZARD_CANCELED&quot;) %>">
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="showHideRelatedElements" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.ShowHideRelatedElements">
                    <parameters name="view" value="&lt;% $containerView%>"/>
                    <parameters name="chains" value="&lt;%$selectedFunctionalChains%>"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%$diagram.target.isA(&quot;AbstractCapability&quot;)%>">
                    <subModelOperations xsi:type="tool:For" expression="&lt;%$selectedFunctionalChains%>">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $diagram.target.createFunctionalChainAbstractCapabilityInvolvement($i)%>"/>
                      <subModelOperations xsi:type="tool:For" expression="&lt;%$i.getOwnedFunctionalChainInvolvements.involved.filter(&quot;AbstractFunction&quot;)%>" iteratorName="j">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $diagram.target.createAbstractFunctionAbstractCapabilityInvolvement($j)%>"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="refreshElement" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.RefreshElement">
                    <parameters name="context" value="&lt;% $containerView.getDiagramContainer() %>"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <reusedTools xsi:type="tool:ToolDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@additionalLayers[name='Communication%20Model']/@toolSections.1/@ownedTools[name='DiagramInitialization']"/>
        </toolSections>
        <toolSections name="Common">
          <ownedTools xsi:type="tool_1:NodeCreationDescription" documentation="Create a new Constraint." name="Constraint" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Constraint.gif">
            <nodeMappings href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']"/>
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$container%>">
                <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% $containerView.filter(&quot;DDiagram&quot;).nSize() == 1 %>">
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="Constraint" referenceName="ownedConstraints">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%creationService%>"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:EdgeCreationDescription" documentation="Allocate a Source Constraint to an available Target Capella Element." name="ConstraintElement" precondition="&lt;%!( $preSource.constrainedElements.nContains($preTarget))%>" forceRefresh="true" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ClassCarries.gif">
            <edgeMappings href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_ContrainedElements']"/>
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:If" conditionExpression="&lt;%$source.filter(&quot;Constraint&quot;).nSize() == 1%>">
                <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% $source.constrainedElements.nSize() == 0%>">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$source%>">
                    <subModelOperations xsi:type="tool:SetValue" featureName="constrainedElements" valueExpression="&lt;%$target%>"/>
                    <subModelOperations xsi:type="tool:MoveElement" newContainerExpression="&lt;%$target%>" featureName="ownedConstraints"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% $source.constrainedElements.nSize() != 0%>">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$source%>">
                    <subModelOperations xsi:type="tool:SetValue" featureName="constrainedElements" valueExpression="&lt;%$target%>"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolDescription" documentation="Creates or deletes graphical objects corresponding to existing Constraints. Removing a Constraint graphical object does not delete this Constraint from the model. This tool does not modify the semantic model." name="Show/Hide Constraints" label="Constraints" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool:AcceleoVariable" name="constraintsInDiagram" computationExpression="&lt;% getExistingConstraintsFromDiagram($elementView.getDiagramContainer())%>"/>
              <subVariables xsi:type="tool:AcceleoVariable" name="diagram" computationExpression="&lt;% $elementView.eContainer(&quot;DDiagram&quot;) %>"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView%>">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectedConstraints" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectLinksFromTransferWizard">
                  <parameters name="context" value="&lt;% $elementView%>"/>
                  <parameters name="scope" value="&lt;% getConstraintToInsertInDiagram() - $constraintsInDiagram%>"/>
                  <parameters name="initialSelection" value="&lt;%$constraintsInDiagram%>"/>
                  <parameters name="resultVariable" value="selectedConstraints"/>
                  <parameters name="wizardMessage" value="Select Constraints to show."/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%($selectedConstraints != &quot;WIZARD_CANCELED&quot;)%>">
                  <subModelOperations xsi:type="tool:For" expression="&lt;%$selectedConstraints%>">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%createConstraintWithConstaintedElementInDiagram($i,$diagram,$constraintsInDiagram,true)%>"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:For" expression="&lt;%$constraintsInDiagram%>">
                    <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%! $selectedConstraints.nContains($i)%>">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView.getDiagramContainer().getNodesAndNodeListElements()[target == $i]%>">
                        <subModelOperations xsi:type="tool:DeleteView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView.getDiagramContainer().forceRefresh%>"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <reusedTools xsi:type="tool_1:ToolGroup" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='PV']"/>
          <reusedTools xsi:type="tool_1:ContainerDropDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20PV%20From%20Project%20Explorer']"/>
        </toolSections>
        <toolSections name="Select All Common Tools">
          <reusedTools xsi:type="tool:PopupMenu" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.2/@ownedTools[name='selectMenu']"/>
        </toolSections>
      </defaultLayer>
    </ownedRepresentations>
    <ownedRepresentations xsi:type="description_2:DiagramDescription" name="Physical Component Breakdown" titleExpression="[PCBD] &lt;%current.name%>" domainClass="PhysicalComponent">
      <dropDescriptions href="#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Component%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20Constraints%20From%20Project%20Explorer']"/>
      <dropDescriptions href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20PV%20From%20Project%20Explorer']"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.common.data.activity.gen/model/Activity.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.common.data.behavior.gen/model/Behavior.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CompositeStructure.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/ContextArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/EPBSArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/FunctionalAnalysis.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Interaction.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/LogicalArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CapellaCommon.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CapellaCore.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CapellaModeller.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.common.data.core.gen/model/ModellingCore.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/OperationalAnalysis.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/PhysicalArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Requirement.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/SharedModel.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#//communication"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#//datatype"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#//datavalue"/>
      <metamodel href="http://www.eclipse.org/emf/2002/Ecore#/"/>
      <filters xsi:type="filter:CompositeFilterDescription" name="Hide Property Values">
        <filters xsi:type="filter:MappingFilter">
          <mappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV']"/>
          <mappings xsi:type="description_2:ContainerMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG']"/>
        </filters>
      </filters>
      <layout xsi:type="description_2:OrderedTreeLayout" childrenExpression="&lt;%ownedFeatures.filter(&quot;Part&quot;).abstractType%>" nodeMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Component%20Breakdown']/@defaultLayer/@nodeMappings[name='PCB_PhysicalComponent']"/>
      <defaultLayer name="default">
        <nodeMappings name="PCB_PhysicalComponent" navigationDescriptions="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Component%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='Navigate%20from%20PCB%20to%20PAB']" deletionDescription="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Component%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='Physical%20Component']" labelDirectEdit="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Component%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='PCB%20Rename']" semanticCandidatesExpression="&lt;%current[representingPartitions.eContainer().filter(&quot;ComponentContext&quot;).nSize == 0] + getAllDescendants()%>" synchronizationLock="true" domainClass="PhysicalComponent">
          <detailDescriptions xsi:type="tool_1:DiagramCreationDescription" href="#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Component%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='Physical%20Component%20Breakdown']"/>
          <detailDescriptions xsi:type="tool_1:DiagramCreationDescription" href="#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Physical%20Architecture%20Blank']"/>
          <detailDescriptions xsi:type="tool_1:DiagramCreationDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='Contextual%20Component%20Detailed%20Interfaces']"/>
          <detailDescriptions xsi:type="tool_1:DiagramCreationDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='Contextual%20Component%20External%20Interfaces']"/>
          <detailDescriptions xsi:type="tool_1:DiagramCreationDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='Contextual%20Component%20Internal%20Interfaces']"/>
          <detailDescriptions xsi:type="tool_1:DiagramCreationDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Interfaces%20Diagram%20Blank']"/>
          <detailDescriptions xsi:type="description_1:TableCreationDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interface%20Delegations']/@ownedRepresentationCreationDescriptions[name='Interface%20delegations']"/>
          <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="7" labelPosition="node" resizeKind="NSEW">
            <borderColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']"/>
            <labelColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Label_Blue']"/>
            <color xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue']"/>
          </style>
          <conditionnalStyles predicateExpression="&lt;%(current == $container) &amp;&amp; (nature == &quot;NODE&quot;)%>">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="7" labelPosition="node" resizeKind="NSEW">
              <borderColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow_Border']"/>
              <labelFormat>bold</labelFormat>
              <labelColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow_Label']"/>
              <color xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="&lt;%(current == $container) &amp;&amp; (nature != &quot;NODE&quot;)%>">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="7" labelPosition="node" resizeKind="NSEW">
              <borderColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']"/>
              <labelFormat>bold</labelFormat>
              <labelColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Label_Blue']"/>
              <color xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="&lt;%(nature == &quot;NODE&quot;) &amp;&amp; (abstract==false)%>">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="7" labelPosition="node" resizeKind="NSEW">
              <borderColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow_Border']"/>
              <labelColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow_Label']"/>
              <color xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="&lt;%(nature == &quot;NODE&quot;) &amp;&amp; (abstract==true)%>">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="7" labelPosition="node" resizeKind="NSEW">
              <borderColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow_Border']"/>
              <labelFormat>italic</labelFormat>
              <labelColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow_Label']"/>
              <color xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="&lt;%(abstract==true) &amp;&amp; (nature != &quot;NODE&quot;)%>">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="7" labelPosition="node" resizeKind="NSEW">
              <borderColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']"/>
              <labelFormat>italic</labelFormat>
              <labelColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Label_Blue']"/>
              <color xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue']"/>
            </style>
          </conditionnalStyles>
        </nodeMappings>
        <edgeMappings name="PCB_PhysicalComponent_subComponents" deletionDescription="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Component%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20subComponentLink']" semanticCandidatesExpression="&lt;%current.eAllContents%>" semanticElements="service:getTargetsOfComponent_subComponents()" synchronizationLock="true" sourceMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Component%20Breakdown']/@defaultLayer/@nodeMappings[name='PCB_PhysicalComponent']" targetMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Component%20Breakdown']/@defaultLayer/@nodeMappings[name='PCB_PhysicalComponent']" targetFinderExpression="service:getTargetsOfComponent_subComponents()" sourceFinderExpression="feature:type" domainClass="cs.Part" reconnections="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Component%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='move%20subComponents']">
          <style routingStyle="tree" foldingStyle="TARGET">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
            <centerLabelStyleDescription>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="PCB_PhysicalComponent_Part" deletionDescription="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Component%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='Physical%20Component']" semanticCandidatesExpression="service:getPCBPartSemanticCandidates()" semanticElements="service:getLCBPartSemanticElements()" synchronizationLock="true" sourceMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Component%20Breakdown']/@defaultLayer/@nodeMappings[name='PCB_PhysicalComponent']" targetMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Component%20Breakdown']/@defaultLayer/@nodeMappings[name='PCB_PhysicalComponent']" targetFinderExpression="feature:eContainer" sourceFinderExpression="service:getComponentType()" domainClass="cs.Part" useDomainElement="true" reconnections="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Component%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='Move%20part']">
          <style routingStyle="tree" foldingStyle="TARGET">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
            <centerLabelStyleDescription>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <reusedMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_ContrainedElements']"/>
        <reusedMappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']"/>
        <reusedMappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV']"/>
        <reusedMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_PVconnector']"/>
        <reusedMappings xsi:type="description_2:ContainerMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG']"/>
        <reusedMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_PVGconnector']"/>
        <toolSections name="Components">
          <ownedTools xsi:type="tool_1:NodeCreationDescription" documentation="Creates a new Node Physical Component in the target Physical Component" name="Node PC" precondition="&lt;%$container.nature == &quot;NODE&quot; || $container.nature == &quot;UNSET&quot;%>" forceRefresh="true" elementsToSelect="&lt;%selectOnlyCreatedView()%>" nodeMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Component%20Breakdown']/@defaultLayer/@nodeMappings[name='PCB_PhysicalComponent']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/PhysicalComponentNode.gif" extraMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Component%20Breakdown']/@defaultLayer/@nodeMappings[name='PCB_PhysicalComponent']">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$container.createPhysicalComponent()%>">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="CreateView" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.CreateViewAction">
                  <parameters name="context" value="&lt;% $container %>"/>
                  <parameters name="scope" value="&lt;% current %>"/>
                  <parameters name="containerViewExpression" value="&lt;%$containerView.getDiagramContainer()%>"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:SetValue" featureName="nature" valueExpression="NODE"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:NodeCreationDescription" documentation="Creates a new Behavior Physical Component in the target Physical Component" name="Behavior PC" precondition="&lt;%$container.nature == &quot;BEHAVIOR&quot; || $container.nature == &quot;UNSET&quot;%>" forceRefresh="true" elementsToSelect="&lt;%selectOnlyCreatedView()%>" nodeMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Component%20Breakdown']/@defaultLayer/@nodeMappings[name='PCB_PhysicalComponent']" extraMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Component%20Breakdown']/@defaultLayer/@nodeMappings[name='PCB_PhysicalComponent']">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$container.createPhysicalComponent()%>">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="CreateView" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.CreateViewAction">
                  <parameters name="context" value="&lt;% $container %>"/>
                  <parameters name="scope" value="&lt;% current %>"/>
                  <parameters name="containerViewExpression" value="&lt;%$containerView.getDiagramContainer()%>"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:SetValue" featureName="nature" valueExpression="BEHAVIOR"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:EdgeCreationDescription" documentation="[Reusable Components] Creates a new Part typed by the source Node Physical Component in the target Physical Component" name="Create Part" precondition="&lt;%$preSource.isValidDndABDComponent($preTargetView)%>" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Component%20Breakdown']/@defaultLayer/@edgeMappings[name='PCB_PhysicalComponent_subComponents']" iconPath="/org.polarsys.capella.core.sirius.analysis/description/images/containedIn.png">
            <filters precondition="&lt;%!isPreferenceEnabled(&quot;multipart.allowed&quot;)%>" elementsToListen="&lt;%getPreferenceListener()%>">
              <listeners domainClass="org.polarsys.capella.core.preferences.Listener" featureName="multipart.allowed"/>
            </filters>
            <sourceVariable name="source">
              <subVariables xsi:type="tool:AcceleoVariable" name="sourceType" computationExpression="&lt;% $source.getComponentType() %>"/>
            </sourceVariable>
            <targetVariable name="target">
              <subVariables xsi:type="tool:AcceleoVariable" name="targetType" computationExpression="&lt;% $target.getComponentType() %>"/>
            </targetVariable>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$targetType%>">
                <subModelOperations xsi:type="tool:CreateInstance" typeName="cs.Part" referenceName="ownedFeatures">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%creationService()%>"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="abstractType" valueExpression="&lt;%$sourceType%>"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:EdgeCreationDescription" documentation="Sets the target Component as the new container of the source Component" name="Contained In" precondition="&lt;%($preSource.nature == $preTarget.nature) &amp;&amp; $preSource.isValidDndABDComponent($preTargetView) %>" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Component%20Breakdown']/@defaultLayer/@edgeMappings[name='PCB_PhysicalComponent_subComponents']" iconPath="/org.polarsys.capella.core.sirius.analysis/description/images/containedIn.png">
            <filters precondition="&lt;%isPreferenceEnabled(&quot;multipart.allowed&quot;)%>" elementsToListen="&lt;%getPreferenceListener()%>">
              <listeners domainClass="org.polarsys.capella.core.preferences.Listener" featureName="multipart.allowed"/>
            </filters>
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$source.dndABDComponent($source.eContainer, $target)%>"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:DiagramCreationDescription" name="Physical Component Breakdown" precondition="&lt;%isInLib() &amp;&amp; getComponentType().isA(&quot;PhysicalComponent&quot;)%>" titleExpression="[PCBD] &lt;%current.name%>" browseExpression="&lt;%getComponentType%>" diagramDescription="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Component%20Breakdown']">
            <initialOperation/>
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
          </ownedTools>
          <ownedTools xsi:type="tool_1:DeleteElementDescription" name="delete subComponentLink">
            <element name="element"/>
            <elementView name="view"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView.sourceNode.target.dndABDComponent($elementView.sourceNode.target.eContainer, $containerView.target)%>"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:DeleteElementDescription" name="Physical Component" precondition="&lt;%!($containerView[!filter(&quot;DDiagram&quot;)].eContainer(&quot;DDiagram&quot;).target + $containerView[filter(&quot;DDiagram&quot;)].target.ancestor + $containerView[filter(&quot;DDiagram&quot;)].target + $containerView[!filter(&quot;DDiagram&quot;)].eContainer(&quot;DDiagram&quot;).target.ancestor).nContains($element)%>">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $element %>">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="CapellaDeleteExternalAction" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.delete.CapellaDeleteExternalAction"/>
              </firstModelOperations>
            </initialOperation>
            <hook id="org.polarsys.capella.core.sirius.analysis.delete.CapellaDeleteActionHook"/>
          </ownedTools>
          <ownedTools xsi:type="tool_1:DirectEditLabel" name="PCB Rename" inputLabelExpression="feature:name">
            <mask mask="{0}"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="&lt;% $0 %>"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ContainerDropDescription" name="D&amp;D Constraints From Project Explorer" precondition="&lt;% $element.isA(&quot;Constraint&quot;) &amp;&amp; $element.canBeDropped($newViewContainer) %>" forceRefresh="true" dragSource="PROJECT_EXPLORER">
            <mappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']"/>
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$element%>"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ReconnectEdgeDescription" name="move subComponents" precondition="&lt;% ($source.nature == $target.nature) &amp;&amp; $element.isValidDndABDComponent($targetView)%>" forceRefresh="true">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$element.dndABDComponent($source, $target)%>"/>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ReconnectEdgeDescription" name="Move part" precondition="&lt;% ($source.nature == $target.nature) &amp;&amp; $element.isValidDndABDComponent($targetView)%>">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%current%>">
                <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%$edgeView.semanticElements.nSize()==1%>">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$edgeView.semanticElements.nGet(0).dndABDComponent($source, $target)%>"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%$edgeView.semanticElements.nSize()>1%>">
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="select part" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                    <parameters name="context" value="&lt;%$source%>"/>
                    <parameters name="scope" value="&lt;%$edgeView.semanticElements%>"/>
                    <parameters name="multiple" value="true"/>
                    <parameters name="resultVariable" value="parts"/>
                    <parameters name="wizardMessage" value="Select parts which will be moved"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:For" expression="&lt;%$parts%>" iteratorName="part">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$part.dndABDComponent($source, $target)%>"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$edgeView%>">
                    <subModelOperations xsi:type="tool:DeleteView"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$sourceView.getDiagramContainer().refresh()%>"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool_1:DiagramNavigationDescription" name="Navigate from PCB to PAB" browseExpression="&lt;%current.getNavigationScope()%>" navigationNameExpression="&lt;%$containerView.getNavigationName($diagramName)%>" diagramDescription="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']">
            <containerViewVariable name="containerView"/>
            <containerVariable name="container"/>
            <representationNameVariable name="diagramName"/>
          </ownedTools>
        </toolSections>
        <toolSections name="Common">
          <ownedTools xsi:type="tool_1:NodeCreationDescription" documentation="Create a new Constraint." name="Constraint" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Constraint.gif">
            <nodeMappings href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']"/>
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$container%>">
                <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% $containerView.filter(&quot;DDiagram&quot;).nSize() == 1 %>">
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="Constraint" referenceName="ownedConstraints">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%creationService%>"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:EdgeCreationDescription" documentation="Allocate a Source Constraint to an available Target Capella Element." name="ConstraintElement" precondition="&lt;%!( $preSource.constrainedElements.nContains($preTarget))%>" forceRefresh="true" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ClassCarries.gif">
            <edgeMappings href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_ContrainedElements']"/>
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:If" conditionExpression="&lt;%$source.filter(&quot;Constraint&quot;).nSize() == 1%>">
                <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% $source.constrainedElements.nSize() == 0%>">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$source%>">
                    <subModelOperations xsi:type="tool:SetValue" featureName="constrainedElements" valueExpression="&lt;%$target%>"/>
                    <subModelOperations xsi:type="tool:MoveElement" newContainerExpression="&lt;%$target%>" featureName="ownedConstraints"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% $source.constrainedElements.nSize() != 0%>">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$source%>">
                    <subModelOperations xsi:type="tool:SetValue" featureName="constrainedElements" valueExpression="&lt;%$target%>"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolDescription" documentation="Creates or deletes graphical objects corresponding to existing Constraints. Removing a Constraint graphical object does not delete this Constraint from the model. This tool does not modify the semantic model." name="Show/Hide Constraints" label="Constraints" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool:AcceleoVariable" name="constraintsInDiagram" computationExpression="&lt;% getExistingConstraintsFromDiagram($elementView.getDiagramContainer())%>"/>
              <subVariables xsi:type="tool:AcceleoVariable" name="diagram" computationExpression="&lt;% $elementView.eContainer(&quot;DDiagram&quot;) %>"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView%>">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectedConstraints" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectLinksFromTransferWizard">
                  <parameters name="context" value="&lt;% $elementView%>"/>
                  <parameters name="scope" value="&lt;% getConstraintToInsertInDiagram() - $constraintsInDiagram%>"/>
                  <parameters name="initialSelection" value="&lt;%$constraintsInDiagram%>"/>
                  <parameters name="resultVariable" value="selectedConstraints"/>
                  <parameters name="wizardMessage" value="Select Constraints to show."/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%($selectedConstraints != &quot;WIZARD_CANCELED&quot;)%>">
                  <subModelOperations xsi:type="tool:For" expression="&lt;%$selectedConstraints%>">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%createConstraintWithConstaintedElementInDiagram($i,$diagram,$constraintsInDiagram,true)%>"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:For" expression="&lt;%$constraintsInDiagram%>">
                    <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%! $selectedConstraints.nContains($i)%>">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView.getDiagramContainer().getNodesAndNodeListElements()[target == $i]%>">
                        <subModelOperations xsi:type="tool:DeleteView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView.getDiagramContainer().forceRefresh%>"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <reusedTools xsi:type="tool_1:ToolGroup" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='PV']"/>
          <reusedTools xsi:type="tool_1:ContainerDropDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20PV%20From%20Project%20Explorer']"/>
        </toolSections>
      </defaultLayer>
    </ownedRepresentations>
    <ownedRepresentations xsi:type="description_2:DiagramDescription" name="Physical Architecture Blank" titleExpression="[PAB] &lt;%current.name%>" domainClass="NamedElement" preconditionExpression="&lt;%current.isA(&quot;PhysicalComponent&quot;) || (current.isA(&quot;Part&quot;) &amp;&amp; current.getComponentType().isA(&quot;PhysicalComponent&quot;)) %>" defaultConcern="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@concerns/@ownedConcernDescriptions.0">
      <dropDescriptions href="#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='DnD%20AB%20Component']"/>
      <dropDescriptions href="#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20Constraints%20From%20Project%20Explorer']"/>
      <dropDescriptions href="#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20Actors%20From%20Project%20Explorer']"/>
      <dropDescriptions href="#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20Components%20From%20Project%20Explorer']"/>
      <dropDescriptions href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20PV%20From%20Project%20Explorer']"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.common.data.activity.gen/model/Activity.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.common.data.behavior.gen/model/Behavior.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CompositeStructure.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/ContextArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/EPBSArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/FunctionalAnalysis.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Interaction.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/LogicalArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CapellaCommon.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CapellaCore.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CapellaModeller.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.common.data.core.gen/model/ModellingCore.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/OperationalAnalysis.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/PhysicalArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Requirement.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/SharedModel.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#//communication"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#//datatype"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#//datavalue"/>
      <metamodel href="http://www.eclipse.org/emf/2002/Ecore#/"/>
      <filters xsi:type="filter:CompositeFilterDescription" name="Collapse Component Physical Ports">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE" mappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port']" semanticConditionExpression="&lt;%! isA(&quot;PhysicalPort&quot;)%>" viewConditionExpression=""/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="Collapse Component Ports">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE" mappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port']" semanticConditionExpression="&lt;%! isA(&quot;ComponentPort&quot;)%>"/>
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='PAB%20PortRealization']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="Collapse Function Ports">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE" mappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction']/@borderedNodeMappings[name='PAB_Pin'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction']/@borderedNodeMappings[name='PAB%20InputPin%20by%20Categorie'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction']/@borderedNodeMappings[name='PAB%20OutputPin%20by%20Categorie']"/>
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='PAB%20PortRealization']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="Hide Function Ports without Exchanges">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction']/@borderedNodeMappings[name='PAB_Pin']" semanticConditionExpression="" viewConditionExpression="&lt;%isFunctionPortWithoutExchanges(eContainer(&quot;DDiagram&quot;))%>"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="Hide Component Ports without Exchanges">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port']" viewConditionExpression="&lt;%isComponentPortWithoutExchanges(eContainer(&quot;DDiagram&quot;))%>"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="Hide Physical Ports without Links">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port']" viewConditionExpression="&lt;%isPhysicalPortWithoutLinks(eContainer(&quot;DDiagram&quot;))%>"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="Hide Allocated Function On Parent Containers">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_ControlFunction'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction']" viewConditionExpression="true"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="Hide Allocated Functional Exchanges">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='PAB_FunctionExchange']" semanticConditionExpression="&lt;%allocatingComponentExchanges.nSize() == 0%>"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="Hide Functions">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_ControlFunction'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="Hide Functional Exchanges">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='PAB_FunctionExchange'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='PAB_FunctionExchange%20by%20Categorie']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="Hide Connections" label="Hide Component Exchanges">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='PAB_Exchange']" semanticConditionExpression="&lt;%kind == &quot;DELEGATION&quot;%>"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="Hide Physical Links">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='PAB_PhysicalLink']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="Hide Port Realizations" label="Hide Port Allocations">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='PAB%20PortRealization']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="Hide Port Delegations">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='PAB_Exchange']" semanticConditionExpression="&lt;%kind != &quot;DELEGATION&quot;%>"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="Hide Component Port Allocations" label="Hide Component Port Allocations">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='PAB_ComponentPortAllocation']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="Hide Realized  Ports" label="Hide Allocated Function Ports">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction']/@borderedNodeMappings[name='PAB_Pin'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction']/@borderedNodeMappings[name='PAB%20InputPin%20by%20Categorie'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction']/@borderedNodeMappings[name='PAB%20OutputPin%20by%20Categorie']" semanticConditionExpression="&lt;%current.incomingPortAllocations.nSize==0%>"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="Hide Node PCs">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']" semanticConditionExpression="&lt;%getComponentType().nature != &quot;NODE&quot;%>"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="Hide Behavior PCs">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']" semanticConditionExpression="&lt;%getComponentType().nature != &quot;BEHAVIOR&quot;%>"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="Hide Physical Actors">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Actor']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="Hide Deployed PCs">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Deployment']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="Show ExchangeItems" label="Show Exchange Items on Functional Exchanges">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE" mappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_Dummy']" semanticConditionExpression=""/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="Show Exchange Items on Component Exchanges">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE" mappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_Dummy']" semanticConditionExpression=""/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="Show Exchange Items on Component Exchange without Functional Exchanges" label="Show Exchange Items on Component Exchange (without Functional Exchanges)">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE" mappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_Dummy']" semanticConditionExpression=""/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="Show Allocated Functional Exchanges on Component Exchanges">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE" mappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_Dummy']" semanticConditionExpression=""/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="Hide cross Functional Exchanges of reusable Components">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='PAB_FunctionExchange']" viewConditionExpression="&lt;%target.isValidFunctionalExchangeEdge(sourceNode,targetNode)%>"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="Hide Simplified Diagram Based Component Exchanges">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='PAB_ComponentExchangeByDelegation']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="Hide Simplified Group of Component Exchanges" label="Hide Simplified Grouped Component Exchanges">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='PAB_ComponentExchangeByGroup']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="Hide Simplified Oriented Grouped Component Exchanges">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='PAB_ComponentExchangeByGroup_Oriented']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="Hide Functional Exchanges names">
        <filters xsi:type="filter:MappingFilter">
          <mappings xsi:type="description_2:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='CA%20Dummy']"/>
        </filters>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="Hide Component Exchanges names"/>
      <filters xsi:type="filter:CompositeFilterDescription" name="Hide Physical Links names"/>
      <filters xsi:type="filter:CompositeFilterDescription" name="Hide Computed Component Exchanges">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='PAB_ComputedComponentExchange']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="Hide Computed Physical Links">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='PAB_ComputedPhysicalLink']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="Hide Property Values">
        <filters xsi:type="filter:MappingFilter">
          <mappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV']"/>
          <mappings xsi:type="description_2:ContainerMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG']"/>
        </filters>
      </filters>
      <concerns>
        <ownedConcernDescriptions name="default" filters="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@filters[name='Hide%20Simplified%20Diagram%20Based%20Component%20Exchanges'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@filters[name='Hide%20Simplified%20Group%20of%20Component%20Exchanges'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@filters[name='Hide%20Simplified%20Oriented%20Grouped%20Component%20Exchanges']"/>
      </concerns>
      <layout xsi:type="description_2:CompositeLayout" direction="LeftToRight"/>
      <defaultLayer name="default">
        <nodeMappings name="PAB_PhysicalPathEnd" detailDescriptions="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Path%20Description']/@defaultLayer/@toolSections.0/@ownedTools[name='Physical%20Path%20Description']" deletionDescription="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20SF']" labelDirectEdit="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='edit%20name']" createElements="false" domainClass="PhysicalPath">
          <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="&lt;%getPhysicalPathLabel($diagram) %>" sizeComputationExpression="1" resizeKind="NSEW" width="2" height="2">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
          </style>
        </nodeMappings>
        <nodeMappings name="PAB_PhysicalFunction" detailDescriptions="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Physical%20Data%20Flow%20Blank'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Function%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='Physical%20Function%20Breakdown']" preconditionExpression="service:isAllocatedFunction(container, containerView)" deletionDescription="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20SF']" labelDirectEdit="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Function%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='rename%20Physical%20Function']" semanticCandidatesExpression="" createElements="false" domainClass="PhysicalFunction" dropDescriptions="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.2/@ownedTools[name='DnD%20AB%20FunctionPort']">
          <borderedNodeMappings name="PAB_Pin" deletionDescription="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20SF']" labelDirectEdit="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='edit%20name']" semanticCandidatesExpression="service:getAvailablePins(viewpoint,containerView)" domainClass="ActivityNode">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" hideLabelByDefault="true" sizeComputationExpression="1" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/FunctionInputPort.png">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
            <conditionnalStyles predicateExpression="service:isAFunctionOutputPort()">
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" hideLabelByDefault="true" sizeComputationExpression="1" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/FunctionOutputPort.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </conditionnalStyles>
          </borderedNodeMappings>
          <borderedNodeMappings name="PAB InputPin by Categorie" deletionDescription="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20category']" labelDirectEdit="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='edit%20name']" semanticCandidatesExpression="" createElements="false" semanticElements="&lt;%self + self.exchanges[target.ancestor.nContains($view.eContainer.target)]%>" domainClass="ExchangeCategory">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" hideLabelByDefault="true" sizeComputationExpression="1" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/CategoryInput.png">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </borderedNodeMappings>
          <borderedNodeMappings name="PAB OutputPin by Categorie" deletionDescription="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20category']" labelDirectEdit="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='edit%20name']" semanticCandidatesExpression="" createElements="false" semanticElements="&lt;%self + self.exchanges[source.ancestor.nContains($view.eContainer.target)]%>" domainClass="ExchangeCategory">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" hideLabelByDefault="true" sizeComputationExpression="1" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/CategoryOutput.png">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </borderedNodeMappings>
          <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="&lt;%$view.computeFunctionLabel%>" sizeComputationExpression="5" labelPosition="node" resizeKind="NSEW">
            <borderColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Border_Green']"/>
            <labelColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Label_Green']"/>
            <color xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Green']"/>
          </style>
          <conditionnalStyles predicateExpression="service:isDuplicateFunction()">
            <style xsi:type="style:WorkspaceImageDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression="&lt;%$view.computeFunctionLabel%>" sizeComputationExpression="5" labelPosition="node" resizeKind="NSEW" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/FunctionDuplicateDiagram.svg">
              <borderColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Border_Green']"/>
              <labelColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Label_Green']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="service:isGatherFunction()">
            <style xsi:type="style:WorkspaceImageDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression="&lt;%$view.computeFunctionLabel%>" sizeComputationExpression="5" labelPosition="node" resizeKind="NSEW" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/FunctionGatherDiagram.svg">
              <borderColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Border_Green']"/>
              <labelColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Label_Green']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="service:isRouteFunction()">
            <style xsi:type="style:WorkspaceImageDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression="&lt;%$view.computeFunctionLabel%>" sizeComputationExpression="5" labelPosition="node" resizeKind="NSEW" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/FunctionRouteDiagram.svg">
              <borderColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Border_Green']"/>
              <labelColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Label_Green']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="service:isSplitFunction()">
            <style xsi:type="style:WorkspaceImageDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression="&lt;%$view.computeFunctionLabel%>" sizeComputationExpression="5" labelPosition="node" resizeKind="NSEW" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/FunctionSplitDiagram.svg">
              <borderColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Border_Green']"/>
              <labelColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Label_Green']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="service:isSelectFunction()">
            <style xsi:type="style:WorkspaceImageDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression="&lt;%$view.computeFunctionLabel%>" sizeComputationExpression="5" labelPosition="node" resizeKind="NSEW" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/FunctionSelectDiagram.svg">
              <borderColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Border_Green']"/>
              <labelColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Label_Green']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="service:isNotLeaf()">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="&lt;%$view.computeFunctionLabel%>" sizeComputationExpression="5" labelPosition="node" resizeKind="NSEW">
              <borderColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Border_Green']"/>
              <labelFormat>italic</labelFormat>
              <labelColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Label_Green']"/>
              <color xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Green']"/>
            </style>
          </conditionnalStyles>
        </nodeMappings>
        <nodeMappings name="PAB_ControlFunction" preconditionExpression="false" deletionDescription="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20SF']" labelDirectEdit="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Function%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='rename%20Physical%20Function']" semanticCandidatesExpression="" createElements="false" domainClass="AbstractFunction">
          <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="" resizeKind="NSEW">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
          </style>
          <conditionnalStyles predicateExpression="&lt;%(filter(&quot;ForkFunction&quot;) + filter(&quot;JoinFunction&quot;)).nSize() > 0%>">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" resizeKind="NSEW" width="1" height="7">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="&lt;%filter(&quot;DecisionFunction&quot;).nSize() > 0%>">
            <style xsi:type="style:LozengeNodeDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="1" labelPosition="node" resizeKind="NSEW" widthComputationExpression="5" heightComputationExpression="5">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_gray']"/>
            </style>
          </conditionnalStyles>
        </nodeMappings>
        <nodeMappings name="PAB_FunctionalChainEnd" deletionDescription="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20SF']" labelDirectEdit="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='edit%20name']" semanticCandidatesExpression="" createElements="false" domainClass="FunctionalChain">
          <detailDescriptions xsi:type="tool_1:DiagramCreationDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@toolSections.0/@ownedTools[name='Functional%20Chain%20Description']"/>
          <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="&lt;%getFunctionalChainLabel($diagram) %>" sizeComputationExpression="1" resizeKind="NSEW" width="2" height="2">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
          </style>
        </nodeMappings>
        <nodeMappings name="PAB_Dummy" semanticCandidatesExpression="" createElements="false" domainClass="CapellaElement"/>
        <edgeMappings name="PAB_Exchange" label="PAB_ComponentExchange" preconditionExpression="service:isValidComponentExchangeEdge(sourceView, targetView)" deletionDescription="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20SF']" labelDirectEdit="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='edit%20name']" semanticCandidatesExpression="service:diagram.getABComponentExchangeSemanticCandidates" semanticElements="var:self" sourceMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Actor'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Deployment']" targetMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Actor'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Deployment']" targetFinderExpression="service:getComponentExchangeTarget()" sourceFinderExpression="service:getComponentExchangeSource()" domainClass="ComponentExchange" useDomainElement="true" reconnections="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Reconnect%20ComponentExchange%20Source'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Reconnect%20ComponentExchange%20Target']">
          <style targetArrow="NoDecoration" centeredSourceMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port']" centeredTargetMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port']">
            <strokeColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']"/>
            <centerLabelStyleDescription labelExpression="&lt;%getComponentExchangeLabel($diagram)%>">
              <labelColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']"/>
            </centerLabelStyleDescription>
          </style>
          <conditionnalStyles predicateExpression="&lt;%current.isOriented() &amp;&amp; current.kind != &quot;DELEGATION&quot; &amp;&amp; isOrientationAllowed()%>">
            <style targetArrow="NoDecoration" centeredSourceMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port']" centeredTargetMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port']">
              <strokeColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']"/>
              <centerLabelStyleDescription showIcon="false">
                <labelColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']"/>
              </centerLabelStyleDescription>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="&lt;%current.isOriented()  &amp;&amp; current.kind != &quot;DELEGATION&quot;%>">
            <style centeredSourceMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port']" centeredTargetMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port']">
              <strokeColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']"/>
              <centerLabelStyleDescription labelExpression="&lt;%getComponentExchangeLabel($diagram)%>">
                <labelColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']"/>
              </centerLabelStyleDescription>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="&lt;%current.isOriented() &amp;&amp; current.kind == &quot;DELEGATION&quot;%>">
            <style targetArrow="NoDecoration" centeredSourceMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port']" centeredTargetMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port']">
              <strokeColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']"/>
              <centerLabelStyleDescription showIcon="false">
                <labelColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']"/>
              </centerLabelStyleDescription>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="&lt;%! current.isOriented()  &amp;&amp; current.kind != &quot;DELEGATION&quot;%>">
            <style targetArrow="NoDecoration" centeredSourceMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port']" centeredTargetMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port']">
              <strokeColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']"/>
              <centerLabelStyleDescription labelExpression="&lt;%getComponentExchangeLabel($diagram)%>">
                <labelColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']"/>
              </centerLabelStyleDescription>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="&lt;%!current.isOriented() &amp;&amp; current.kind == &quot;DELEGATION&quot;%>">
            <style targetArrow="NoDecoration" centeredSourceMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port']" centeredTargetMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port']">
              <strokeColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']"/>
              <centerLabelStyleDescription showIcon="false">
                <labelColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']"/>
              </centerLabelStyleDescription>
            </style>
          </conditionnalStyles>
        </edgeMappings>
        <edgeMappings name="PAB_PhysicalLink" preconditionExpression="service:isValidPhysicalLinkEdge(sourceView, targetView)" deletionDescription="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20SF']" labelDirectEdit="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='edit%20name']" semanticCandidatesExpression="service:diagram.getABPhysicalLinkSemanticCandidates" semanticElements="var:self" sourceMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port']" targetMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port']" targetFinderExpression="service:getPhysicalLinkTarget() " sourceFinderExpression="service:getPhysicalLinkSource()" domainClass="PhysicalLink" useDomainElement="true" reconnections="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Reconnect%20PhysicalLink%20Source'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Reconnect%20PhysicalLink%20Target']">
          <style targetArrow="NoDecoration" centeredSourceMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port']" centeredTargetMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port']">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='red']"/>
            <centerLabelStyleDescription labelExpression="&lt;%getPhysicalLinkCenterLabel($diagram)%>">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='red']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="PAB PortRealization" preconditionExpression="service:isValidPortAllocationEdge(sourceView, targetView)" deletionDescription="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20SF']" semanticCandidatesExpression="service:diagram.getABPortAllocationSemanticCandidates" semanticElements="&lt;%current%>" sourceMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port']" targetMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction']/@borderedNodeMappings[name='PAB_Pin'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_ControlFunction']" targetFinderExpression="feature:targetElement" sourceFinderExpression="feature:sourceElement" domainClass="PortAllocation" useDomainElement="true">
          <style lineStyle="dash" targetArrow="NoDecoration" sizeComputationExpression="2" endsCentering="Source" centeredTargetMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction']/@borderedNodeMappings[name='PAB_Pin'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port']">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_orange']"/>
            <centerLabelStyleDescription showIcon="false">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
          <conditionnalStyles predicateExpression="service:isAOutputPin()">
            <style lineStyle="dash" targetArrow="NoDecoration" sizeComputationExpression="2" endsCentering="Source" centeredTargetMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction']/@borderedNodeMappings[name='PAB_Pin'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port']">
              <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_blue']"/>
              <centerLabelStyleDescription showIcon="false">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </centerLabelStyleDescription>
            </style>
          </conditionnalStyles>
        </edgeMappings>
        <edgeMappings name="PAB_ComponentPortAllocation" preconditionExpression="service:isValidComponentPortAllocationEdge(sourceView, targetView)" deletionDescription="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20SF']" semanticCandidatesExpression="service:diagram.getABComponentPortAllocationSemanticCandidates" semanticElements="&lt;%current%>" sourceMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port']" targetMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction']/@borderedNodeMappings[name='PAB_Pin'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_ControlFunction']" targetFinderExpression="service:getComponentPortAllocationTarget()" sourceFinderExpression="service:getComponentPortAllocationSource()" domainClass="ComponentPortAllocation" useDomainElement="true">
          <style targetArrow="NoDecoration" endsCentering="Source" centeredTargetMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction']/@borderedNodeMappings[name='PAB_Pin'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port']">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_blue']"/>
            <centerLabelStyleDescription showIcon="false">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="PAB PortAllocation" label="PAB PortAllocation (unused since 1.3)" preconditionExpression="false" deletionDescription="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20SF']" createElements="false" semanticElements="&lt;%current%>" sourceMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port']" targetMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction']/@borderedNodeMappings[name='PAB_Pin']" targetFinderExpression="feature:allocatedPort" sourceFinderExpression="feature:allocatingPort" domainClass="PortAllocation" useDomainElement="true">
          <style lineStyle="dash" targetArrow="NoDecoration" sizeComputationExpression="2" endsCentering="Both">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_orange']"/>
            <centerLabelStyleDescription showIcon="false">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
          <conditionnalStyles predicateExpression="service:isAOutputPin()">
            <style lineStyle="dash" targetArrow="NoDecoration" sizeComputationExpression="2" endsCentering="Both">
              <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_blue']"/>
              <centerLabelStyleDescription showIcon="false">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </centerLabelStyleDescription>
            </style>
          </conditionnalStyles>
        </edgeMappings>
        <edgeMappings name="PAB_FunctionExchange" label="PAB_FunctionalExchange" preconditionExpression="service:isValidABFunctionalExchangeEdge(sourceView, targetView)" deletionDescription="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20SF']" labelDirectEdit="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='edit%20name']" semanticCandidatesExpression="service:diagram.getABFunctionalExchangeSemanticCandidates" semanticElements="&lt;%current%>" sourceMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction']/@borderedNodeMappings[name='PAB_Pin'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_ControlFunction']" targetMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction']/@borderedNodeMappings[name='PAB_Pin'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_ControlFunction']" targetFinderExpression="feature:target" sourceFinderExpression="feature:source" domainClass="FunctionalExchange" useDomainElement="true" reconnections="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.2/@ownedTools[name='PAB%20Reconnect%20Function%20Exchanges']">
          <style targetArrow="InputFillClosedArrow" centeredSourceMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction']/@borderedNodeMappings[name='PAB_Pin']" centeredTargetMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction']/@borderedNodeMappings[name='PAB_Pin']">
            <strokeColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Border_Green']"/>
            <centerLabelStyleDescription labelExpression="&lt;%getFunctionalExchangeLabel($diagram)%>">
              <labelColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Border_Green']"/>
            </centerLabelStyleDescription>
          </style>
          <conditionnalStyles predicateExpression="&lt;%$diagram.activatedFilters[name==&quot;Collapse Function Ports&quot;].nSize()==0%>">
            <style targetArrow="NoDecoration" centeredSourceMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction']/@borderedNodeMappings[name='PAB_Pin']" centeredTargetMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction']/@borderedNodeMappings[name='PAB_Pin']">
              <strokeColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Border_Green']"/>
              <centerLabelStyleDescription labelExpression="&lt;%getFunctionalExchangeLabel($diagram)%>">
                <labelColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Border_Green']"/>
              </centerLabelStyleDescription>
            </style>
          </conditionnalStyles>
        </edgeMappings>
        <edgeMappings name="PAB_FunctionExchange by Categorie" label="PAB_ExchangeCategory" preconditionExpression="service:isValidFunctionalExchangeCategoryEdge(sourceView, targetView)" deletionDescription="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20category']" labelDirectEdit="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='edit%20name']" semanticCandidatesExpression="" createElements="false" semanticElements="&lt;% self + self.exchanges[(target.ancestor.nContains($view.targetNode.eContainer.target)) &amp;&amp; (source.ancestor.nContains($view.sourceNode.eContainer.target))]%>" sourceMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction']/@borderedNodeMappings[name='PAB%20OutputPin%20by%20Categorie']" targetMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction']/@borderedNodeMappings[name='PAB%20InputPin%20by%20Categorie']" targetFinderExpression="&lt;%current%>" sourceFinderExpression="&lt;%current%>" targetExpression="var:self" domainClass="ExchangeCategory" useDomainElement="true">
          <style targetArrow="InputFillClosedArrow" sizeComputationExpression="2" endsCentering="Both">
            <strokeColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Border_Green']"/>
            <centerLabelStyleDescription labelExpression="service:capellaLabelService(view, diagram)">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
          <conditionnalStyles predicateExpression="&lt;%$diagram.activatedFilters[name==&quot;Collapse Function Ports&quot;].nSize()==0%>">
            <style targetArrow="NoDecoration" sizeComputationExpression="2" endsCentering="Both">
              <strokeColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Border_Green']"/>
              <centerLabelStyleDescription labelExpression="service:capellaLabelService(view, diagram)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </centerLabelStyleDescription>
            </style>
          </conditionnalStyles>
        </edgeMappings>
        <edgeMappings name="PAB_InternLink" preconditionExpression="service:isValidABFunctionalChainInternalLinkEdge(sourceView, targetView)" createElements="false" sourceMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction']/@borderedNodeMappings[name='PAB_Pin']" targetMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction']/@borderedNodeMappings[name='PAB_Pin']" targetFinderExpression="service:getFunctionalChainTargets()" sourceFinderExpression="service:getFunctionalChainSources()" domainClass="FunctionalChain" useDomainElement="true">
          <style targetArrow="InputFillClosedArrow" endsCentering="Both">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_red']"/>
            <centerLabelStyleDescription showIcon="false">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="PAB_InternPhysicalPathLink" preconditionExpression="service:isValidABPhysicalPathInternalLinkEdge(sourceView, targetView)" createElements="false" sourceMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port']" targetMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port']" targetFinderExpression="service:getPhysicalPathTargets()" sourceFinderExpression="service:getPhysicalPathSources()" domainClass="PhysicalPath" useDomainElement="true">
          <style targetArrow="NoDecoration" endsCentering="Both">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_red']"/>
            <centerLabelStyleDescription showIcon="false">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="PAB_ComponentExchangeByDelegation" preconditionExpression="service:isValidComponentExchangeByDelegationEdge(sourceView, targetView)" deletionDescription="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20category']" semanticElements="service:getComponentExchangeByDelegationSemantics()" sourceMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Actor'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Deployment']" targetMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Actor'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Deployment']" targetFinderExpression="service:getComponentExchangeByDelegationTargets()" targetExpression="service:getComponentExchangeByDelegationTarget()">
          <style lineStyle="dash" targetArrow="NoDecoration" centeredSourceMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port']" centeredTargetMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port']">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_blue']"/>
            <centerLabelStyleDescription labelExpression="&lt;%$view.getComponentExchangeLabelByDelegation()%>">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="PAB_ComponentExchangeByGroup" preconditionExpression="service:isValidComponentExchangeByGroupEdge(sourceView, targetView)" deletionDescription="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20category']" semanticElements="service:getComponentExchangeByGroupSemantics()" sourceMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Actor'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Deployment']" targetMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Actor'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Deployment']" targetFinderExpression="service:getComponentExchangeByGroupTargets()" targetExpression="service:getComponentExchangeByGroupTarget()">
          <style lineStyle="dash" targetArrow="NoDecoration">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_gray']"/>
            <centerLabelStyleDescription labelExpression="&lt;%$view.getComponentExchangeLabelByDelegation()%>">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_gray']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="PAB_ComponentExchangeByGroup_Oriented" preconditionExpression="service:isValidComponentExchangeByGroupOrientedEdge(sourceView, targetView)" deletionDescription="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20category']" semanticElements="service:getComponentExchangeByGroupOrientedSemanticElts()" sourceMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Actor'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Deployment']" targetMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Actor'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Deployment']" targetFinderExpression="service:getComponentExchangeByGroupTargets()" targetExpression="service:getComponentExchangeByGroupTarget()">
          <style lineStyle="dash">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
            <centerLabelStyleDescription labelExpression="&lt;%$view.getComponentExchangeLabelByDelegation()%>" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ComponentExchange.gif">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="PAB_ComponentCategory" preconditionExpression="service:isValidABComponentCategoryEdge(sourceView, targetView)" deletionDescription="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20category']" labelDirectEdit="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='edit%20name']" createElements="false" sourceMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_ComponentCategory_Pin'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Deployment'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Actor']" targetMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_ComponentCategory_Pin'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Deployment'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Actor']" targetFinderExpression="service:getComponentCategoryTargets()" sourceFinderExpression="service:getComponentCategorySources()" domainClass="ComponentExchangeCategory" useDomainElement="true">
          <style targetArrow="NoDecoration" sizeComputationExpression="2" centeredSourceMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_ComponentCategory_Pin'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port']" centeredTargetMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_ComponentCategory_Pin'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port']">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription labelExpression="&lt;%computeComponentCategoryLabel()%>">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
          <conditionnalStyles predicateExpression="&lt;%$view.isABComponentCategorySourceOriented() &amp;&amp; !$view.isABComponentCategoryTargetOriented() %>">
            <style sourceArrow="InputArrow" targetArrow="NoDecoration" sizeComputationExpression="2" centeredSourceMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_ComponentCategory_Pin'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port']" centeredTargetMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_ComponentCategory_Pin'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port']">
              <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <centerLabelStyleDescription labelExpression="&lt;%computeComponentCategoryLabel()%>">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </centerLabelStyleDescription>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="&lt;%!$view.isABComponentCategorySourceOriented() &amp;&amp; $view.isABComponentCategoryTargetOriented() %>">
            <style sizeComputationExpression="2" centeredSourceMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_ComponentCategory_Pin'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port']" centeredTargetMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_ComponentCategory_Pin'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port']">
              <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <centerLabelStyleDescription labelExpression="&lt;%computeComponentCategoryLabel()%>">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </centerLabelStyleDescription>
            </style>
          </conditionnalStyles>
        </edgeMappings>
        <edgeMappings name="PAB_PhysicalCategory" preconditionExpression="service:isValidABPhysicalCategoryEdge(sourceView, targetView)" deletionDescription="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20category']" labelDirectEdit="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='edit%20name']" createElements="false" sourceMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_PhysicalCategory_Pin'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Deployment'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Actor'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction']/@borderedNodeMappings[name='PAB_Pin'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_ComponentCategory_Pin']" targetMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_PhysicalCategory_Pin'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Deployment'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Actor'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction']/@borderedNodeMappings[name='PAB_Pin'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_ComponentCategory_Pin']" targetFinderExpression="service:getPhysicalCategoryTargets()" sourceFinderExpression="service:getPhysicalCategorySources()" domainClass="PhysicalLinkCategory" useDomainElement="true">
          <style targetArrow="NoDecoration" sizeComputationExpression="2" centeredSourceMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_ComponentCategory_Pin'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_PhysicalCategory_Pin'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction']/@borderedNodeMappings[name='PAB_Pin'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port']" centeredTargetMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_ComponentCategory_Pin'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_PhysicalCategory_Pin'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction']/@borderedNodeMappings[name='PAB_Pin'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port']">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='red']"/>
            <centerLabelStyleDescription labelExpression="&lt;%computePhysicalCategoryLabel()%>">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="PAB_ComputedComponentExchange" preconditionExpression="service:isValidComputedComponentExchangeEdge(sourceView, targetView)" deletionDescription="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Function%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20SF']" labelDirectEdit="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='edit%20name']" semanticCandidatesExpression="service:diagram.getComputedComponentExchangeSemanticCandidates" semanticElements="var:self" sourceMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Actor'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Deployment']" targetMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Actor'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Deployment']" targetFinderExpression="service:getComputedComponentExchangeTarget(diagram)" sourceFinderExpression="service:getComputedComponentExchangeSource(diagram)" domainClass="ComponentExchange" useDomainElement="true" reconnections="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Reconnect%20ComponentExchange%20Source'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Reconnect%20ComponentExchange%20Target']">
          <style lineStyle="dash" targetArrow="NoDecoration" centeredSourceMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port']" centeredTargetMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port']">
            <strokeColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']"/>
            <centerLabelStyleDescription labelExpression="&lt;%getComponentExchangeLabel($diagram)%>">
              <labelColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="PAB_ComputedPhysicalLink" preconditionExpression="service:isValidComputedPhysicalLinkEdge(sourceView, targetView)" deletionDescription="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Function%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20SF']" labelDirectEdit="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='edit%20name']" semanticCandidatesExpression="service:diagram.getComputedPhysicalLinkSemanticCandidates" semanticElements="var:self" sourceMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Deployment'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Actor']" targetMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Deployment'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Actor']" targetFinderExpression="service:getComputedPhysicalLinkTarget(diagram)" sourceFinderExpression="service:getComputedPhysicalLinkSource(diagram)" domainClass="PhysicalLink" useDomainElement="true" reconnections="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Reconnect%20PhysicalLink%20Source'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Reconnect%20PhysicalLink%20Target']">
          <style lineStyle="dash" targetArrow="NoDecoration" centeredSourceMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port']" centeredTargetMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port']">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='red']"/>
            <centerLabelStyleDescription labelExpression="&lt;%getPhysicalLinkCenterLabel($diagram)%>">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='red']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <containerMappings name="PAB_PC" navigationDescriptions="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Navigate%20from%20PAB%20to%20PAB'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Navigate%20from%20PAB%20to%20IDB'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Navigate%20from%20PAB%20to%20CCII'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Navigate%20from%20PAB%20to%20CCEI'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Navigate%20from%20PAB%20to%20CCDI'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Navigate%20from%20PAB%20to%20PCB']" preconditionExpression="&lt;%!getComponentType().isA(&quot;AbstractActor&quot;)%>" deletionDescription="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20SF']" labelDirectEdit="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='edit%20name']" semanticCandidatesExpression="" createElements="false" semanticElements="service:getPartSemanticElements()" domainClass="cs.Part" dropDescriptions="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.2/@ownedTools[name='D%26D%20Function%20Allocation%20From%20Project%20Explorer'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='DnD%20AB%20Deployment'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.2/@ownedTools[name='DnD%20AB%20AbstractFunction%20Allocation'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='DnD%20AB%20Component'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='DnD%20AB%20ComponentPort'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20Components%20From%20Project%20Explorer'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20PhysicalPort']" reusedNodeMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_ControlFunction'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_Dummy']" reusedContainerMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Deployment'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']">
          <detailDescriptions xsi:type="tool_1:DiagramCreationDescription" href="#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Component%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='Physical%20Component%20Breakdown']"/>
          <detailDescriptions xsi:type="tool_1:DiagramCreationDescription" href="#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Physical%20Architecture%20Blank']"/>
          <detailDescriptions xsi:type="tool_1:DiagramCreationDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='Contextual%20Component%20Detailed%20Interfaces']"/>
          <detailDescriptions xsi:type="tool_1:DiagramCreationDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='Contextual%20Component%20External%20Interfaces']"/>
          <detailDescriptions xsi:type="tool_1:DiagramCreationDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='Contextual%20Component%20Internal%20Interfaces']"/>
          <detailDescriptions xsi:type="tool_1:DiagramCreationDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Interfaces%20Diagram%20Blank']"/>
          <detailDescriptions xsi:type="description_1:TableCreationDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interface%20Delegations']/@ownedRepresentationCreationDescriptions[name='Interface%20delegations']"/>
          <borderedNodeMappings name="PAB_Port" preconditionExpression="service:isValidABComponentPort(containerView)" deletionDescription="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20SF']" labelDirectEdit="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='edit%20name']" semanticCandidatesExpression="&lt;%getComponentType().ownedFeatures[isA(&quot;Port&quot;) &amp;&amp; !(isA(&quot;FunctionPort&quot;))]%>" domainClass="Port">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="&lt;%computeLabel()%>" hideLabelByDefault="true" sizeComputationExpression="1" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/StandardPortSmall.png">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
            <conditionnalStyles predicateExpression="service:isAPhysicalPort()">
              <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression="&lt;%computeLabel()%>" hideLabelByDefault="true" sizeComputationExpression="1">
                <borderColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Class_Border_Brown']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <color xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_PhysicalPort_Yellow']"/>
              </style>
            </conditionnalStyles>
            <conditionnalStyles predicateExpression="service:isStandardPort()">
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="&lt;%computeLabel()%>" hideLabelByDefault="true" sizeComputationExpression="1" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/StandardPortSmall.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </conditionnalStyles>
            <conditionnalStyles predicateExpression="service:isInStrictFlowPort()">
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="&lt;%computeLabel()%>" hideLabelByDefault="true" sizeComputationExpression="1" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/InFlowPort.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </conditionnalStyles>
            <conditionnalStyles predicateExpression="service:isOutStrictFlowPort()">
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="&lt;%computeLabel()%>" hideLabelByDefault="true" sizeComputationExpression="1" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/OutFlowPort.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </conditionnalStyles>
            <conditionnalStyles predicateExpression="service:isInoutStrictFlowPort()">
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="&lt;%computeLabel()%>" hideLabelByDefault="true" sizeComputationExpression="1" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/FlowPort.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </conditionnalStyles>
          </borderedNodeMappings>
          <borderedNodeMappings name="PAB_ComponentCategory_Pin" preconditionExpression="service:isValidABComponentCategoryPort(containerView)" deletionDescription="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20category']" createElements="false" domainClass="ComponentExchangeCategory">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="&lt;%computeComponentCategoryLabel()%>" hideLabelByDefault="true" sizeComputationExpression="1" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/FlowPort.png">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
            <conditionnalStyles predicateExpression="service:isABComponentCategoryPortStandard(view)">
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="&lt;%computeComponentCategoryLabel()%>" hideLabelByDefault="true" sizeComputationExpression="1" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/StandardPortSmall.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </conditionnalStyles>
            <conditionnalStyles predicateExpression="service:isABComponentCategoryPortIn(view)">
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="&lt;%computeComponentCategoryLabel()%>" hideLabelByDefault="true" sizeComputationExpression="1" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/InFlowPort.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </conditionnalStyles>
            <conditionnalStyles predicateExpression="service:isABComponentCategoryPortOut(view)">
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="&lt;%computeComponentCategoryLabel()%>" hideLabelByDefault="true" sizeComputationExpression="1" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/OutFlowPort.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </conditionnalStyles>
            <conditionnalStyles predicateExpression="service:isABComponentCategoryPortInOut(view)">
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="&lt;%computeComponentCategoryLabel()%>" hideLabelByDefault="true" sizeComputationExpression="1" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/FlowPort.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </conditionnalStyles>
          </borderedNodeMappings>
          <borderedNodeMappings name="PAB_PhysicalCategory_Pin" preconditionExpression="service:isValidABPhysicalCategoryPort(containerView)" deletionDescription="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20category']" createElements="false" domainClass="PhysicalLinkCategory">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression="&lt;%computePhysicalCategoryLabel()%>" hideLabelByDefault="true" sizeComputationExpression="1">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='red']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='yellow']"/>
            </style>
          </borderedNodeMappings>
          <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" labelExpression="&lt;%computePartLabel()%>" backgroundStyle="GradientTopToBottom">
            <borderColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow_Border']"/>
            <labelColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow_Label']"/>
            <backgroundColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow_min']"/>
            <foregroundColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow']"/>
          </style>
          <conditionnalStyles predicateExpression="&lt;% (getComponentType().nature == &quot;BEHAVIOR&quot;) &amp;&amp; (getComponentType().abstract==false) %>">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" labelExpression="&lt;%computePartLabel()%>" backgroundStyle="GradientTopToBottom">
              <borderColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']"/>
              <labelColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Label_Blue']"/>
              <backgroundColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue_min']"/>
              <foregroundColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="&lt;%(getComponentType().abstract==true) &amp;&amp; (getComponentType().nature != &quot;NODE&quot;)%>">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" labelExpression="&lt;%computePartLabel()%>" backgroundStyle="GradientTopToBottom">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
              <labelFormat>italic</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
              <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
            </style>
          </conditionnalStyles>
        </containerMappings>
        <containerMappings name="PAB_Actor" navigationDescriptions="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Navigate%20from%20PAB%20to%20PAB'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Navigate%20from%20PAB%20to%20IDB'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Navigate%20from%20PAB%20to%20CCII'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Navigate%20from%20PAB%20to%20CCEI'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Navigate%20from%20PAB%20to%20CCDI'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Navigate%20from%20PAB%20to%20PCB']" preconditionExpression="&lt;%getComponentType().isA(&quot;AbstractActor&quot;)%>" deletionDescription="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20SF']" labelDirectEdit="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='edit%20name']" semanticCandidatesExpression="" createElements="false" semanticElements="service:getPartSemanticElements()" domainClass="cs.Part" reusedBorderedNodeMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_ComponentCategory_Pin'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_PhysicalCategory_Pin']" dropDescriptions="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='DnD%20AB%20Deployment'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='DnD%20AB%20ComponentPort'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.2/@ownedTools[name='DnD%20AB%20AbstractFunction%20Allocation'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.2/@ownedTools[name='D%26D%20Function%20Allocation%20From%20Project%20Explorer'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20PhysicalPort']" reusedNodeMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_Dummy'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_ControlFunction']" reusedContainerMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Deployment'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']">
          <detailDescriptions xsi:type="tool_1:DiagramCreationDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='Contextual%20Component%20Detailed%20Interfaces']"/>
          <detailDescriptions xsi:type="tool_1:DiagramCreationDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='Contextual%20Component%20External%20Interfaces']"/>
          <detailDescriptions xsi:type="tool_1:DiagramCreationDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='Contextual%20Component%20Internal%20Interfaces']"/>
          <detailDescriptions xsi:type="tool_1:DiagramCreationDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Interfaces%20Diagram%20Blank']"/>
          <detailDescriptions xsi:type="description_1:TableCreationDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interface%20Delegations']/@ownedRepresentationCreationDescriptions[name='Interface%20delegations']"/>
          <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" labelExpression="&lt;%computePartLabel()%>" backgroundStyle="GradientTopToBottom">
            <borderColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Label_Blue']"/>
            <labelColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']"/>
            <backgroundColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_min']"/>
            <foregroundColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue']"/>
          </style>
          <conditionnalStyles predicateExpression="&lt;% (getComponentType().nature == &quot;NODE&quot;) &amp;&amp; (getComponentType().abstract==true) %>">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" labelExpression="&lt;%computePartLabel()%>" backgroundStyle="GradientTopToBottom">
              <borderColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow_Border']"/>
              <labelFormat>italic</labelFormat>
              <labelColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow_Label']"/>
              <backgroundColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow_min']"/>
              <foregroundColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="&lt;% getComponentType().abstract==true %>">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" labelExpression="&lt;%computePartLabel()%>" backgroundStyle="GradientTopToBottom">
              <borderColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
              <labelFormat>italic</labelFormat>
              <labelColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
              <backgroundColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_min']"/>
              <foregroundColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue']"/>
            </style>
          </conditionnalStyles>
        </containerMappings>
        <containerMappings name="PAB_Deployment" navigationDescriptions="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Navigate%20from%20PAB%20to%20PAB'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Navigate%20from%20PAB%20to%20IDB'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Navigate%20from%20PAB%20to%20CCII'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Navigate%20from%20PAB%20to%20CCEI'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Navigate%20from%20PAB%20to%20CCDI'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Navigate%20from%20PAB%20to%20PCB']" preconditionExpression="&lt;%$containerView.filter(&quot;DNodeContainer&quot;).nSize() > 0 %>" deletionDescription="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20SF']" labelDirectEdit="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='edit%20name']" semanticCandidatesExpression="service:getDeployedComponents()" createElements="false" domainClass="DeployableElement" reusedBorderedNodeMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_ComponentCategory_Pin'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_PhysicalCategory_Pin']" dropDescriptions="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.2/@ownedTools[name='D%26D%20Function%20Allocation%20From%20Project%20Explorer'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='DnD%20AB%20Deployment'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.2/@ownedTools[name='DnD%20AB%20AbstractFunction%20Allocation'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='DnD%20AB%20ComponentPort'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='DnD%20AB%20Component']" reusedNodeMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_ControlFunction'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_Dummy']" reusedContainerMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Deployment']">
          <detailDescriptions xsi:type="tool_1:DiagramCreationDescription" href="#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Component%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='Physical%20Component%20Breakdown']"/>
          <detailDescriptions xsi:type="tool_1:DiagramCreationDescription" href="#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Physical%20Architecture%20Blank']"/>
          <detailDescriptions xsi:type="tool_1:DiagramCreationDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='Contextual%20Component%20Detailed%20Interfaces']"/>
          <detailDescriptions xsi:type="tool_1:DiagramCreationDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='Contextual%20Component%20External%20Interfaces']"/>
          <detailDescriptions xsi:type="tool_1:DiagramCreationDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='Contextual%20Component%20Internal%20Interfaces']"/>
          <detailDescriptions xsi:type="tool_1:DiagramCreationDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Interfaces%20Diagram%20Blank']"/>
          <detailDescriptions xsi:type="description_1:TableCreationDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interface%20Delegations']/@ownedRepresentationCreationDescriptions[name='Interface%20delegations']"/>
          <style xsi:type="style:FlatContainerStyleDescription" arcWidth="18" arcHeight="18" borderSizeComputationExpression="1" labelExpression="&lt;%computePartLabel()%>" roundedCorner="true" backgroundStyle="GradientTopToBottom">
            <borderColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']"/>
            <labelFormat>italic</labelFormat>
            <labelColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Label_Blue']"/>
            <backgroundColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue_min']"/>
            <foregroundColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue']"/>
          </style>
          <conditionnalStyles predicateExpression="&lt;% getComponentType().nature == &quot;NODE&quot; %>">
            <style xsi:type="style:FlatContainerStyleDescription" arcWidth="18" arcHeight="18" borderSizeComputationExpression="1" labelExpression="&lt;%computePartLabel()%>" roundedCorner="true" backgroundStyle="GradientTopToBottom">
              <borderColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow_Border']"/>
              <labelFormat>italic</labelFormat>
              <labelColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow_Label']"/>
              <backgroundColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow_min']"/>
              <foregroundColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow']"/>
            </style>
          </conditionnalStyles>
        </containerMappings>
        <reusedMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_ContrainedElements']"/>
        <reusedMappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']"/>
        <reusedMappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV']"/>
        <reusedMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_PVconnector']"/>
        <reusedMappings xsi:type="description_2:ContainerMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG']"/>
        <reusedMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_PVGconnector']"/>
        <toolSections name="Node" label="Node Components">
          <ownedTools xsi:type="tool_1:ToolGroup" name="Node">
            <tools xsi:type="tool_1:ContainerCreationDescription" documentation="Creates a new Physical Component with a Kind NODE  and a Part typed by this Physical Component. The Part is created in the Component target of the click." name="Node PC" precondition="&lt;%$containerView.isValidCreationABNodePC()%>" containerMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/PhysicalComponentNode.gif">
              <variable name="container">
                <subVariables xsi:type="tool:AcceleoVariable" name="containerType" computationExpression="&lt;% $container.getComponentType() %>"/>
                <subVariables xsi:type="tool:AcceleoVariable" name="nature" computationExpression="NODE"/>
              </variable>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $containerView.getABTarget().getComponentType() %>">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%createComponent(&quot;component&quot;)%>"/>
                  <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%$component!=null%>">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$component%>">
                      <subModelOperations xsi:type="tool:SetValue" featureName="nature" valueExpression="&lt;%$nature%>"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:CreateInstance" typeName="cs.Part" referenceName="ownedFeatures" variableName="part">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%creationService%>"/>
                      <subModelOperations xsi:type="tool:SetValue" featureName="abstractType" valueExpression="&lt;% $component %>"/>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_1:ContainerCreationDescription" documentation="[Reusable Component] Creates a new Part of an existing Node Physical Component into the targeted element." name="Reuse Node PC" label="Reuse PC" precondition="&lt;%$containerView.isValidCreationABReuseNodePC()%>" containerMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Insert.gif">
              <filters precondition="&lt;%!isPreferenceEnabled(&quot;multipart.allowed&quot;)%>" elementsToListen="&lt;%getPreferenceListener()%>">
                <listeners domainClass="org.polarsys.capella.core.preferences.Listener" featureName="multipart.allowed"/>
              </filters>
              <variable name="container">
                <subVariables xsi:type="tool:AcceleoVariable" name="nature" computationExpression="NODE"/>
              </variable>
              <viewVariable name="containerView">
                <subVariables xsi:type="tool:AcceleoVariable" name="diagram" computationExpression="&lt;% $containerView.getDiagramContainer() %>"/>
                <subVariables xsi:type="tool:AcceleoVariable" name="containerType" computationExpression="&lt;% $containerView.getABTarget().getComponentType() %>"/>
                <subVariables xsi:type="tool:AcceleoVariable" name="containerTarget" computationExpression="&lt;% $containerView.getABTarget() %>"/>
              </viewVariable>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $containerType %>">
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="select Components" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                    <parameters name="context" value="&lt;% $containerType %>"/>
                    <parameters name="scope" value="&lt;% $containerType.getABInsertComponent%>"/>
                    <parameters name="multiple" value="true"/>
                    <parameters name="resultVariable" value="components"/>
                    <parameters name="wizardMessage" value="Select Components."/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% $components != &quot;WIZARD_CANCELED&quot; %>">
                    <subModelOperations xsi:type="tool:For" expression="&lt;%$components%>">
                      <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% $containerTarget.isA(&quot;BlockArchitecture&quot;) %>">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $containerTarget.getContext() %>">
                          <subModelOperations xsi:type="tool:CreateInstance" typeName="cs.Part" referenceName="ownedFeatures" variableName="part">
                            <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%creationService%>"/>
                            <subModelOperations xsi:type="tool:SetValue" featureName="abstractType" valueExpression="&lt;%$i%>"/>
                          </subModelOperations>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% !$containerTarget.isA(&quot;BlockArchitecture&quot;) %>">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$containerType%>">
                          <subModelOperations xsi:type="tool:CreateInstance" typeName="cs.Part" referenceName="ownedFeatures" variableName="part">
                            <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%creationService%>"/>
                            <subModelOperations xsi:type="tool:SetValue" featureName="abstractType" valueExpression="&lt;%$i%>"/>
                          </subModelOperations>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$containerView.getDiagramContainer().forceRefresh%>"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_1:ContainerCreationDescription" documentation="Creates a new Physlcal Component with a Kind NODE and deployed on the target Node Physical Component. " name="Deploy Node PC" precondition="&lt;%$containerView.isValidCreationABDeployNodePC()%>" containerMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Deployment']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/PhysicalComponentNode.gif" extraMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Deployment'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']">
              <variable name="container">
                <subVariables xsi:type="tool:AcceleoVariable" name="nature" computationExpression="NODE"/>
                <subVariables xsi:type="tool:AcceleoVariable" name="containerType" computationExpression="&lt;% $container.getComponentType() %>"/>
              </variable>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% eContainer (&quot;PhysicalArchitecture&quot;).ownedPhysicalComponent %>">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%createComponent(&quot;component&quot;)%>"/>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$component%>">
                    <subModelOperations xsi:type="tool:SetValue" featureName="nature" valueExpression="&lt;%$nature%>"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="cs.Part" referenceName="ownedFeatures" variableName="part">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%creationService%>"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="abstractType" valueExpression="&lt;% $component %>"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$container%>">
                    <subModelOperations xsi:type="tool:CreateInstance" typeName="PartDeploymentLink" referenceName="ownedDeploymentLinks" variableName="tdl">
                      <subModelOperations xsi:type="tool:SetValue" featureName="deployedElement" valueExpression="&lt;%$component.representingPartitions.nGet(0)%>"/>
                      <subModelOperations xsi:type="tool:SetValue" featureName="location" valueExpression="&lt;%$container%>"/>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolGroup" name="Physical Actor">
            <tools xsi:type="tool_1:ContainerCreationDescription" documentation="Creates a new Physical Actor with a Kind NODE  and a Part typed by this Physical Actor. The Part is created in the Physical Context Element." name="Physical Actor" precondition="&lt;%$containerView.isA(&quot;DDiagram&quot;)%>" containerMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Actor']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/PhysicalActor.gif">
              <variable name="container">
                <subVariables xsi:type="tool:AcceleoVariable" name="containerType" computationExpression="&lt;% $container.getComponentType() %>"/>
              </variable>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%getArchitecture()%>">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%createActor(&quot;actor&quot;)%>"/>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%getArchitecture().getContext()%>">
                    <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%$actor!=null%>">
                      <subModelOperations xsi:type="tool:CreateInstance" typeName="cs.Part" referenceName="ownedFeatures" variableName="part">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%creationService%>"/>
                        <subModelOperations xsi:type="tool:SetValue" featureName="abstractType" valueExpression="&lt;% $actor %>"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_1:ContainerCreationDescription" documentation="[Reusable Components] Creates a new Part of an existing Physical Actor." name="Reuse Physical Actor" label="Reuse Physical Actor" precondition="&lt;%$containerView.isA(&quot;DDiagram&quot;)%>" containerMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Actor']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Insert.gif">
              <filters precondition="&lt;%!isPreferenceEnabled(&quot;multipart.allowed&quot;)%>" elementsToListen="&lt;%getPreferenceListener()%>">
                <listeners domainClass="org.polarsys.capella.core.preferences.Listener" featureName="multipart.allowed"/>
              </filters>
              <variable name="container">
                <subVariables xsi:type="tool:AcceleoVariable" name="containerType" computationExpression="&lt;% $container.getComponentType() %>"/>
              </variable>
              <viewVariable name="containerView">
                <subVariables xsi:type="tool:AcceleoVariable" name="diagram" computationExpression="&lt;% $containerView.getDiagramContainer() %>"/>
              </viewVariable>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$containerType%>">
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="select Components" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                    <parameters name="context" value="&lt;% $containerType %>"/>
                    <parameters name="scope" value="&lt;% $containerType.getABInsertActor %>"/>
                    <parameters name="multiple" value="true"/>
                    <parameters name="resultVariable" value="components"/>
                    <parameters name="wizardMessage" value="Select Actors."/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% $components != &quot;WIZARD_CANCELED&quot; %>">
                    <subModelOperations xsi:type="tool:For" expression="&lt;%$components%>">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$containerType.getArchitecture().getContext()%>">
                        <subModelOperations xsi:type="tool:CreateInstance" typeName="cs.Part" referenceName="ownedFeatures" variableName="part">
                          <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%creationService%>"/>
                          <subModelOperations xsi:type="tool:SetValue" featureName="abstractType" valueExpression="&lt;%$i%>"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$containerView.getDiagramContainer().forceRefresh%>"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool_1:EdgeCreationDescription" documentation="Creates a new Physical Link between the source and target Node Physical Components or Actors." name="Physical Link" precondition="&lt;%isValidCreationABPhysicalLink($preSourceView, $preTargetView) %>" elementsToSelect="var:result" edgeMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='PAB_PhysicalLink']" extraSourceMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Deployment'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Actor']" extraTargetMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Deployment'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Actor']">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$source.createABPhysicalLink($sourceView, $targetView)%>"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:NodeCreationDescription" documentation="Creates a new Physical Port on the target Node Physical Component or Actor." name="Physical Port" precondition="&lt;% $container.getComponentType().nature != &quot;BEHAVIOR&quot; %>" nodeMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/PhysicalPort.gif">
            <variable name="container">
              <subVariables xsi:type="tool:AcceleoVariable" name="containerType" computationExpression="&lt;% $container.getComponentType() %>"/>
            </variable>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $containerType %>">
                <subModelOperations xsi:type="tool:CreateInstance" typeName="PhysicalPort" referenceName="ownedFeatures">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%creationService%>"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:EdgeCreationDescription" documentation="Creates a new Port Allocation from the source Physical Port to the target Component Port." name="ComponentPort Allocation" label="Component Port Allocation" precondition="&lt;%isValidABCreationComponentPortAllocation($preSourceView, $preTargetView)%>" edgeMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='PAB_ComponentPortAllocation']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/PortAllocation.gif" connectionStartPrecondition="&lt;%isValidABCreationComponentPortAllocation($preSourceView)%>">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$source.createABComponentPortAllocation($sourceView, $targetView)%>"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolDescription" documentation="Creates new deployment relationships between selected Node Physical Component and the target Physical Component. The newly deployed Physical Components are automatically displayed on the target Physical Component. This tool modifies the semantic model." name="Manage Node PCs Deployment" precondition="&lt;%$element.isA(&quot;Part&quot;) &amp;&amp; $element.isNode()%>" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Manage.gif">
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool:AcceleoVariable" name="diagram" computationExpression="&lt;%$elementView.getDiagramContainer()%>"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $container %>">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="managePCDeployment" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                  <parameters name="context" value="&lt;% $element %>"/>
                  <parameters name="scope" value="&lt;%$element.getAvailableComponentsToDeploy(&quot;false&quot;)%>"/>
                  <parameters name="resultVariable" value="selectedElements"/>
                  <parameters name="wizardMessage" value="Select the Physical Components to deploy in &lt;%$element.name%>."/>
                  <parameters name="initialSelection" value="&lt;%$element.getDeployedComponents(&quot;false&quot;)%>"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% ! ($selectedElements == &quot;WIZARD_CANCELED&quot;) %>">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView.manageComponentDeployments($selectedElements,&quot;false&quot;)%>"/>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$diagram.forceRefresh%>"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ContainerCreationDescription" documentation="Insert/Remove Node PCs. Creates or deletes graphical objects on the diagrams corresponding to existing Physical Components. Removing a Component graphical object from the diagram does not delete the Component from the model. This tool does not modify the semantic model." name="Show/Hide Components" label="Node PCs" containerMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Deployment']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <filters precondition="&lt;%!isPreferenceEnabled(&quot;multipart.allowed&quot;)%>" elementsToListen="&lt;%getPreferenceListener()%>">
              <listeners domainClass="org.polarsys.capella.core.preferences.Listener" featureName="multipart.allowed"/>
            </filters>
            <variable name="container"/>
            <viewVariable name="containerView">
              <subVariables xsi:type="tool:AcceleoVariable" name="diagram" computationExpression="&lt;% $containerView.eContainer(&quot;DDiagram&quot;) %>"/>
              <subVariables xsi:type="tool:AcceleoVariable" name="scope" computationExpression="&lt;% $containerView.getABShowHideComponent()[getComponentType().nature == &quot;NODE&quot;]  %>"/>
              <subVariables xsi:type="tool:AcceleoVariable" name="ownedNodeContainer" computationExpression="&lt;%$containerView.eAllContents().filter(&quot;DNodeContainer&quot;)[actualMapping.name==&quot;PAB_PC&quot;]%>"/>
            </viewVariable>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $containerType %>">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectSubComponent" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                  <parameters name="context" value="&lt;% $container %>"/>
                  <parameters name="scope" value="&lt;% $scope %>"/>
                  <parameters name="resultVariable" value="selection"/>
                  <parameters name="wizardMessage" value="Select Sub Components to show in &lt;%$container.name%>."/>
                  <parameters name="initialSelection" value="&lt;% getIntersection($ownedNodeContainer[visible &amp;&amp; actualMapping.name==&quot;PAB_PC&quot;].target, $scope)[getComponentType().nature == &quot;NODE&quot;]  %>"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% ! ($selection == &quot;WIZARD_CANCELED&quot;) %>">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $container %>">
                    <subModelOperations xsi:type="tool:For" expression="&lt;% getIntersection(($ownedNodeContainer[visible].target+$diagram.target), $scope) - $selection %>">
                      <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%$ownedNodeContainer[target == $i].nSize()>0%>">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $ownedNodeContainer[target == $i] %>">
                          <subModelOperations xsi:type="tool:DeleteView"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:For" expression="&lt;% $selection %>">
                      <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% $ownedNodeContainer[target == $i].nSize() > 0 %>">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $ownedNodeContainer[target == $i].show %>"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% $ownedNodeContainer[target == $i].nSize() == 0 %>">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $i %>">
                          <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% ($ownedNodeContainer+$containerView)[(target == $i.eContainer || target.type == $i.eContainer)] == null %>">
                            <subModelOperations xsi:type="tool_1:CreateView" mapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']" containerViewExpression="&lt;% $containerView %>"/>
                          </subModelOperations>
                          <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% ($ownedNodeContainer+$containerView)[(target == $i.eContainer || target.type == $i.eContainer)] != null %>">
                            <subModelOperations xsi:type="tool_1:CreateView" mapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']" containerViewExpression="&lt;%($ownedNodeContainer+$containerView)[(target == $i.eContainer || target.type == $i.eContainer)] %>"/>
                          </subModelOperations>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$containerView.getDiagramContainer().forceRefresh%>"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ContainerCreationDescription" documentation="Insert/Remove Node PCs. Creates or deletes graphical objects on the diagrams corresponding to existing Physical Components. Removing a Component graphical object from the diagram does not delete the Component from the model. This tool does not modify the semantic model." name="Insert/remove Components mono part" label="Node PCs" containerMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Deployment']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <filters precondition="&lt;%isPreferenceEnabled(&quot;multipart.allowed&quot;)%>" elementsToListen="&lt;%getPreferenceListener()%>">
              <listeners domainClass="org.polarsys.capella.core.preferences.Listener" featureName="multipart.allowed"/>
            </filters>
            <variable name="container"/>
            <viewVariable name="containerView">
              <subVariables xsi:type="tool:AcceleoVariable" name="diagram" computationExpression="&lt;% $containerView.eContainer(&quot;DDiagram&quot;) %>"/>
              <subVariables xsi:type="tool:AcceleoVariable" name="containerType" computationExpression="&lt;% $containerView.target.getComponentType() %>"/>
              <subVariables xsi:type="tool:AcceleoVariable" name="componentsInDiagram" computationExpression="&lt;% getIntersection($containerView.containers[visible &amp;&amp; actualMapping.name == &quot;PAB_PC&quot;].target.filter(&quot;Part&quot;).getComponentType, $containerView.getABShowHideComponent())[nature == &quot;NODE&quot;] %>"/>
            </viewVariable>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $container %>">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectSubComponents" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                  <parameters name="context" value="&lt;% $container %>"/>
                  <parameters name="scope" value="&lt;% $containerView.getABShowHideComponent()[nature == &quot;NODE&quot;] %>"/>
                  <parameters name="resultVariable" value="selection"/>
                  <parameters name="wizardMessage" value="Select Components to show in &lt;%$container.name%>."/>
                  <parameters name="initialSelection" value="&lt;% $componentsInDiagram %>"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% ! ($selection == &quot;WIZARD_CANCELED&quot;) %>">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $container %>">
                    <subModelOperations xsi:type="tool:For" expression="&lt;% $componentsInDiagram - $containerView.target.getComponentType() %>">
                      <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%! $selection.nContains($i)%>">
                        <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% $containerView.containers[(actualMapping.name == &quot;PAB_PC&quot;) &amp;&amp; (target.getComponentType == $i)].nSize > 0 %>">
                          <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $containerView.containers[(actualMapping.name == &quot;PAB_PC&quot;) &amp;&amp; (target.getComponentType() == $i)].nFirst %>">
                            <subModelOperations xsi:type="tool:DeleteView"/>
                          </subModelOperations>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:For" expression="&lt;% $selection %>">
                      <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%!$componentsInDiagram.nContains($i)%>">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $i.representingPartitions.filter(&quot;Part&quot;).nFirst() %>">
                          <subModelOperations xsi:type="tool_1:CreateView" mapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']" containerViewExpression="&lt;% $containerView %>"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$containerView.getDiagramContainer().forceRefresh%>"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ContainerCreationDescription" documentation="Insert/Remove Actors. Creates or deletes graphical objects corresponding to existing Physical Actors. Removing an Actor graphical object from the diagram does not delete the Actor from the model. This tool does not modify the semantic model." name="Show/Hide Actors" label="Actors" containerMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Actor']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <variable name="container"/>
            <viewVariable name="containerView">
              <subVariables xsi:type="tool:AcceleoVariable" name="diagram" computationExpression="&lt;% $containerView.eContainer(&quot;DDiagram&quot;) %>"/>
              <subVariables xsi:type="tool:AcceleoVariable" name="containerType" computationExpression="&lt;% $containerView.target.getComponentType() %>"/>
              <subVariables xsi:type="tool:AcceleoVariable" name="scope" computationExpression="&lt;% $containerView.getABShowHideActor()%>"/>
              <subVariables xsi:type="tool:AcceleoVariable" name="ownedNodeContainer" computationExpression="&lt;%$containerView.eAllContents().filter(&quot;DNodeContainer&quot;)%>"/>
            </viewVariable>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $containerType %>">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectSubComponent" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                  <parameters name="context" value="&lt;% $container %>"/>
                  <parameters name="scope" value="&lt;% $scope %>"/>
                  <parameters name="resultVariable" value="selection"/>
                  <parameters name="wizardMessage" value="Select Sub Components to show in &lt;%$container.name%>."/>
                  <parameters name="initialSelection" value="&lt;% getIntersection($ownedNodeContainer[visible].target, $scope) %>"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% ! ($selection == &quot;WIZARD_CANCELED&quot;) %>">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $container %>">
                    <subModelOperations xsi:type="tool:For" expression="&lt;% getIntersection(($ownedNodeContainer[visible].target+$diagram.target), $scope) - $selection %>">
                      <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% $ownedNodeContainer[target == $i].nSize()>0 %>">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $ownedNodeContainer[target == $i] %>">
                          <subModelOperations xsi:type="tool:DeleteView"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:For" expression="&lt;% $selection %>">
                      <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% $ownedNodeContainer[target == $i].nSize() > 0 %>">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $ownedNodeContainer[target == $i].show %>"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% $ownedNodeContainer[target == $i].nSize() == 0 %>">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $i %>">
                          <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% ($ownedNodeContainer+$containerView)[(target == $i.eContainer || target.type == $i.eContainer)] == null %>">
                            <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% $containerView.isA(&quot;DDiagram&quot;) %>">
                              <subModelOperations xsi:type="tool_1:CreateView" mapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Actor']" containerViewExpression="&lt;% $containerView %>"/>
                            </subModelOperations>
                          </subModelOperations>
                          <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% ($ownedNodeContainer+$containerView)[(target == $i.eContainer || target.type == $i.eContainer)] != null %>">
                            <subModelOperations xsi:type="tool_1:CreateView" mapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Actor']" containerViewExpression="&lt;%($ownedNodeContainer+$containerView)[(target == $i.eContainer || target.type == $i.eContainer)] %>"/>
                          </subModelOperations>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$containerView.getDiagramContainer().forceRefresh%>"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolGroup" name="Show Hide Deployed PCs">
            <tools xsi:type="tool_1:ContainerCreationDescription" documentation="Insert/Remove Deployed PCs. Creates or delete graphical objects corresponding to already deployed Physical Components. Removing a Physical Component graphical object from the deploying Physical Component or Actor does not delete the deployment relationship towards the Physical Component. This tool does not modify the semantic model." name="Show/Hide Deployed Components" label="Deployed PCs" containerMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Deployment']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $container %>">
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectSubComponents" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                    <parameters name="context" value="&lt;% $container %>"/>
                    <parameters name="scope" value="&lt;% getDeployedComponents() %>"/>
                    <parameters name="resultVariable" value="selection"/>
                    <parameters name="wizardMessage" value="Select deployed Components to show in &lt;%$container.name%>."/>
                    <parameters name="initialSelection" value="&lt;% getIntersection($containerView.eAllContents().filter(&quot;DNodeContainer&quot;)[visible &amp;&amp; actualMapping.name==&quot;PAB_Deployment&quot;].target, deploymentLinks.deployedElement) %>"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% ! ($selection == &quot;WIZARD_CANCELED&quot;) %>">
                    <subModelOperations xsi:type="tool:For" expression="&lt;%$containerView.eContents().filter(&quot;DNodeContainer&quot;)[visible].target.filter(&quot;Part&quot;)[deployingLinks.nSize > 0] - $selection%>">
                      <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% $containerView.eAllContents().filter(&quot;DNodeContainer&quot;)[target == $i &amp;&amp; actualMapping.name==&quot;PAB_Deployment&quot;].nSize()>0 %>">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $containerView.eAllContents().filter(&quot;DNodeContainer&quot;)[target == $i &amp;&amp; actualMapping.name==&quot;PAB_Deployment&quot;] %>">
                          <subModelOperations xsi:type="tool:DeleteView"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:For" expression="&lt;%$selection%>">
                      <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% $containerView.eAllContents().filter(&quot;DNodeContainer&quot;)[target == $i &amp;&amp; actualMapping.name==&quot;PAB_Deployment&quot;].nSize() > 0 %>">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $containerView.eAllContents().filter(&quot;DNodeContainer&quot;)[target == $i &amp;&amp; actualMapping.name==&quot;PAB_Deployment&quot;].show %>"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% $containerView.eAllContents().filter(&quot;DNodeContainer&quot;)[target == $i &amp;&amp; actualMapping.name==&quot;PAB_Deployment&quot;].nSize() == 0 %>">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $i %>">
                          <subModelOperations xsi:type="tool_1:CreateView" mapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Deployment']" containerViewExpression="&lt;%$containerView%>"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$containerView.getDiagramContainer().forceRefresh%>"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:ToolDescription" documentation="Insert All Deployed PCs. Creates graphical objects for all Physical Component already deployed on all Physical Components and Actors appearing on the diagram. This tool does not modify the semantic model." name="Insert All Deployed PCs" label="All Deployed PCs" precondition="&lt;%$element.isA(&quot;Part&quot;) || $element.isA(&quot;Component&quot;)%>" forceRefresh="true" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Insert.gif">
              <element name="element">
                <subVariables xsi:type="tool:AcceleoVariable" name="containerType" computationExpression="&lt;% $element.getComponentType() %>"/>
              </element>
              <elementView name="elementView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView%>">
                  <subModelOperations xsi:type="tool:For" expression="&lt;%$elementView.getAllContainers()[(target.filter(&quot;Component&quot;).nSize()>0 || target.filter(&quot;Part&quot;).nSize()>0)] %>">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$i%>">
                      <subModelOperations xsi:type="tool:For" expression="&lt;%$i.target.getDeployedComponents()%>" iteratorName="j">
                        <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%!$i.ownedDiagramElements[actualMapping.name == &quot;PAB_Deployment&quot;].target.nContains($j)%>">
                          <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$j%>">
                            <subModelOperations xsi:type="tool_1:CreateView" mapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Deployment']" containerViewExpression="&lt;%$i%>"/>
                          </subModelOperations>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolGroup" name="Show/Hide PhysicalLinks and Categories">
            <tools xsi:type="tool:ToolDescription" documentation="Creates or deletes graphical objects corresponding to existing Physical Links. The proposed Physical Links are the one incoming and outgoing from the Component target of the click. Opposite Components / Actors might be displayed on the diagram as well if they are not yet represented. This tool does not modify the semantic model." name="Show/Hide Physical Links" label="Physical Links" precondition="&lt;%($elementView.target.isA(&quot;Part&quot;) &amp;&amp; $elementView.target.getComponentType().isA(&quot;Component&quot;)) &amp;&amp; ($elementView.filter(&quot;DDiagram&quot;).nSize() == 0)%>" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
              <element name="element"/>
              <elementView name="elementView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView%>">
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="SetVariable $displayedLinks" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                    <parameters name="context" value="&lt;%$elementView%>"/>
                    <parameters name="variable" value="displayedLinks"/>
                    <parameters name="value" value="&lt;%$elementView.getDisplayedPhysicalLinks%>"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectExchanges" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectLinksFromTransferWizard">
                    <parameters name="context" value="&lt;% $element%>"/>
                    <parameters name="scope" value="&lt;%getAvailablePhysicalLinksToInsert($diagram)%>"/>
                    <parameters name="initialSelection" value="&lt;%$displayedLinks%>"/>
                    <parameters name="resultVariable" value="selectedExchanges"/>
                    <parameters name="wizardMessage" value="Select Physical Links to show in &lt;%$element.name%>."/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%($selectedExchanges != &quot;WIZARD_CANCELED&quot;)%>">
                    <subModelOperations xsi:type="tool:For" expression="&lt;%$selectedExchanges%>">
                      <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%! $displayedLinks.nContains($i)%>">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$i.showABPhysicalLink($elementView)%>"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:For" expression="&lt;%$displayedLinks%>">
                      <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%! $selectedExchanges.nContains($i)%>">
                        <subModelOperations xsi:type="tool:For" expression="&lt;%$elementView.getDiagramContainer().edges[target == $i]%>" iteratorName="e">
                          <subModelOperations xsi:type="tool:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                            <parameters name="context" value="&lt;% $elementView%>"/>
                            <parameters name="variable" value="edgeToDelete"/>
                            <parameters name="value" value="&lt;%$e%>"/>
                          </subModelOperations>
                          <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$edgeToDelete%>">
                            <subModelOperations xsi:type="tool:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                              <parameters name="context" value="&lt;% $elementView%>"/>
                              <parameters name="variable" value="sourceNode"/>
                              <parameters name="value" value="&lt;% $edgeToDelete.sourceNode %>"/>
                            </subModelOperations>
                            <subModelOperations xsi:type="tool:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                              <parameters name="context" value="&lt;% $elementView%>"/>
                              <parameters name="variable" value="targetNode"/>
                              <parameters name="value" value="&lt;% $edgeToDelete.targetNode %>"/>
                            </subModelOperations>
                            <subModelOperations xsi:type="tool:DeleteView"/>
                          </subModelOperations>
                          <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%$sourceNode.isABorderedNode()%>">
                            <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$sourceNode%>">
                              <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%($sourceNode.getIncomingEdges.nSize() == 0) &amp;&amp; ($sourceNode.getOutgoingEdges.nSize() == 0)%>">
                                <subModelOperations xsi:type="tool:DeleteView"/>
                              </subModelOperations>
                            </subModelOperations>
                          </subModelOperations>
                          <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%$targetNode.isABorderedNode()%>">
                            <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$targetNode%>">
                              <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%($targetNode.getIncomingEdges.nSize() == 0) &amp;&amp; ($targetNode.getOutgoingEdges.nSize() == 0)%>">
                                <subModelOperations xsi:type="tool:DeleteView"/>
                              </subModelOperations>
                            </subModelOperations>
                          </subModelOperations>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView.getDiagramContainer().forceRefresh%>"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:ToolDescription" documentation="Insert/Remove Physical Paths. Creates or delete graphical objects corresponding to existing Physical Paths. Removing a Physical Path graphical object from a diagram does not delete the Physical Path from the model. This tool does not modify the semantic model." name="Show/Hide Physical Path" label="Physical Path" precondition="&lt;%$elementView.filter(&quot;DDiagram&quot;).nSize() > 0%>" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
              <element name="element"/>
              <elementView name="elementView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView%>">
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectPaths" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectLinksFromTransferWizard">
                    <parameters name="context" value="&lt;% $element%>"/>
                    <parameters name="scope" value="&lt;%getAvailablePhysicalPathsToInsert($diagram)%>"/>
                    <parameters name="initialSelection" value="&lt;%$elementView.getDisplayedPhysicalPaths()%>"/>
                    <parameters name="resultVariable" value="selectedPaths"/>
                    <parameters name="wizardMessage" value="Select Physical Paths to show in &lt;%$element.name%>."/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%($selectedPaths != &quot;WIZARD_CANCELED&quot;)%>">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%showHidePhysicalPaths($selectedPaths, $elementView)%>"/>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView.getDiagramContainer().forceRefresh%>"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:ToolDescription" documentation="[Available only when the diagram is unsynchronized] Insert/Remove Categorized Physical Links. Create or delete graphical objects corresponding to already existing Categorized Physical Links and the corresponding source/target Parts if they are not present on the diagram yet. Removing a Categorized Physical Link graphical object from the diagram does not delete the Physical Link from the model. This tool does not modify the semantic model." name="Show/Hide Physical Category" label="Categories" precondition="&lt;%isValidShowHideABPhysicalCategory($elementView)%>" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
              <filters precondition="feature:synchronized" elementsToListen="&lt;%current%>">
                <listeners domainClass="DDiagram" featureName="synchronized"/>
              </filters>
              <element name="element"/>
              <elementView name="elementView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $elementView %>">
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectExchangeCategories" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromCheckBoxWizard">
                    <parameters name="context" value="&lt;% $elementView %>"/>
                    <parameters name="type" value="PHYSICAL_CATEGORY"/>
                    <parameters name="resultVariable" value="selectedElements"/>
                    <parameters name="wizardMessage" value="Select Categories and targeted elements"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:ToolDescription" documentation="Switch between the representation of individual Physical Links and their representation as Category-based Physical Links." name="Switch Physical Categories" label="Switch Physical Links / Categories" precondition="&lt;%isValidSwitchABPhysicalCategory($elementView)%>" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
              <element name="element"/>
              <elementView name="elementView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView%>">
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="SetVariable $scope" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                    <parameters name="context" value="&lt;% $element%>"/>
                    <parameters name="variable" value="scope"/>
                    <parameters name="value" value="&lt;% $elementView.getABSwitchPhysicalCategoriesScope() %>"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="SetVariable $initialSelection" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                    <parameters name="context" value="&lt;% $element%>"/>
                    <parameters name="variable" value="initialSelection"/>
                    <parameters name="value" value="&lt;% $elementView.getABSwitchPhysicalCategoriesInitialSelection()%>"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectElements" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectLinksFromTransferWizard">
                    <parameters name="context" value="&lt;% $element%>"/>
                    <parameters name="scope" value="&lt;%$scope%>"/>
                    <parameters name="initialSelection" value="&lt;%$initialSelection%>"/>
                    <parameters name="resultVariable" value="selectedElements"/>
                    <parameters name="wizardMessage" value="Select Categories to reveal"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%($selectedElements != &quot;WIZARD_CANCELED&quot;)%>">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView.switchABPhysicalCategories($scope, $initialSelection, $selectedElements )%>"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolDescription" documentation="[Unsynchronized diagrams only] Creates or deletes graphical objects corresponding to Physical Ports. This tool does not modify the semantic model." name="Show/Hide Ports" label="Ports" precondition="&lt;%($elementView.filter(&quot;DNodeContainer&quot;).nSize > 0) &amp;&amp; ($elementView.target.filter(&quot;Part&quot;).nSize > 0)%>" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <filters precondition="feature:synchronized" elementsToListen="&lt;%current%>">
              <listeners domainClass="DDiagram" featureName="synchronized"/>
            </filters>
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool:AcceleoVariable" name="displayedPorts" computationExpression="&lt;% $elementView.ownedBorderedNodes.target.filter(&quot;Port&quot;) %>"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView%>">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectPorts" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                  <parameters name="context" value="&lt;% $element %>"/>
                  <parameters name="scope" value="&lt;% $elementView.target.getComponentType().ownedFeatures.filter(&quot;Port&quot;)%>"/>
                  <parameters name="resultVariable" value="selection"/>
                  <parameters name="wizardMessage" value="Select Ports to show in &lt;%$element.name%>."/>
                  <parameters name="initialSelection" value="&lt;% $displayedPorts %>"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% ! ($selection == &quot;WIZARD_CANCELED&quot;) %>">
                  <subModelOperations xsi:type="tool:For" expression="&lt;% $selection %>">
                    <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%! $displayedPorts.nContains($i)%>">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$i%>">
                        <subModelOperations xsi:type="tool_1:CreateView" mapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port']" containerViewExpression="&lt;%$elementView%>"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:For" expression="&lt;%$displayedPorts%>">
                    <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%! $selection.nContains($i)%>">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView.ownedBorderedNodes[target == $i].nFirst%>">
                        <subModelOperations xsi:type="tool:DeleteView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ContainerDropDescription" name="DnD AB ComponentPort" precondition="&lt;% isA(&quot;ComponentPort&quot;) &amp;&amp; (eContainer.getComponentType() != $newViewContainer.target.getComponentType()) &amp;&amp; ($newViewContainer.target.getComponentType().isA(&quot;AbstractActor&quot;) || $newViewContainer.target.getComponentType().nature!=&quot;NODE&quot;)%>" mappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port']" moveEdges="true">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$element.dndABComponentPort($oldSemanticContainer, $newSemanticContainer)%>"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ContainerDropDescription" name="D&amp;D PhysicalPort" precondition="&lt;% isA(&quot;PhysicalPort&quot;) &amp;&amp; (eContainer.getComponentType() != $newViewContainer.target.getComponentType()) &amp;&amp; ($newViewContainer.target.getComponentType().isA(&quot;AbstractActor&quot;) || $newViewContainer.target.getComponentType().nature == &quot;NODE&quot;)%>" mappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port']" moveEdges="true">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$element.dndABPhysicalPort($oldSemanticContainer, $newSemanticContainer)%>"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ContainerDropDescription" name="DnD AB Component" precondition="&lt;%(current.getComponentType().nature == $newViewContainer.target.getComponentType().nature || $newViewContainer.target.getComponentType().nature==&quot;UNSET&quot;) &amp;&amp; $element.isValidDndABComponent($newViewContainer)%>" mappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']" moveEdges="true">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$element.dndABComponent($oldSemanticContainer, $newSemanticContainer)%>"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:DeleteElementDescription" name="delete SF" precondition="&lt;%!($containerView[!filter(&quot;DDiagram&quot;)].eContainer(&quot;DDiagram&quot;).target + $containerView[filter(&quot;DDiagram&quot;)].target.ancestor + $containerView[filter(&quot;DDiagram&quot;)].target + $containerView[!filter(&quot;DDiagram&quot;)].eContainer(&quot;DDiagram&quot;).target.ancestor).nContains($element)%>">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $element %>">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="CapellaDeleteExternalAction" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.delete.CapellaDeleteExternalAction"/>
              </firstModelOperations>
            </initialOperation>
            <hook id="org.polarsys.capella.core.sirius.analysis.delete.CapellaDeleteActionHook"/>
          </ownedTools>
          <ownedTools xsi:type="tool_1:DeleteElementDescription" name="delete category">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $element %>">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="NoDeleteElement" id="org.polarsys.capella.core.sirius.analysis.delete.NoDeleteExternalAction"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:DirectEditLabel" name="edit name" forceRefresh="true" inputLabelExpression="feature:name">
            <mask mask="{0}"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="&lt;% $0 %>"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:PopupMenu" name="Physical Path">
            <menuItemDescription xsi:type="tool:OperationAction" name="Create a Physical Path" precondition="&lt;%isValidPhysicalPathSelection($views)%>" forceRefresh="true">
              <view name="views"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $views%>">
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectSource" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                    <parameters name="context" value="&lt;% $views.nFirst()%>"/>
                    <parameters name="scope" value="&lt;%getAvailableSourcesOfPhysicalPath($views)%>"/>
                    <parameters name="resultVariable" value="source"/>
                    <parameters name="wizardMessage" value="Select the Source of your Physical Path:"/>
                    <parameters name="displayDialogForOneElement" value="false"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%createPhysicalPath($views,$source)%>">
                    <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%current.isA(&quot;PhysicalPath&quot;)%>">
                      <subModelOperations xsi:type="tool_1:CreateView" mapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalPathEnd']" containerViewExpression="&lt;%$views.nFirst().getDiagramContainer()%>"/>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </menuItemDescription>
          </ownedTools>
          <ownedTools xsi:type="tool_1:DiagramCreationDescription" name="Physical Architecture Blank" precondition="&lt;%isInLib() &amp;&amp; getComponentType.isA(&quot;PhysicalComponent&quot;)%>" titleExpression="[PAB] &lt;%current.name%>" browseExpression="" diagramDescription="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']">
            <initialOperation/>
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ContainerDropDescription" name="D&amp;D Constraints From Project Explorer" precondition="&lt;% $element.isA(&quot;Constraint&quot;) &amp;&amp; $element.canBeDropped($newViewContainer) %>" forceRefresh="true" dragSource="PROJECT_EXPLORER">
            <mappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']"/>
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$element%>"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ContainerDropDescription" name="D&amp;D Actors From Project Explorer" precondition="&lt;% $element.getComponentType().isA(&quot;AbstractActor&quot;) &amp;&amp; $element.canBeDropped($newViewContainer) %>" forceRefresh="true" mappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Actor']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$element%>"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ContainerDropDescription" name="D&amp;D Components From Project Explorer" precondition="&lt;% $element.getComponentType().isA(&quot;Component&quot;) &amp;&amp; !$element.getComponentType().isA(&quot;AbstractActor&quot;) &amp;&amp; $element.partitionableElementCanBeDropped($newViewContainer) %>" forceRefresh="true" mappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$element%>"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ReconnectEdgeDescription" name="Reconnect PhysicalLink Source" precondition="&lt;%$element.isValidABReconnectPhysicalLinkSource($source, $target)%>" reconnectionKind="RECONNECT_SOURCE">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView">
              <subVariables xsi:type="tool:AcceleoVariable" name="targetComponent" computationExpression="&lt;% $targetView.target.getRelatedComponent() %>"/>
              <subVariables xsi:type="tool:AcceleoVariable" name="targetPart" computationExpression="&lt;% $targetView.getRelatedPart() %>"/>
              <subVariables xsi:type="tool:AcceleoVariable" name="targetConnection" computationExpression="&lt;% $targetView.target %>"/>
              <subVariables xsi:type="tool:AcceleoVariable" name="targetIsPort" computationExpression="&lt;%$targetView.target.isA(&quot;Port&quot;)%>"/>
            </targetView>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$element.reconnectABPhysicalLinkSource($edgeView, $sourceView, $targetView)%>"/>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ReconnectEdgeDescription" name="Reconnect PhysicalLink Target" precondition="&lt;%$element.isValidABReconnectPhysicalLinkTarget($source, $target)%>">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView">
              <subVariables xsi:type="tool:AcceleoVariable" name="targetComponent" computationExpression="&lt;% $targetView.target.getRelatedComponent() %>"/>
              <subVariables xsi:type="tool:AcceleoVariable" name="targetPart" computationExpression="&lt;% $targetView.getRelatedPart() %>"/>
              <subVariables xsi:type="tool:AcceleoVariable" name="targetConnection" computationExpression="&lt;% $targetView.target %>"/>
              <subVariables xsi:type="tool:AcceleoVariable" name="targetIsPort" computationExpression="&lt;%$targetView.target.isA(&quot;Port&quot;)%>"/>
            </targetView>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$element.reconnectABPhysicalLinkTarget($edgeView, $sourceView, $targetView)%>"/>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ReconnectEdgeDescription" name="Reconnect ComponentExchange Source" precondition="&lt;%$element.isValidABReconnectComponentExchangeSource($source, $target)%>" reconnectionKind="RECONNECT_SOURCE">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$element.reconnectABComponentExchangeSource($edgeView, $sourceView, $targetView)%>"/>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ReconnectEdgeDescription" name="Reconnect ComponentExchange Target" precondition="&lt;%$element.isValidABReconnectComponentExchangeTarget($source, $target)%>">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$element.reconnectABComponentExchangeTarget($edgeView, $sourceView, $targetView)%>"/>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ContainerDropDescription" name="DnD AB Deployment" precondition="&lt;%!($newViewContainer.target.getComponentType().nature==&quot;BEHAVIOR&quot; &amp;&amp; current.getComponentType().nature==&quot;NODE&quot;) &amp;&amp; $element.isValidDndABComponent($newViewContainer)%>" mappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Deployment']" moveEdges="true">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$element.dndABDeployment($oldSemanticContainer, $newSemanticContainer)%>"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:DiagramNavigationDescription" name="Navigate from PAB to PAB" browseExpression="&lt;%current.getNavigationScope()%>" navigationNameExpression="&lt;%$containerView.getNavigationName($diagramName)%>" diagramDescription="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']">
            <containerViewVariable name="containerView"/>
            <containerVariable name="container"/>
            <representationNameVariable name="diagramName"/>
          </ownedTools>
          <ownedTools xsi:type="tool_1:DiagramNavigationDescription" name="Navigate from PAB to IDB" browseExpression="&lt;%current.getNavigationScope()%>" navigationNameExpression="&lt;%$containerView.getNavigationName($diagramName)%>">
            <containerViewVariable name="containerView"/>
            <containerVariable name="container"/>
            <representationNameVariable name="diagramName"/>
            <diagramDescription href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']"/>
          </ownedTools>
          <ownedTools xsi:type="tool_1:DiagramNavigationDescription" name="Navigate from PAB to CCII" browseExpression="&lt;%current.getNavigationScope()%>" navigationNameExpression="&lt;%$containerView.getNavigationName($diagramName)%>">
            <containerViewVariable name="containerView"/>
            <containerVariable name="container"/>
            <representationNameVariable name="diagramName"/>
            <diagramDescription href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']"/>
          </ownedTools>
          <ownedTools xsi:type="tool_1:DiagramNavigationDescription" name="Navigate from PAB to CCEI" browseExpression="&lt;%current.getNavigationScope()%>" navigationNameExpression="&lt;%$containerView.getNavigationName($diagramName)%>">
            <containerViewVariable name="containerView"/>
            <containerVariable name="container"/>
            <representationNameVariable name="diagramName"/>
            <diagramDescription href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']"/>
          </ownedTools>
          <ownedTools xsi:type="tool_1:DiagramNavigationDescription" name="Navigate from PAB to CCDI" browseExpression="&lt;%current.getNavigationScope()%>" navigationNameExpression="&lt;%$containerView.getNavigationName($diagramName)%>">
            <containerViewVariable name="containerView"/>
            <containerVariable name="container"/>
            <representationNameVariable name="diagramName"/>
            <diagramDescription href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']"/>
          </ownedTools>
          <ownedTools xsi:type="tool_1:DiagramNavigationDescription" name="Navigate from PAB to PCB" browseExpression="&lt;%current.getNavigationScope()%>" navigationNameExpression="&lt;%$containerView.getNavigationName($diagramName)%>" diagramDescription="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Component%20Breakdown']">
            <containerViewVariable name="containerView"/>
            <containerVariable name="container"/>
            <representationNameVariable name="diagramName"/>
          </ownedTools>
        </toolSections>
        <toolSections name="Behavior" label="Behaviour Components">
          <ownedTools xsi:type="tool_1:ToolGroup" name="Behavior">
            <tools xsi:type="tool_1:ContainerCreationDescription" documentation="Creates a new Physlcal Component with a Kind BEHAVIOR and deployed on the target Physical Component." name="Deploy Behavior PC" precondition="&lt;%$containerView.isValidCreationABDeployBehaviorPC()%>" containerMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Deployment']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/PhysicalComponent.gif" extraMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Deployment'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']">
              <variable name="container">
                <subVariables xsi:type="tool:AcceleoVariable" name="nature" computationExpression="BEHAVIOR"/>
                <subVariables xsi:type="tool:AcceleoVariable" name="containerType" computationExpression="&lt;% $container.getComponentType() %>"/>
              </variable>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% eContainer (&quot;PhysicalArchitecture&quot;).ownedPhysicalComponent %>">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%createComponent(&quot;component&quot;)%>"/>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$component%>">
                    <subModelOperations xsi:type="tool:SetValue" featureName="nature" valueExpression="&lt;%$nature%>"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="cs.Part" referenceName="ownedFeatures" variableName="part">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%creationService%>"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="abstractType" valueExpression="&lt;% $component %>"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$container%>">
                    <subModelOperations xsi:type="tool:CreateInstance" typeName="PartDeploymentLink" referenceName="ownedDeploymentLinks" variableName="tdl">
                      <subModelOperations xsi:type="tool:SetValue" featureName="deployedElement" valueExpression="&lt;%$component.representingPartitions.nGet(0)%>"/>
                      <subModelOperations xsi:type="tool:SetValue" featureName="location" valueExpression="&lt;%$container%>"/>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_1:ContainerCreationDescription" documentation="Creates a new Physical Component with a Kind BEHAVIOR and a Part typed by this Physical Component. The Part is created in the Component target of the click." name="Behavior PC" precondition="&lt;%$containerView.isValidCreationABBehaviorPC()%>" containerMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/PhysicalComponent.gif">
              <variable name="container">
                <subVariables xsi:type="tool:AcceleoVariable" name="containerType" computationExpression="&lt;% $container.getComponentType() %>"/>
                <subVariables xsi:type="tool:AcceleoVariable" name="nature" computationExpression="BEHAVIOR"/>
              </variable>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $containerView.getABTarget().getComponentType() %>">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%createComponent(&quot;component&quot;)%>"/>
                  <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%$component!=null%>">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$component%>">
                      <subModelOperations xsi:type="tool:SetValue" featureName="nature" valueExpression="&lt;%$nature%>"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:CreateInstance" typeName="cs.Part" referenceName="ownedFeatures" variableName="part">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%creationService%>"/>
                      <subModelOperations xsi:type="tool:SetValue" featureName="abstractType" valueExpression="&lt;% $component %>"/>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_1:ContainerCreationDescription" documentation="[Reusable Component] Creates a new Part of an existing Behavior Physical Component into the targeted element." name="Reuse Behavior PC" label="Reuse PC" precondition="&lt;%$containerView.isValidCreationABReuseBehaviorPC()%>" containerMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Insert.gif">
              <filters precondition="&lt;%!isPreferenceEnabled(&quot;multipart.allowed&quot;)%>" elementsToListen="&lt;%getPreferenceListener()%>">
                <listeners domainClass="org.polarsys.capella.core.preferences.Listener" featureName="multipart.allowed"/>
              </filters>
              <variable name="container">
                <subVariables xsi:type="tool:AcceleoVariable" name="nature" computationExpression="NODE"/>
              </variable>
              <viewVariable name="containerView">
                <subVariables xsi:type="tool:AcceleoVariable" name="diagram" computationExpression="&lt;% $containerView.getDiagramContainer() %>"/>
                <subVariables xsi:type="tool:AcceleoVariable" name="containerType" computationExpression="&lt;% $containerView.getABTarget().getComponentType() %>"/>
                <subVariables xsi:type="tool:AcceleoVariable" name="containerTarget" computationExpression="&lt;% $containerView.getABTarget() %>"/>
              </viewVariable>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $containerType %>">
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="select Components" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                    <parameters name="context" value="&lt;% $containerType %>"/>
                    <parameters name="scope" value="&lt;% $containerType.getABInsertComponent%>"/>
                    <parameters name="multiple" value="true"/>
                    <parameters name="resultVariable" value="components"/>
                    <parameters name="wizardMessage" value="Select Components."/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% $components != &quot;WIZARD_CANCELED&quot; %>">
                    <subModelOperations xsi:type="tool:For" expression="&lt;%$components%>">
                      <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% $containerTarget.isA(&quot;BlockArchitecture&quot;) %>">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $containerTarget.getContext() %>">
                          <subModelOperations xsi:type="tool:CreateInstance" typeName="cs.Part" referenceName="ownedFeatures" variableName="part">
                            <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%creationService%>"/>
                            <subModelOperations xsi:type="tool:SetValue" featureName="abstractType" valueExpression="&lt;%$i%>"/>
                          </subModelOperations>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% !$containerTarget.isA(&quot;BlockArchitecture&quot;) %>">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$containerType%>">
                          <subModelOperations xsi:type="tool:CreateInstance" typeName="cs.Part" referenceName="ownedFeatures" variableName="part">
                            <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%creationService%>"/>
                            <subModelOperations xsi:type="tool:SetValue" featureName="abstractType" valueExpression="&lt;%$i%>"/>
                          </subModelOperations>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$containerView.getDiagramContainer().forceRefresh%>"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolGroup" name="ComponentExchanges">
            <tools xsi:type="tool_1:EdgeCreationDescription" documentation="[Singleton Components] Creates a Component Exchange of kind FLOW between the Source and Target Components. This tool can be used directly from / to Component or from / to Component Ports." name="Component Exchange" precondition="&lt;%isValidCreationPABComponentExchange($preSourceView, $preTargetView)%>" elementsToSelect="var:result" edgeMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='PAB_Exchange']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Connection.gif" extraSourceMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Actor'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Deployment']" extraTargetMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Actor'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Deployment']" connectionStartPrecondition="&lt;%isValidCreationPABComponentExchange($preSourceView)%>">
              <filters precondition="&lt;%isPreferenceEnabled(&quot;multipart.allowed&quot;)%>" elementsToListen="&lt;%getPreferenceListener()%>">
                <listeners domainClass="org.polarsys.capella.core.preferences.Listener" featureName="multipart.allowed"/>
              </filters>
              <sourceVariable name="source"/>
              <targetVariable name="target"/>
              <sourceViewVariable name="sourceView"/>
              <targetViewVariable name="targetView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$source.createABComponentExchange($sourceView, $targetView)%>"/>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_1:EdgeCreationDescription" documentation="[Singleton Components] Creates a Component Exchange of kind FLOW between the Source and Target Components. When necessary (for example when used to relate two sub components), Delegation relationships are also created. This tool can be used directly from / to Component or from / to Component Ports." name="Component Exchange with Delegations" precondition="&lt;%isValidCreationPABComponentExchange($preSourceView, $preTargetView)%>" elementsToSelect="var:result" edgeMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='PAB_Exchange']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Connection.gif" extraSourceMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Actor'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Deployment']" extraTargetMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Actor'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Deployment']" connectionStartPrecondition="&lt;%isValidCreationPABComponentExchange($preSourceView)%>">
              <filters precondition="&lt;%isPreferenceEnabled(&quot;multipart.allowed&quot;)%>" elementsToListen="&lt;%getPreferenceListener()%>">
                <listeners domainClass="org.polarsys.capella.core.preferences.Listener" featureName="multipart.allowed"/>
              </filters>
              <sourceVariable name="source"/>
              <targetVariable name="target"/>
              <sourceViewVariable name="sourceView"/>
              <targetViewVariable name="targetView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%current.createABComponentExchangeThroughDelegation($sourceView, $targetView)%>"/>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_1:EdgeCreationDescription" documentation="[Reusable Components] Creates a Component Exchange of kind FLOW between the Source and Target Parts. Component Ports are created automatically if the Source and / or Target are Parts instead of Ports." name="Component Exchange with ports" precondition="&lt;%isValidCreationPABComponentExchange($preSourceView, $preTargetView)%>" elementsToSelect="var:result" edgeMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='PAB_Exchange']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Connection.gif" extraSourceMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Actor'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Deployment']" extraTargetMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Actor'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Deployment']" connectionStartPrecondition="&lt;%isValidCreationPABComponentExchange($preSourceView)%>">
              <filters precondition="&lt;%!isPreferenceEnabled(&quot;multipart.allowed&quot;)%>" elementsToListen="&lt;%getPreferenceListener()%>">
                <listeners domainClass="org.polarsys.capella.core.preferences.Listener" featureName="multipart.allowed"/>
              </filters>
              <sourceVariable name="source"/>
              <targetVariable name="target"/>
              <sourceViewVariable name="sourceView"/>
              <targetViewVariable name="targetView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$source.createABComponentExchange($sourceView, $targetView)%>"/>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_1:EdgeCreationDescription" documentation="[Reusable Components] Creates a Component Exchange of kind ASSEMBLY between the Source Part and Target Parts." name="Component Exchange without ports" precondition="&lt;%isValidCreationPABComponentExchangeWithoutPorts($preSourceView, $preTargetView)%>" edgeMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='PAB_Exchange']" extraSourceMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Actor'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Deployment']" extraTargetMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Actor'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Deployment']" connectionStartPrecondition="&lt;%isValidCreationPABComponentExchangeWithoutPorts($preSourceView)%>">
              <filters precondition="&lt;%!isPreferenceEnabled(&quot;multipart.allowed&quot;)%>" elementsToListen="&lt;%getPreferenceListener()%>">
                <listeners domainClass="org.polarsys.capella.core.preferences.Listener" featureName="multipart.allowed"/>
              </filters>
              <sourceVariable name="source"/>
              <targetVariable name="target"/>
              <sourceViewVariable name="sourceView"/>
              <targetViewVariable name="targetView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$source.createABComponentExchangeWithoutPorts($sourceView, $targetView)%>"/>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_1:EdgeCreationDescription" documentation="[Singleton Components] Creates a Component Exchange of kind FLOW between the Source and Target Components. This tool can be used directly from / to Component or from / to Component Ports." name="Component Exchange between types" precondition="&lt;%isValidCreationPABComponentExchange($preSourceView, $preTargetView)%>" elementsToSelect="var:result" edgeMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='PAB_Exchange']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Connection.gif" extraSourceMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Actor'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Deployment']" extraTargetMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Actor'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Deployment']" connectionStartPrecondition="&lt;%isValidCreationPABComponentExchange($preSourceView)%>">
              <filters precondition="&lt;%!isPreferenceEnabled(&quot;multipart.allowed&quot;)%>" elementsToListen="&lt;%getPreferenceListener()%>">
                <listeners domainClass="org.polarsys.capella.core.preferences.Listener" featureName="multipart.allowed"/>
              </filters>
              <sourceVariable name="source"/>
              <targetVariable name="target"/>
              <sourceViewVariable name="sourceView"/>
              <targetViewVariable name="targetView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$source.createABComponentExchange($sourceView, $targetView,true)%>"/>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_1:EdgeCreationDescription" documentation="Creates a Component Exchange of kind DELEGATION between a Port of the parent Component and a Port of a Sub Component. This delegation relationship is contextual to the parent Component. This tool can be used directly from / to Component or from / to Component Ports." name="Delegation" precondition="&lt;%isValidCreationPABDelegationExchange($preSourceView, $preTargetView) %>" elementsToSelect="var:result" edgeMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='PAB_Exchange']" connectionStartPrecondition="&lt;%isValidCreationPABDelegationExchange($preSourceView) %>">
              <sourceVariable name="source"/>
              <targetVariable name="target"/>
              <sourceViewVariable name="sourceView"/>
              <targetViewVariable name="targetView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$source.createABDelegation($sourceView, $targetView)%>"/>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolGroup" name="Ports">
            <tools xsi:type="tool_1:NodeCreationDescription" documentation="Creates a new Component Port initialized with the Kind FLOW and the direction IN " name="In Flow Port" precondition="&lt;% $container.isA(&quot;Part&quot;) &amp;&amp; $container.getComponentType().nature != &quot;NODE&quot; %>" nodeMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FlowPortIn.gif">
              <variable name="container">
                <subVariables xsi:type="tool:AcceleoVariable" name="containerType" computationExpression="&lt;% $container.getComponentType() %>"/>
              </variable>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$containerType%>">
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="ComponentPort" referenceName="ownedFeatures" variableName="port">
                    <subModelOperations xsi:type="tool:SetValue" featureName="kind" valueExpression="FLOW"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="orientation" valueExpression="IN"/>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%creationService%>"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_1:NodeCreationDescription" documentation="Creates a new Component Port initialized with the Kind FLOW and the direction OUT " name="Out Flow Port" precondition="&lt;% $container.isA(&quot;Part&quot;) &amp;&amp; $container.getComponentType().nature != &quot;NODE&quot; %>" nodeMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FlowPortOut.gif">
              <variable name="container">
                <subVariables xsi:type="tool:AcceleoVariable" name="containerType" computationExpression="&lt;% $container.getComponentType() %>"/>
              </variable>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$containerType%>">
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="ComponentPort" referenceName="ownedFeatures" variableName="port">
                    <subModelOperations xsi:type="tool:SetValue" featureName="kind" valueExpression="FLOW"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="orientation" valueExpression="OUT"/>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%creationService%>"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_1:NodeCreationDescription" documentation="Creates a new Component Port initialized with the Kind FLOW and the direction INOUT " name="InOut Flow Port" precondition="&lt;% $container.isA(&quot;Part&quot;) &amp;&amp; $container.getComponentType().nature != &quot;NODE&quot; %>" nodeMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FlowPort.gif">
              <variable name="container">
                <subVariables xsi:type="tool:AcceleoVariable" name="containerType" computationExpression="&lt;% $container.getComponentType() %>"/>
              </variable>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$containerType%>">
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="ComponentPort" referenceName="ownedFeatures" variableName="port">
                    <subModelOperations xsi:type="tool:SetValue" featureName="kind" valueExpression="FLOW"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="orientation" valueExpression="INOUT"/>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%creationService%>"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_1:NodeCreationDescription" documentation="Creates a new Component Port initialized with the Kind FLOW and the direction UNSET " name="Standard Port" precondition="&lt;% $container.isA(&quot;Part&quot;) &amp;&amp; $container.getComponentType().nature != &quot;NODE&quot; %>" nodeMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/StandardPort.gif">
              <variable name="container">
                <subVariables xsi:type="tool:AcceleoVariable" name="containerType" computationExpression="&lt;% $container.getComponentType() %>"/>
              </variable>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$containerType%>">
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="ComponentPort" referenceName="ownedFeatures" variableName="port">
                    <subModelOperations xsi:type="tool:SetValue" featureName="kind" valueExpression="STANDARD"/>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%creationService%>"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolDescription" documentation="Creates new deployment relationships between selected Behavior Physical Component and the target Physical Component. The newly deployed Physical Components are automatically displayed on the target Physical Component. This tool modifies the semantic model." name="Manage Behavior PCs Deployment" precondition="&lt;%$element.isA(&quot;Part&quot;)%>" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Manage.gif">
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool:AcceleoVariable" name="diagram" computationExpression="&lt;%$elementView.getDiagramContainer()%>"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $container %>">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="managePCDeployment" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                  <parameters name="context" value="&lt;% $element %>"/>
                  <parameters name="scope" value="&lt;%$element.getAvailableComponentsToDeploy(&quot;true&quot;)%>"/>
                  <parameters name="resultVariable" value="selectedElements"/>
                  <parameters name="wizardMessage" value="Select the Physical Components to deploy in &lt;%$element.name%>."/>
                  <parameters name="initialSelection" value="&lt;%$element.getDeployedComponents(&quot;true&quot;)%>"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% ! ($selectedElements == &quot;WIZARD_CANCELED&quot;) %>">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView.manageComponentDeployments($selectedElements,&quot;true&quot;)%>"/>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$diagram.forceRefresh%>"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolGroup" name="Show/Hide Actors and Components">
            <tools xsi:type="tool_1:ContainerCreationDescription" documentation="Insert/Remove Behavior PCs. Creates or deletes graphical objects on the diagrams corresponding to existing Physical Components. Removing a Component graphical object from the diagram does not delete the Component from the model. This tool does not modify the semantic model." name="Show/Hide Components" label="Behavior PCs" containerMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Deployment']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
              <filters precondition="&lt;%!isPreferenceEnabled(&quot;multipart.allowed&quot;)%>" elementsToListen="&lt;%getPreferenceListener()%>">
                <listeners domainClass="org.polarsys.capella.core.preferences.Listener" featureName="multipart.allowed"/>
              </filters>
              <variable name="container"/>
              <viewVariable name="containerView">
                <subVariables xsi:type="tool:AcceleoVariable" name="diagram" computationExpression="&lt;% $containerView.eContainer(&quot;DDiagram&quot;) %>"/>
                <subVariables xsi:type="tool:AcceleoVariable" name="scope" computationExpression="&lt;% $containerView.getABShowHideComponent()[getComponentType().nature == &quot;BEHAVIOR&quot;]%>"/>
                <subVariables xsi:type="tool:AcceleoVariable" name="ownedNodeContainer" computationExpression="&lt;%$containerView.eAllContents().filter(&quot;DNodeContainer&quot;)[actualMapping.name==&quot;PAB_PC&quot;]%>"/>
              </viewVariable>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $containerType %>">
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectSubComponent" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                    <parameters name="context" value="&lt;% $container %>"/>
                    <parameters name="scope" value="&lt;% $scope %>"/>
                    <parameters name="resultVariable" value="selection"/>
                    <parameters name="wizardMessage" value="Select Sub Components to show in &lt;%$container.name%>."/>
                    <parameters name="initialSelection" value="&lt;% getIntersection($ownedNodeContainer[visible &amp;&amp; actualMapping.name==&quot;PAB_PC&quot;].target, $scope)[getComponentType().nature == &quot;BEHAVIOR&quot;] %>"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% ! ($selection == &quot;WIZARD_CANCELED&quot;) %>">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $container %>">
                      <subModelOperations xsi:type="tool:For" expression="&lt;% getIntersection(($ownedNodeContainer[visible].target+$diagram.target), $scope) - $selection %>">
                        <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% $ownedNodeContainer[target == $i].nSize()>0 %>">
                          <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $ownedNodeContainer[target == $i] %>">
                            <subModelOperations xsi:type="tool:DeleteView"/>
                          </subModelOperations>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool:For" expression="&lt;% $selection %>">
                        <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% $ownedNodeContainer[target == $i].nSize() > 0 %>">
                          <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $ownedNodeContainer[target == $i].show %>"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% $ownedNodeContainer[target == $i].nSize() == 0 %>">
                          <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $i %>">
                            <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% ($ownedNodeContainer+$containerView)[(target == $i.eContainer || target.type == $i.eContainer)] == null %>">
                              <subModelOperations xsi:type="tool_1:CreateView" mapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']" containerViewExpression="&lt;% $containerView %>"/>
                            </subModelOperations>
                            <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% ($ownedNodeContainer+$containerView)[(target == $i.eContainer || target.type == $i.eContainer)] != null %>">
                              <subModelOperations xsi:type="tool_1:CreateView" mapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']" containerViewExpression="&lt;%($ownedNodeContainer+$containerView)[(target == $i.eContainer || target.type == $i.eContainer)] %>"/>
                            </subModelOperations>
                          </subModelOperations>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$containerView.getDiagramContainer().forceRefresh%>"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_1:ContainerCreationDescription" documentation="Insert/Remove Behavior PCs. Creates or deletes graphical objects on the diagrams corresponding to existing Physical Components. Removing a Component graphical object from the diagram does not delete the Component from the model. This tool does not modify the semantic model." name="Insert/remove Components mono part" label="Behavior PCs" containerMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Deployment']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
              <filters precondition="&lt;%isPreferenceEnabled(&quot;multipart.allowed&quot;)%>" elementsToListen="&lt;%getPreferenceListener()%>">
                <listeners domainClass="org.polarsys.capella.core.preferences.Listener" featureName="multipart.allowed"/>
              </filters>
              <variable name="container"/>
              <viewVariable name="containerView">
                <subVariables xsi:type="tool:AcceleoVariable" name="diagram" computationExpression="&lt;% $containerView.eContainer(&quot;DDiagram&quot;) %>"/>
                <subVariables xsi:type="tool:AcceleoVariable" name="containerType" computationExpression="&lt;% $containerView.target.getComponentType() %>"/>
                <subVariables xsi:type="tool:AcceleoVariable" name="componentsInDiagram" computationExpression="&lt;% getIntersection($containerView.containers[visible &amp;&amp; actualMapping.name == &quot;PAB_PC&quot;].target.filter(&quot;Part&quot;).getComponentType, $containerView.getABShowHideComponent())[nature == &quot;BEHAVIOR&quot;]%>"/>
              </viewVariable>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $container %>">
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectSubComponents" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                    <parameters name="context" value="&lt;% $container %>"/>
                    <parameters name="scope" value="&lt;% $containerView.getABShowHideComponent()[nature == &quot;BEHAVIOR&quot;] %>"/>
                    <parameters name="resultVariable" value="selection"/>
                    <parameters name="wizardMessage" value="Select Components to show in &lt;%$container.name%>."/>
                    <parameters name="initialSelection" value="&lt;% $componentsInDiagram %>"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% ! ($selection == &quot;WIZARD_CANCELED&quot;) %>">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $container %>">
                      <subModelOperations xsi:type="tool:For" expression="&lt;% $componentsInDiagram - $containerView.target.getComponentType() %>">
                        <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%! $selection.nContains($i)%>">
                          <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% $containerView.containers[(actualMapping.name == &quot;PAB_PC&quot;) &amp;&amp; (target.getComponentType == $i)].nSize > 0 %>">
                            <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $containerView.containers[(actualMapping.name == &quot;PAB_PC&quot;) &amp;&amp; (target.getComponentType() == $i)].nFirst %>">
                              <subModelOperations xsi:type="tool:DeleteView"/>
                            </subModelOperations>
                          </subModelOperations>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool:For" expression="&lt;% $selection %>">
                        <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%!$componentsInDiagram.nContains($i)%>">
                          <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $i.representingPartitions.filter(&quot;Part&quot;).nFirst() %>">
                            <subModelOperations xsi:type="tool_1:CreateView" mapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']" containerViewExpression="&lt;% $containerView %>"/>
                          </subModelOperations>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$containerView.getDiagramContainer().forceRefresh%>"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolGroup" name="Show Hide Deployed PC">
            <tools xsi:type="tool_1:ContainerCreationDescription" documentation="Insert/Remove Deployed PCs. Creates or delete graphical objects corresponding to already deployed Physical Components. Removing a Physical Component graphical object from the deploying Physical Component or Actor does not delete the deployment relationship towards the Physical Component. This tool does not modify the semantic model." name="Show/Hide Deployed Components" label="Deployed PCs" containerMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Deployment']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $container %>">
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectSubComponents" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                    <parameters name="context" value="&lt;% $container %>"/>
                    <parameters name="scope" value="&lt;% getDeployedComponents() %>"/>
                    <parameters name="resultVariable" value="selection"/>
                    <parameters name="wizardMessage" value="Select deployed Components to show in &lt;%$container.name%>."/>
                    <parameters name="initialSelection" value="&lt;% getIntersection($containerView.eAllContents().filter(&quot;DNodeContainer&quot;)[visible &amp;&amp; actualMapping.name==&quot;PAB_Deployment&quot;].target, deploymentLinks.deployedElement) %>"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% ! ($selection == &quot;WIZARD_CANCELED&quot;) %>">
                    <subModelOperations xsi:type="tool:For" expression="&lt;%$containerView.eContents().filter(&quot;DNodeContainer&quot;)[visible].target.filter(&quot;Part&quot;)[deployingLinks.nSize > 0] - $selection%>">
                      <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% $containerView.eAllContents().filter(&quot;DNodeContainer&quot;)[target == $i &amp;&amp; actualMapping.name==&quot;PAB_Deployment&quot;].nSize()>0 %>">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $containerView.eAllContents().filter(&quot;DNodeContainer&quot;)[target == $i &amp;&amp; actualMapping.name==&quot;PAB_Deployment&quot;] %>">
                          <subModelOperations xsi:type="tool:DeleteView"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:For" expression="&lt;%$selection%>">
                      <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% $containerView.eAllContents().filter(&quot;DNodeContainer&quot;)[target == $i &amp;&amp; actualMapping.name==&quot;PAB_Deployment&quot;].nSize() > 0 %>">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $containerView.eAllContents().filter(&quot;DNodeContainer&quot;)[target == $i &amp;&amp; actualMapping.name==&quot;PAB_Deployment&quot;].show %>"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% $containerView.eAllContents().filter(&quot;DNodeContainer&quot;)[target == $i &amp;&amp; actualMapping.name==&quot;PAB_Deployment&quot;].nSize() == 0 %>">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $i %>">
                          <subModelOperations xsi:type="tool_1:CreateView" mapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Deployment']" containerViewExpression="&lt;%$containerView%>"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$containerView.getDiagramContainer().forceRefresh%>"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:ToolDescription" documentation="Insert All Deployed PCs. Creates graphical objects for all Physical Component already deployed on all Physical Components and Actors appearing on the diagram. This tool does not modify the semantic model." name="Insert All Deployed Components" label="All Deployed PCs" precondition="&lt;%$element.isA(&quot;Part&quot;) || $element.isA(&quot;Component&quot;)%>" forceRefresh="true" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Insert.gif">
              <element name="element">
                <subVariables xsi:type="tool:AcceleoVariable" name="containerType" computationExpression="&lt;% $element.getComponentType() %>"/>
              </element>
              <elementView name="elementView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView%>">
                  <subModelOperations xsi:type="tool:For" expression="&lt;%$elementView.getAllContainers()[(target.filter(&quot;Component&quot;).nSize()>0 || target.filter(&quot;Part&quot;).nSize()>0)] %>">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$i%>">
                      <subModelOperations xsi:type="tool:For" expression="&lt;%$i.target.getDeployedComponents()%>" iteratorName="j">
                        <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%!$i.ownedDiagramElements[actualMapping.name == &quot;PAB_Deployment&quot;].target.nContains($j)%>">
                          <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$j%>">
                            <subModelOperations xsi:type="tool_1:CreateView" mapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Deployment']" containerViewExpression="&lt;%$i%>"/>
                          </subModelOperations>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolGroup" name="Show/Hide ComponentExchanges and Categories">
            <tools xsi:type="tool:ToolDescription" documentation="Create or delete graphical objects corresponding to existing Component Exchanges. The proposed Component Exchanges are the one incoming and outgoing from the Component target of the click. Opposite Components / Actors might be displayed on the diagram as well if they are not yet represented. This tool does not modify the semantic model." name="Show/Hide ComponentExchanges" label="Component Exchanges" precondition="&lt;%($elementView.target.isA(&quot;Part&quot;) &amp;&amp; $elementView.target.getComponentType().isA(&quot;Component&quot;)) &amp;&amp; ($elementView.filter(&quot;DDiagram&quot;).nSize() == 0)%>" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
              <element name="element"/>
              <elementView name="elementView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView%>">
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="SetVariable $displayedExchanges" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                    <parameters name="context" value="&lt;% $elementView%>"/>
                    <parameters name="variable" value="displayedExchanges"/>
                    <parameters name="value" value="&lt;%$elementView.getDisplayedConnections%>"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectExchanges" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectLinksFromTransferWizard">
                    <parameters name="context" value="&lt;% $element%>"/>
                    <parameters name="scope" value="&lt;%getAvailableConnectionsToInsert()%>"/>
                    <parameters name="initialSelection" value="&lt;%$displayedExchanges%>"/>
                    <parameters name="resultVariable" value="selectedExchanges"/>
                    <parameters name="wizardMessage" value="Select Component Exchanges to show in &lt;%$element.name%>."/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%($selectedExchanges != &quot;WIZARD_CANCELED&quot;)%>">
                    <subModelOperations xsi:type="tool:For" expression="&lt;%$selectedExchanges%>">
                      <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%! $displayedExchanges.nContains($i)%>">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$i.showABComponentExchange($elementView)%>"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:For" expression="&lt;%$displayedExchanges%>">
                      <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%! $selectedExchanges.nContains($i)%>">
                        <subModelOperations xsi:type="tool:For" expression="&lt;%$elementView.getDiagramContainer().edges[target == $i]%>" iteratorName="e">
                          <subModelOperations xsi:type="tool:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                            <parameters name="context" value="&lt;% $elementView%>"/>
                            <parameters name="variable" value="edgeToDelete"/>
                            <parameters name="value" value="&lt;%$e%>"/>
                          </subModelOperations>
                          <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$edgeToDelete%>">
                            <subModelOperations xsi:type="tool:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                              <parameters name="context" value="&lt;% $elementView%>"/>
                              <parameters name="variable" value="sourceNode"/>
                              <parameters name="value" value="&lt;% $edgeToDelete.sourceNode %>"/>
                            </subModelOperations>
                            <subModelOperations xsi:type="tool:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                              <parameters name="context" value="&lt;% $elementView%>"/>
                              <parameters name="variable" value="targetNode"/>
                              <parameters name="value" value="&lt;% $edgeToDelete.targetNode %>"/>
                            </subModelOperations>
                            <subModelOperations xsi:type="tool:DeleteView"/>
                          </subModelOperations>
                          <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%$sourceNode.isABorderedNode()%>">
                            <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$sourceNode%>">
                              <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%($sourceNode.getIncomingEdges.nSize() == 0) &amp;&amp; ($sourceNode.getOutgoingEdges.nSize() == 0)%>">
                                <subModelOperations xsi:type="tool:DeleteView"/>
                              </subModelOperations>
                            </subModelOperations>
                          </subModelOperations>
                          <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%$targetNode.isABorderedNode()%>">
                            <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$targetNode%>">
                              <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%($targetNode.getIncomingEdges.nSize() == 0) &amp;&amp; ($targetNode.getOutgoingEdges.nSize() == 0)%>">
                                <subModelOperations xsi:type="tool:DeleteView"/>
                              </subModelOperations>
                            </subModelOperations>
                          </subModelOperations>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView.getDiagramContainer().forceRefresh%>"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:ToolDescription" documentation="[Available only when the diagram is unsynchronized] Insert/Remove Categorized Component Exchanges. Create or delete graphical objects corresponding to already existing Categorized Component Exchanges and the corresponding source/target Parts if they are not present on the diagram yet. Removing a Categorized Component Exchange graphical object from the diagram does not delete the Component Exchange from the model. This tool does not modify the semantic model." name="Show/Hide Component Categories" label="Categories" precondition="&lt;%isValidShowHideABComponentCategory($elementView)%>" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
              <filters precondition="feature:synchronized" elementsToListen="&lt;%current%>">
                <listeners domainClass="DDiagram" featureName="synchronized"/>
              </filters>
              <element name="element"/>
              <elementView name="elementView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $elementView %>">
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectExchangeCategories" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromCheckBoxWizard">
                    <parameters name="context" value="&lt;% $elementView %>"/>
                    <parameters name="type" value="COMPONENT_CATEGORY"/>
                    <parameters name="resultVariable" value="selectedElements"/>
                    <parameters name="wizardMessage" value="Select Categories and targeted elements"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:ToolDescription" documentation="Switch between the representation of individual Component Exchanges and their representation as Category-based Component Exchanges." name="Switch Component Categories" label="Switch Component Exchanges / Categories" precondition="&lt;%isValidSwitchABComponentCategory($elementView)%>" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
              <element name="element"/>
              <elementView name="elementView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView%>">
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="SetVariable $scope" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                    <parameters name="context" value="&lt;% $element%>"/>
                    <parameters name="variable" value="scope"/>
                    <parameters name="value" value="&lt;% $elementView.getABSwitchComponentCategoriesScope() %>"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="SetVariable $initialSelection" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                    <parameters name="context" value="&lt;% $element%>"/>
                    <parameters name="variable" value="initialSelection"/>
                    <parameters name="value" value="&lt;% $elementView.getABSwitchComponentCategoriesInitialSelection()%>"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectElements" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectLinksFromTransferWizard">
                    <parameters name="context" value="&lt;% $element%>"/>
                    <parameters name="scope" value="&lt;%$scope%>"/>
                    <parameters name="initialSelection" value="&lt;%$initialSelection%>"/>
                    <parameters name="resultVariable" value="selectedElements"/>
                    <parameters name="wizardMessage" value="Select Categories to reveal"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%($selectedElements != &quot;WIZARD_CANCELED&quot;)%>">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView.switchABComponentCategories($scope, $initialSelection, $selectedElements )%>"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolDescription" documentation="[Unsynchronized diagrams only] Create or delete graphical objects corresponding to Component Ports. This tool does not modify the semantic model." name="Show/Hide Ports" label="Ports" precondition="&lt;%($elementView.filter(&quot;DNodeContainer&quot;).nSize > 0) &amp;&amp; ($elementView.target.filter(&quot;Part&quot;).nSize > 0)%>" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <filters precondition="feature:synchronized" elementsToListen="&lt;%current%>">
              <listeners domainClass="DDiagram" featureName="synchronized"/>
            </filters>
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool:AcceleoVariable" name="displayedPorts" computationExpression="&lt;% $elementView.ownedBorderedNodes.target.filter(&quot;Port&quot;) %>"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView%>">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectPorts" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                  <parameters name="context" value="&lt;% $element %>"/>
                  <parameters name="scope" value="&lt;% $elementView.target.getComponentType().ownedFeatures.filter(&quot;Port&quot;)%>"/>
                  <parameters name="resultVariable" value="selection"/>
                  <parameters name="wizardMessage" value="Select Ports to show in &lt;%$element.name%>."/>
                  <parameters name="initialSelection" value="&lt;% $displayedPorts %>"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% ! ($selection == &quot;WIZARD_CANCELED&quot;) %>">
                  <subModelOperations xsi:type="tool:For" expression="&lt;% $selection %>">
                    <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%! $displayedPorts.nContains($i)%>">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$i%>">
                        <subModelOperations xsi:type="tool_1:CreateView" mapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port']" containerViewExpression="&lt;%$elementView%>"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:For" expression="&lt;%$displayedPorts%>">
                    <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%! $selection.nContains($i)%>">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView.ownedBorderedNodes[target == $i].nFirst%>">
                        <subModelOperations xsi:type="tool:DeleteView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
        </toolSections>
        <toolSections name="Functions">
          <ownedTools xsi:type="tool_1:ToolGroup" name="FunctionCreation">
            <tools xsi:type="tool_1:NodeCreationDescription" documentation="Creates a new Physical Function and allocates it to the target Physical Component or Actor." name="Physical Function" precondition="&lt;%!current.isNode() &amp;&amp; current.getComponentType().isA(&quot;Component&quot;) &amp;&amp; $containerView.filter (&quot;DNodeContainer&quot;).nSize != 0 %>" nodeMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction']">
              <variable name="container">
                <subVariables xsi:type="tool:AcceleoVariable" name="containerType" computationExpression="&lt;% $container.getComponentType() %>"/>
                <subVariables xsi:type="tool:AcceleoVariable" name="tool" computationExpression="Physical Function"/>
              </variable>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $containerType.getRootFunction().createFunction() %>">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%allocateToComponent($containerType)%>"/>
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="CreateView" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.CreateViewAction">
                    <parameters name="context" value="&lt;% $container %>"/>
                    <parameters name="scope" value="&lt;% current %>"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_1:NodeCreationDescription" documentation="Create a new Duplicate allocated to the component type of the selected part" name="Duplicate" precondition="&lt;%!current.isNode() &amp;&amp; current.getComponentType().isA(&quot;Component&quot;) &amp;&amp; $containerView.filter (&quot;DNodeContainer&quot;).nSize != 0 %>" nodeMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FunctionKind_Duplicate.gif">
              <variable name="container">
                <subVariables xsi:type="tool:AcceleoVariable" name="containerType" computationExpression="&lt;% $container.getComponentType() %>"/>
              </variable>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $containerType.getRootFunction().createDuplicateFunction() %>">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%allocateToComponent($containerType)%>"/>
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="CreateView" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.CreateViewAction">
                    <parameters name="context" value="&lt;% $container %>"/>
                    <parameters name="scope" value="&lt;% current %>"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_1:NodeCreationDescription" documentation="Create a new Gather allocated to the component type of the selected part" name="Gather" precondition="&lt;%!current.isNode() &amp;&amp; current.getComponentType().isA(&quot;Component&quot;) &amp;&amp; $containerView.filter (&quot;DNodeContainer&quot;).nSize != 0 %>" nodeMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FunctionKind_Gather.gif">
              <variable name="container">
                <subVariables xsi:type="tool:AcceleoVariable" name="containerType" computationExpression="&lt;% $container.getComponentType() %>"/>
              </variable>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $containerType.getRootFunction().createGatherFunction() %>">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%allocateToComponent($containerType)%>"/>
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="CreateView" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.CreateViewAction">
                    <parameters name="context" value="&lt;% $container %>"/>
                    <parameters name="scope" value="&lt;% current %>"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_1:NodeCreationDescription" documentation="Create a new Route allocated to the component type of the selected part" name="Route" precondition="&lt;%!current.isNode() &amp;&amp; current.getComponentType().isA(&quot;Component&quot;) &amp;&amp; $containerView.filter (&quot;DNodeContainer&quot;).nSize != 0 %>" nodeMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FunctionKind_Route.gif">
              <variable name="container">
                <subVariables xsi:type="tool:AcceleoVariable" name="containerType" computationExpression="&lt;% $container.getComponentType() %>"/>
              </variable>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $containerType.getRootFunction().createRouteFunction() %>">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%allocateToComponent($containerType)%>"/>
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="CreateView" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.CreateViewAction">
                    <parameters name="context" value="&lt;% $container %>"/>
                    <parameters name="scope" value="&lt;% current %>"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_1:NodeCreationDescription" documentation="Create a new Select allocated to the component type of the selected part" name="Select" precondition="&lt;%!current.isNode() &amp;&amp; current.getComponentType().isA(&quot;Component&quot;) &amp;&amp; $containerView.filter (&quot;DNodeContainer&quot;).nSize != 0 %>" nodeMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FunctionKind_Select.gif">
              <variable name="container">
                <subVariables xsi:type="tool:AcceleoVariable" name="containerType" computationExpression="&lt;% $container.getComponentType() %>"/>
              </variable>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $containerType.getRootFunction().createSelectFunction() %>">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%allocateToComponent($containerType)%>"/>
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="CreateView" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.CreateViewAction">
                    <parameters name="context" value="&lt;% $container %>"/>
                    <parameters name="scope" value="&lt;% current %>"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_1:NodeCreationDescription" documentation="Create a new Split allocated to the component type of the selected part" name="Split" precondition="&lt;%!current.isNode() &amp;&amp; current.getComponentType().isA(&quot;Component&quot;) &amp;&amp; $containerView.filter (&quot;DNodeContainer&quot;).nSize != 0 %>" nodeMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FunctionKind_Split.gif">
              <variable name="container">
                <subVariables xsi:type="tool:AcceleoVariable" name="containerType" computationExpression="&lt;% $container.getComponentType() %>"/>
              </variable>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $containerType.getRootFunction().createSplitFunction() %>">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%allocateToComponent($containerType)%>"/>
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="CreateView" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.CreateViewAction">
                    <parameters name="context" value="&lt;% $container %>"/>
                    <parameters name="scope" value="&lt;% current %>"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolGroup" name="FunctionalExchanges">
            <tools xsi:type="tool_1:EdgeCreationDescription" documentation="Creates a new Functional Exchange between the Source and Target Physical Functions. If necessary, Function Ports are created automatically. The Functional Exchange is created under the common parent Function of the Source and Target." name="Functional Exchange" precondition="&lt;%isValidCreationFunctionalExchange($preSource, $preTarget)%>" elementsToSelect="var:result" edgeMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='PAB_FunctionExchange']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FunctionalExchange.gif" extraSourceMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction']" extraTargetMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction']" connectionStartPrecondition="&lt;%isValidCreationFunctionalExchange($preSource)%>">
              <sourceVariable name="source"/>
              <targetVariable name="target"/>
              <sourceViewVariable name="sourceView"/>
              <targetViewVariable name="targetView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$source.createABFunctionalExchange($sourceView, $targetView)%>"/>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_1:NodeCreationDescription" documentation="Creates a new Function Input Port on the target Function." name="Input Port" precondition="&lt;%$containerView.isValidCreationFunctionInputPort()%>" nodeMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction']/@borderedNodeMappings[name='PAB_Pin']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/InFlowPort.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$container%>">
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="FunctionInputPort" referenceName="inputs">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%creationService%>"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_1:NodeCreationDescription" documentation="Creates a new Function Output Port on the target Function." name="Output Port" precondition="&lt;%$containerView.isValidCreationFunctionOutputPort()%>" nodeMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction']/@borderedNodeMappings[name='PAB_Pin']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/OutFlowPort.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$container%>">
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="FunctionOutputPort" referenceName="outputs">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%creationService%>"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool_1:EdgeCreationDescription" documentation="Creates a new Port Allocation from the source Component Port to the target Function Port." name="Port Realisation" label="Port Allocation" precondition="&lt;%isValidABCreationPortAllocation($preSourceView, $preTargetView)%>" edgeMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='PAB%20PortRealization']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/PortAllocation.gif" connectionStartPrecondition="&lt;%isValidABCreationPortAllocation($preSourceView)%>">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$source%>">
                <subModelOperations xsi:type="tool:CreateInstance" typeName="PortAllocation" referenceName="ownedPortAllocations">
                  <subModelOperations xsi:type="tool:SetValue" featureName="sourceElement" valueExpression="&lt;%$source%>"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="targetElement" valueExpression="&lt;%$target%>"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:NodeCreationDescription" documentation="Creates new allocation relationships between the selected Functions and the target Physical Component or Actor. The newly allocated Functions are automatically displayed on the target Physical Component or Actor. This tool modifies the semantic model." name="Manage Function Allocation" label="Manage Function Allocation" precondition="&lt;%!current.isNode() &amp;&amp;  $container.getComponentType().isA(&quot;Component&quot;) %>" nodeMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Manage.gif">
            <variable name="container">
              <subVariables xsi:type="tool:AcceleoVariable" name="containerType" computationExpression="&lt;% $container.getComponentType() %>"/>
            </variable>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $containerType %>">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="functionAllocation" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                  <parameters name="context" value="&lt;% $containerType %>"/>
                  <parameters name="scope" value="&lt;% $containerType.getAvailableFunctionalAllocation()%>"/>
                  <parameters name="resultVariable" value="element"/>
                  <parameters name="wizardMessage" value="Select Functions to allocate to &lt;%$container.type.name%>."/>
                  <parameters name="initialSelection" value="&lt;%$containerType.ownedFunctionalAllocation.targetElement%>"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% ! ($element == &quot;WIZARD_CANCELED&quot;) %>">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$containerType%>">
                    <subModelOperations xsi:type="tool:For" expression="&lt;%$containerType.ownedFunctionalAllocation.targetElement%>">
                      <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%!$element.nContains($i)%>">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $containerView.eContents().filter(&quot;DNode&quot;)[target == $i] %>">
                          <subModelOperations xsi:type="tool:DeleteView"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$containerType.ownedFunctionalAllocation[targetElement == $i]%>">
                          <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%removeCapellaElement()%>"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:For" expression="&lt;%$element%>">
                      <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%!$containerType.ownedFunctionalAllocation.function.nContains($i)%>">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $containerType %>">
                          <subModelOperations xsi:type="tool:CreateInstance" typeName="ComponentFunctionalAllocation" referenceName="ownedFunctionalAllocation">
                            <subModelOperations xsi:type="tool:SetValue" featureName="targetElement" valueExpression="&lt;% $i%>"/>
                            <subModelOperations xsi:type="tool:SetValue" featureName="sourceElement" valueExpression="&lt;%$containerType%>"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$i%>">
                          <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%$i.filter(&quot;AbstractFunction&quot;).nSize() > 0%>">
                            <subModelOperations xsi:type="tool_1:CreateView" mapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction']" containerViewExpression="&lt;%$containerView%>"/>
                          </subModelOperations>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$containerView.getDiagramContainer().forceRefresh%>"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolGroup" name="Show/Hide Functions">
            <tools xsi:type="tool_1:NodeCreationDescription" documentation="Insert/Remove Allocated Functions. Creates or deletes graphical objects corresponding to already allocated Functions. Removing a Function graphical object from the Physical Component or Actor does not delete the allocation relationship towards the Function. This tool does not modify the semantic model." name="Show/Hide Allocated Functions" label="Allocated Functions" precondition="&lt;% !current.isNode() &amp;&amp; $container.getComponentType().isA(&quot;Component&quot;) %>" forceRefresh="true" nodeMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_ControlFunction']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
              <variable name="container">
                <subVariables xsi:type="tool:AcceleoVariable" name="containerType" computationExpression="&lt;% $container.getComponentType() %>"/>
              </variable>
              <viewVariable name="containerView">
                <subVariables xsi:type="tool:AcceleoVariable" name="visibleFunctions" computationExpression="&lt;%$containerView.ownedDiagramElements.target.filter(&quot;AbstractFunction&quot;)%>"/>
              </viewVariable>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $containerType %>">
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectAllocatedFunctions" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                    <parameters name="context" value="&lt;% $containerType %>"/>
                    <parameters name="scope" value="&lt;% $container.getShowableAllocatedFunctions($containerView)%>"/>
                    <parameters name="initialSelection" value="&lt;% $visibleFunctions %>"/>
                    <parameters name="resultVariable" value="selectedFunctions"/>
                    <parameters name="wizardMessage" value="Select allocated Functions to show in &lt;%$container.name%>."/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% ! ($selectedFunctions == &quot;WIZARD_CANCELED&quot;) %>">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $containerView.insertRemoveAllocatedFunctions($selectedFunctions) %>"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_1:NodeCreationDescription" documentation="Insert All Allocated Functions. Creates graphical objects for all Functions already allocated to all Physical Components and Actors appearing on the diagram. This tool does not modify the semantic model." name="Show All Allocated Functions" label="All Allocated Functions" precondition="&lt;%!current.isNode() %>" forceRefresh="true" nodeMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_Dummy']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$containerView%>">
                  <subModelOperations xsi:type="tool:For" expression="&lt;%$containerView.getAllContainers()[target.filter(&quot;Part&quot;).nSize()>0] %>">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$i%>">
                      <subModelOperations xsi:type="tool:For" expression="&lt;%$i.target.getComponentType().allocatedFunctions%>" iteratorName="anAllocatedFunction">
                        <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%$i.getNodesAndNodeListElements()[target == $anAllocatedFunction].nSize() > 0%>">
                          <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$i.getNodesAndNodeListElements()[target == $anAllocatedFunction].nFirst().show%>"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%$i.getNodesAndNodeListElements()[target == $anAllocatedFunction].nSize() == 0%>">
                          <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$anAllocatedFunction%>">
                            <subModelOperations xsi:type="tool_1:CreateView" mapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction']" containerViewExpression="&lt;%$i%>"/>
                          </subModelOperations>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool_1:NodeCreationDescription" documentation="Insert/Remove Functional Chains. Creates or delete graphical objects corresponding to existing Functional Chains. Removing a Functional Chain graphical object from a diagram does not delete the Functional Chain from the model. This tool does not modify the semantic model." name="Show/Hide Functional Chains" label="Functional Chains" nodeMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_FunctionalChainEnd']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <variable name="container"/>
            <viewVariable name="containerView">
              <subVariables xsi:type="tool:AcceleoVariable" name="ownedElements" computationExpression="&lt;%$containerView.getSetOfDiagramElements()%>"/>
              <subVariables xsi:type="tool:AcceleoVariable" name="initialSelection" computationExpression="&lt;%$containerView.getNodesAndNodeListElements()[visible &amp;&amp; target.filter(&quot;FunctionalChain&quot;).nSize() > 0].target%>"/>
            </viewVariable>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $container %>">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectFunctionalChains" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                  <parameters name="context" value="&lt;% $container %>"/>
                  <parameters name="scope" value="&lt;%getFunctionalChainsToInsert($containerView, $container.getAllFunctionalChain())%>"/>
                  <parameters name="initialSelection" value="&lt;%$initialSelection%>"/>
                  <parameters name="resultVariable" value="selectedFunctionalChains"/>
                  <parameters name="wizardMessage" value="Select Functional Chains to show in &lt;%$container.name%>."/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% ! ($selectedFunctionalChains == &quot;WIZARD_CANCELED&quot;) %>">
                  <subModelOperations xsi:type="tool:For" expression="&lt;%$initialSelection%>">
                    <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%!$selectedFunctionalChains.nContains($i)%>">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$containerView.getNodesAndNodeListElements()[target == $i].nFirst%>">
                        <subModelOperations xsi:type="tool:DeleteView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:For" expression="&lt;%$selectedFunctionalChains - $initialSelection%>">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$i%>">
                      <subModelOperations xsi:type="tool_1:CreateView" mapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_FunctionalChainEnd']" containerViewExpression="&lt;%$containerView%>"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$containerView.getDiagramContainer().forceRefresh%>"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolGroup" name="Show/Hide 1">
            <tools xsi:type="tool:ToolDescription" documentation="Insert/Remove Functional Exchanges. Create or delete graphical objects corresponding to existing Functional Exchanges. The proposed Functional Exchanges are the one incoming and outgoing from the Function target of the click. Opposite Functions and allocating Physical Components or Actors might be displayed on the diagram as well if they are not yet represented. This tool does not modify the semantic model." name="Show/Hide Functional Exchanges" label="Functional Exchanges" precondition="&lt;%($elementView.target.filter(&quot;AbstractFunction&quot;).nSize() > 0) &amp;&amp; ($elementView.filter(&quot;DDiagram&quot;).nSize() == 0)%>" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
              <element name="element"/>
              <elementView name="elementView">
                <subVariables xsi:type="tool:AcceleoVariable" name="displayedExchanges" computationExpression="&lt;%$elementView.getDisplayedFunctionalExchanges%>"/>
              </elementView>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView%>">
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectExchanges" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectLinksFromTransferWizard">
                    <parameters name="context" value="&lt;% $element%>"/>
                    <parameters name="scope" value="&lt;%getAvailableFunctionalExchangesToInsertInArchitectureBlank()%>"/>
                    <parameters name="initialSelection" value="&lt;%$displayedExchanges%>"/>
                    <parameters name="resultVariable" value="selectedExchanges"/>
                    <parameters name="wizardMessage" value="Select Functional Exchanges to show in &lt;%$element.name%>."/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%($selectedExchanges != &quot;WIZARD_CANCELED&quot;)%>">
                    <subModelOperations xsi:type="tool:For" expression="&lt;%$selectedExchanges%>">
                      <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%! $displayedExchanges.nContains($i)%>">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$i.showFunctionalExchangeInArchitectureBlank2($elementView)%>"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:For" expression="&lt;%$displayedExchanges%>">
                      <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%! $selectedExchanges.nContains($i)%>">
                        <subModelOperations xsi:type="tool:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                          <parameters name="context" value="&lt;% $elementView%>"/>
                          <parameters name="variable" value="edgeToDelete"/>
                          <parameters name="value" value="&lt;%$elementView.getDiagramContainer().edges[target == $i].nFirst%>"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$edgeToDelete%>">
                          <subModelOperations xsi:type="tool:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                            <parameters name="context" value="&lt;% $elementView%>"/>
                            <parameters name="variable" value="sourceNode"/>
                            <parameters name="value" value="&lt;% $edgeToDelete.sourceNode %>"/>
                          </subModelOperations>
                          <subModelOperations xsi:type="tool:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                            <parameters name="context" value="&lt;% $elementView%>"/>
                            <parameters name="variable" value="targetNode"/>
                            <parameters name="value" value="&lt;% $edgeToDelete.targetNode %>"/>
                          </subModelOperations>
                          <subModelOperations xsi:type="tool:DeleteView"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%$sourceNode.isABorderedNode()%>">
                          <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$sourceNode%>">
                            <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%($sourceNode.getIncomingEdges.nSize() == 0) &amp;&amp; ($sourceNode.getOutgoingEdges.nSize() == 0)%>">
                              <subModelOperations xsi:type="tool:DeleteView"/>
                            </subModelOperations>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%$targetNode.isABorderedNode()%>">
                          <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$targetNode%>">
                            <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%($targetNode.getIncomingEdges.nSize() == 0) &amp;&amp; ($targetNode.getOutgoingEdges.nSize() == 0)%>">
                              <subModelOperations xsi:type="tool:DeleteView"/>
                            </subModelOperations>
                          </subModelOperations>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView.getDiagramContainer().forceRefresh%>"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:ToolDescription" documentation="[Unsynchronized diagrams only] Create or delete graphical objects corresponding to Function Ports. This tool does not modify the semantic model." name="Show/Hide Function Ports" label="Function Ports" precondition="&lt;%($elementView.filter(&quot;DNode&quot;).nSize > 0) &amp;&amp; ($elementView.target.filter(&quot;AbstractFunction&quot;).nSize > 0)%>" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
              <filters precondition="feature:synchronized" elementsToListen="&lt;%current%>">
                <listeners domainClass="DDiagram" featureName="synchronized"/>
              </filters>
              <element name="element"/>
              <elementView name="elementView">
                <subVariables xsi:type="tool:AcceleoVariable" name="displayedPorts" computationExpression="&lt;% $elementView.ownedBorderedNodes.target.filter(&quot;Port&quot;) %>"/>
              </elementView>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView%>">
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectPorts" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                    <parameters name="context" value="&lt;% $element %>"/>
                    <parameters name="scope" value="&lt;% $elementView.target.getAvailablePins($elementView.getDiagramContainer(), $elementView)%>"/>
                    <parameters name="resultVariable" value="selection"/>
                    <parameters name="wizardMessage" value="Select Ports to show in &lt;%$element.name%>."/>
                    <parameters name="initialSelection" value="&lt;% $displayedPorts %>"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% ! ($selection == &quot;WIZARD_CANCELED&quot;) %>">
                    <subModelOperations xsi:type="tool:For" expression="&lt;% $selection %>">
                      <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%! $displayedPorts.nContains($i)%>">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$i%>">
                          <subModelOperations xsi:type="tool_1:CreateView" mapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction']/@borderedNodeMappings[name='PAB_Pin']" containerViewExpression="&lt;%$elementView%>"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:For" expression="&lt;%$displayedPorts%>">
                      <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%! $selection.nContains($i)%>">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView.ownedBorderedNodes[target == $i].nFirst%>">
                          <subModelOperations xsi:type="tool:DeleteView"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:ToolDescription" documentation="Switch between the representation of individual Physical Links and their representation as Category-based Physical Links." name="Switch Functional Exchanges / Categories" precondition="&lt;%($elementView.filter(&quot;DDiagram&quot;).nSize() > 0)%>" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
              <element name="element"/>
              <elementView name="elementView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView%>">
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="SetVariable $scope" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                    <parameters name="context" value="&lt;% $element%>"/>
                    <parameters name="variable" value="scope"/>
                    <parameters name="value" value="&lt;% $elementView.getSwitchFECategoriesScope() %>"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="SetVariable $initialSelection" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                    <parameters name="context" value="&lt;% $element%>"/>
                    <parameters name="variable" value="initialSelection"/>
                    <parameters name="value" value="&lt;% $elementView.getSwitchFECategoriesInitialSelection()%>"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectElements" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectLinksFromTransferWizard">
                    <parameters name="context" value="&lt;% $element%>"/>
                    <parameters name="scope" value="&lt;%$scope%>"/>
                    <parameters name="initialSelection" value="&lt;%$initialSelection%>"/>
                    <parameters name="resultVariable" value="selectedElements"/>
                    <parameters name="wizardMessage" value="Select Categories to reveal"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%($selectedElements != &quot;WIZARD_CANCELED&quot;)%>">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView.switchFECategories($scope, $initialSelection, $selectedElements )%>"/>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView.getDiagramContainer().forceRefresh%>"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ContainerDropDescription" name="DnD AB AbstractFunction Allocation" precondition="&lt;%!$newViewContainer.target.isNode() %>" mappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_ControlFunction']" moveEdges="true">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$element.dndABAbstractFunctionAllocation($oldSemanticContainer, $newSemanticContainer)%>"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ContainerDropDescription" name="DnD AB FunctionPort" precondition="&lt;%$element.isValidDndABFunctionPort($newViewContainer) %>" mappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction']/@borderedNodeMappings[name='PAB_Pin']" moveEdges="true">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$element.dndABFunctionPort($oldSemanticContainer, $newSemanticContainer)%>"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ReconnectEdgeDescription" name="PAB Reconnect Function Exchanges" precondition="&lt;% $element.isFunctionalExchangeReconnectable($sourceView.getDiagramContainer(), $source, $target) %>" reconnectionKind="RECONNECT_BOTH">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $element.reconnectFunctionalExchange($source,$target) %>"/>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ContainerDropDescription" name="D&amp;D Function Allocation From Project Explorer" precondition="&lt;% !$newViewContainer.target.isNode() &amp;&amp; $element.isA(&quot;AbstractFunction&quot;) &amp;&amp; ($element.subFunctions().nSize ==0) %>" forceRefresh="true" mappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element">
              <subVariables xsi:type="tool:AcceleoVariable" name="oldAllocationBlocks" computationExpression="&lt;%$element.allocationBlocks%>"/>
            </element>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$element%>">
                <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%$oldAllocationBlocks.nSize() > 0%>">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$element.dndABAbstractFunctionAllocation($element.allocationBlocks.nFirst, $newSemanticContainer.type)%>"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%$oldAllocationBlocks.nSize() == 0%>">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $newSemanticContainer.type%>">
                    <subModelOperations xsi:type="tool:CreateInstance" typeName="ComponentFunctionalAllocation" referenceName="ownedFunctionalAllocation">
                      <subModelOperations xsi:type="tool:SetValue" featureName="targetElement" valueExpression="&lt;% $element%>"/>
                      <subModelOperations xsi:type="tool:SetValue" featureName="sourceElement" valueExpression="&lt;% $newSemanticContainer.type%>"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:PopupMenu" name="Functional Chain" label="Functional Chain">
            <menuItemDescription xsi:type="tool:OperationAction" name="Create a Functional Chain" precondition="&lt;%isValidFunctionalChainSelection($views)%>" forceRefresh="true">
              <view name="views"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%createFunctionalChain($views)%>">
                  <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%current.isA(&quot;FunctionalChain&quot;)%>">
                    <subModelOperations xsi:type="tool_1:CreateView" mapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_FunctionalChainEnd']" containerViewExpression="&lt;%$views.nFirst().getDiagramContainer()%>"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </menuItemDescription>
          </ownedTools>
        </toolSections>
        <toolSections name="Accelerators">
          <ownedTools xsi:type="tool:ToolDescription" documentation="Insert all the Functions available in a given Mode / State. This tool does not modify the semantic model." name="State-Mode Elements" label="Functions from Mode / State" precondition="&lt;%$elementView.isValidABInsertStateModes()%>" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Mode.gif">
            <element name="element"/>
            <elementView name="elementView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$element%>">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectStates" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                  <parameters name="context" value="&lt;%$element%>"/>
                  <parameters name="scope" value="&lt;%$elementView.getABInsertStateModesScope()%>"/>
                  <parameters name="multiple" value="true"/>
                  <parameters name="resultVariable" value="elements"/>
                  <parameters name="wizardMessage" value="Select States/Modes to display all its available functions."/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% ! ($elements == &quot;WIZARD_CANCELED&quot;) %>">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView.showABStateModes($elements)%>"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolDescription" documentation="Insert all the related elements contributing to a given Scenario. &#xD;&#xA;Functions and allocating Components / Actors might be displayed on the diagram as well if they are not yet represented. &#xD;&#xA;This tool does not modify the semantic model." name="Scenario Elements" label="Elements from Scenario" precondition="&lt;%$elementView.isValidABInsertScenarios()%>" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Scenario.gif">
            <element name="element"/>
            <elementView name="elementView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$element%>">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectElements" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                  <parameters name="context" value="&lt;%$element%>"/>
                  <parameters name="scope" value="&lt;%$elementView.getABInsertScenariosScope()%>"/>
                  <parameters name="multiple" value="true"/>
                  <parameters name="resultVariable" value="elements"/>
                  <parameters name="wizardMessage" value="Select Scenarios to display all involved elements."/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% ! ($elements == &quot;WIZARD_CANCELED&quot;) %>">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView.showABScenarios($elements)%>"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <reusedTools xsi:type="tool:ToolDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@additionalLayers[name='Communication%20Model']/@toolSections.1/@ownedTools[name='DiagramInitialization']"/>
        </toolSections>
        <toolSections name="Common">
          <ownedTools xsi:type="tool_1:NodeCreationDescription" documentation="Create a new Constraint." name="Constraint" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Constraint.gif">
            <nodeMappings href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']"/>
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$container%>">
                <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% $containerView.filter(&quot;DDiagram&quot;).nSize() == 1 %>">
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="Constraint" referenceName="ownedConstraints">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%creationService%>"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:EdgeCreationDescription" documentation="Allocate a Source Constraint to an available Target Capella Element." name="ConstraintElement" precondition="&lt;%!( $preSource.constrainedElements.nContains($preTarget))%>" forceRefresh="true" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ClassCarries.gif">
            <edgeMappings href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_ContrainedElements']"/>
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:If" conditionExpression="&lt;%$source.filter(&quot;Constraint&quot;).nSize() == 1%>">
                <subModelOperations xsi:type="tool:If" conditionExpression="true">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$source.createConstraintElement($target,$targetView)%>"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolDescription" documentation="Creates or deletes graphical objects corresponding to existing Constraints. Removing a Constraint graphical object does not delete this Constraint from the model. This tool does not modify the semantic model." name="Show/Hide Constraints" label="Constraints" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool:AcceleoVariable" name="constraintsInDiagram" computationExpression="&lt;% getExistingConstraintsFromDiagram($elementView.getDiagramContainer())%>"/>
              <subVariables xsi:type="tool:AcceleoVariable" name="diagram" computationExpression="&lt;% $elementView.eContainer(&quot;DDiagram&quot;) %>"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView%>">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectedConstraints" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectLinksFromTransferWizard">
                  <parameters name="context" value="&lt;% $elementView%>"/>
                  <parameters name="scope" value="&lt;% getConstraintToInsertInDiagram() - $constraintsInDiagram%>"/>
                  <parameters name="initialSelection" value="&lt;%$constraintsInDiagram%>"/>
                  <parameters name="resultVariable" value="selectedConstraints"/>
                  <parameters name="wizardMessage" value="Select Constraints to show."/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%($selectedConstraints != &quot;WIZARD_CANCELED&quot;)%>">
                  <subModelOperations xsi:type="tool:For" expression="&lt;%$selectedConstraints%>">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%createConstraintWithConstaintedElementInDiagram($i,$diagram,$constraintsInDiagram,true)%>"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:For" expression="&lt;%$constraintsInDiagram%>">
                    <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%! $selectedConstraints.nContains($i)%>">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView.getDiagramContainer().getNodesAndNodeListElements()[target == $i]%>">
                        <subModelOperations xsi:type="tool:DeleteView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView.getDiagramContainer().forceRefresh%>"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <reusedTools xsi:type="tool_1:ToolGroup" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='PV']"/>
          <reusedTools xsi:type="tool_1:ContainerDropDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20PV%20From%20Project%20Explorer']"/>
        </toolSections>
        <toolSections name="Select All Common Tools">
          <reusedTools xsi:type="tool:PopupMenu" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.2/@ownedTools[name='selectMenu']"/>
        </toolSections>
        <customization>
          <vsmElementCustomizations xsi:type="description:VSMElementCustomization" predicateExpression="&lt;% !current.isAllocatedInThisComponent($container.getComponentType()) %>">
            <featureCustomizations xsi:type="description:EAttributeCustomization" appliedOn="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction']/@conditionnalStyles.5/@style //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction']/@style" attributeName="borderLineStyle" value="dash"/>
          </vsmElementCustomizations>
        </customization>
      </defaultLayer>
    </ownedRepresentations>
    <ownedRepresentations xsi:type="description_1:CrossTableDescription" name="Physical Actor - Logical Actor" label="Physical Actors - Logical Actors" domainClass="PhysicalArchitecture">
      <ownedLineMappings name="PALA Physical Actor Line" domainClass="PhysicalActor" semanticCandidatesExpression="&lt;%eAllContents().filter(&quot;PhysicalActor&quot;)%>">
        <delete name="No delete" precondition="false">
          <variables name="element" documentation="The currently edited element."/>
          <variables name="root" documentation="The semantic element corresponding to the current table."/>
        </delete>
      </ownedLineMappings>
      <ownedColumnMappings name="PALA Logical Actor column" initialWidth="50" domainClass="LogicalActor" semanticCandidatesExpression="&lt;%precedingSibling.filter(&quot;BlockArchitecture&quot;).nLast().eAllContents().filter(&quot;LogicalActor&quot;)%>">
        <delete name="No delete" precondition="false">
          <variables name="element" documentation="The currently edited element."/>
          <variables name="root" documentation="The semantic element corresponding to the current table."/>
        </delete>
      </ownedColumnMappings>
      <intersection name="PALA Actor Realisation" lineMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Actor%20-%20Logical%20Actor']/@ownedLineMappings[name='PALA%20Physical%20Actor%20Line']" columnMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Actor%20-%20Logical%20Actor']/@ownedColumnMappings.0" labelExpression="X" useDomainClass="true" columnFinderExpression="feature:targetElement" lineFinderExpression="feature:sourceElement" domainClass="LogicalActorRealization">
        <directEdit>
          <variables name="table" documentation="The current DTable."/>
          <variables name="line" documentation="The DLine of the current DCell."/>
          <variables name="element" documentation="The currently edited element."/>
          <variables name="lineSemantic" documentation="The semantic element corresponding to the line."/>
          <variables name="columnSemantic" documentation="The semantic element corresponding to the column."/>
          <variables name="root" documentation="The semantic element of the table."/>
          <firstModelOperation xsi:type="tool:If" conditionExpression="&lt;%$0 == &quot;&quot; &amp;&amp; $root.eAllContents().filter(&quot;LogicalActorRealization&quot;)[targetElement == $columnSemantic &amp;&amp; sourceElement == $lineSemantic].nSize() > 0%>">
            <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$root.eAllContents().filter(&quot;LogicalActorRealization&quot;)[targetElement == $columnSemantic &amp;&amp; sourceElement == $lineSemantic].nFirst()%>">
              <subModelOperations xsi:type="tool:RemoveElement"/>
            </subModelOperations>
          </firstModelOperation>
          <mask mask="{0}"/>
        </directEdit>
        <create name="Logical Actor Realisation" forceRefresh="true">
          <variables name="lineSemantic" documentation="The semantic element corresponding to the line."/>
          <variables name="columnSemantic" documentation="The semantic element corresponding to the column."/>
          <variables name="root" documentation="The semantic root element of the table."/>
          <firstModelOperation xsi:type="tool:ChangeContext" browseExpression="&lt;%$lineSemantic%>">
            <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%$0 == &quot;X&quot;%>">
              <subModelOperations xsi:type="tool:CreateInstance" typeName="LogicalActorRealization" referenceName="ownedLogicalActorRealizations">
                <subModelOperations xsi:type="tool:SetValue" featureName="sourceElement" valueExpression="&lt;%$lineSemantic%>"/>
                <subModelOperations xsi:type="tool:SetValue" featureName="targetElement" valueExpression="&lt;%$columnSemantic%>"/>
              </subModelOperations>
            </subModelOperations>
          </firstModelOperation>
          <mask mask="{0}"/>
        </create>
      </intersection>
    </ownedRepresentations>
    <ownedRepresentations xsi:type="description_1:CrossTableDescription" name="Requirements - Physical Functions" preconditionExpression="&lt;%eContainer(&quot;BlockArchitecture&quot;).isA(&quot;PhysicalArchitecture&quot;)%>" domainClass="RequirementsPkg">
      <ownedLineMappings name="Requirements" domainClass="NamedElement" semanticCandidatesExpression="&lt;%current%>" headerLabelExpression="&lt;%getRequirementElementLabel()%>">
        <ownedSubLines name="Sub Requirements" reusedSubLines="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Requirements%20-%20Physical%20Functions']/@ownedLineMappings[name='Requirements']/@ownedSubLines[name='Sub%20Requirements']" reusedInMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Requirements%20-%20Physical%20Functions']/@ownedLineMappings[name='Requirements']/@ownedSubLines[name='Sub%20Requirements%20Pkg'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Requirements%20-%20Physical%20Functions']/@ownedLineMappings[name='Requirements']/@ownedSubLines[name='Sub%20Requirements']" domainClass="NamedElement" semanticCandidatesExpression="&lt;%ownedRequirements%>" headerLabelExpression="&lt;%getRequirementElementLabel()%>">
          <delete name="No delete" precondition="false">
            <variables name="element" documentation="The currently edited element."/>
            <variables name="root" documentation="The semantic element corresponding to the current table."/>
          </delete>
        </ownedSubLines>
        <ownedSubLines name="Sub Requirements Pkg" reusedSubLines="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Requirements%20-%20Physical%20Functions']/@ownedLineMappings[name='Requirements']/@ownedSubLines[name='Sub%20Requirements'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Requirements%20-%20Physical%20Functions']/@ownedLineMappings[name='Requirements']/@ownedSubLines[name='Sub%20Requirements%20Pkg']" reusedInMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Requirements%20-%20Physical%20Functions']/@ownedLineMappings[name='Requirements']/@ownedSubLines[name='Sub%20Requirements%20Pkg']" domainClass="NamedElement" semanticCandidatesExpression="feature:extended" headerLabelExpression="&lt;%getRequirementElementLabel()%>">
          <delete name="No delete" precondition="false">
            <variables name="element" documentation="The currently edited element."/>
            <variables name="root" documentation="The semantic element corresponding to the current table."/>
          </delete>
        </ownedSubLines>
        <delete name="No delete" precondition="false">
          <variables name="element" documentation="The currently edited element."/>
          <variables name="root" documentation="The semantic element corresponding to the current table."/>
        </delete>
      </ownedLineMappings>
      <ownedColumnMappings name="Functions" headerLabelExpression="feature:name" domainClass="NamedElement" semanticCandidatesExpression="&lt;%getRFColumnCandidates()%>">
        <delete name="No delete" precondition="false">
          <variables name="element" documentation="The currently edited element."/>
          <variables name="root" documentation="The semantic element corresponding to the current table."/>
        </delete>
      </ownedColumnMappings>
      <intersection name="Trace Function" semanticElements="&lt;%current+current.eContainer()%>" lineMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Requirements%20-%20Physical%20Functions']/@ownedLineMappings[name='Requirements']/@ownedSubLines[name='Sub%20Requirements']" columnMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Requirements%20-%20Physical%20Functions']/@ownedColumnMappings.0" labelExpression="&lt;%getRFLabel($lineSemantic, $columnSemantic)%>" useDomainClass="true" columnFinderExpression="feature:sourceElement" lineFinderExpression="feature:targetElement" semanticCandidatesExpression="&lt;%getRFColumnCandidates().outgoingTraces()[isA(&quot;RequirementsTrace&quot;)]%>" domainClass="RequirementsTrace">
        <directEdit>
          <variables name="table" documentation="The current DTable."/>
          <variables name="line" documentation="The DLine of the current DCell."/>
          <variables name="element" documentation="The currently edited element."/>
          <variables name="lineSemantic" documentation="The semantic element corresponding to the line."/>
          <variables name="columnSemantic" documentation="The semantic element corresponding to the column."/>
          <variables name="root" documentation="The semantic element of the table."/>
          <firstModelOperation xsi:type="tool:If" conditionExpression="&lt;%$0 == &quot;&quot;%>">
            <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$element%>">
              <subModelOperations xsi:type="tool:RemoveElement"/>
            </subModelOperations>
          </firstModelOperation>
          <mask mask="{0}"/>
        </directEdit>
        <create name="TR6" precondition="&lt;%myDebug()%>" forceRefresh="true">
          <variables name="lineSemantic" documentation="The semantic element corresponding to the line."/>
          <variables name="columnSemantic" documentation="The semantic element corresponding to the column."/>
          <variables name="root" documentation="The semantic root element of the table."/>
          <firstModelOperation xsi:type="tool:ChangeContext" browseExpression="&lt;%$columnSemantic%>">
            <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%$0 == &quot;X&quot; &amp;&amp; $lineSemantic.incomingTraces[sourceElement==$columnSemantic].nSize()==0%>">
              <subModelOperations xsi:type="tool:CreateInstance" typeName="RequirementsTrace" referenceName="ownedTraces">
                <subModelOperations xsi:type="tool:SetValue" featureName="sourceElement" valueExpression="&lt;%$columnSemantic%>"/>
                <subModelOperations xsi:type="tool:SetValue" featureName="targetElement" valueExpression="&lt;%$lineSemantic%>"/>
              </subModelOperations>
            </subModelOperations>
          </firstModelOperation>
          <mask mask="{0}"/>
        </create>
      </intersection>
    </ownedRepresentations>
    <ownedRepresentations xsi:type="description_2:DiagramDescription" name="Physical Path Description" titleExpression="[PPD] &lt;%current.name%>" domainClass="PhysicalPath">
      <dropDescriptions href="#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Path%20Description']/@defaultLayer/@toolSections.0/@ownedTools[name='Dnd%20Component']"/>
      <dropDescriptions href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20PV%20From%20Project%20Explorer']"/>
      <filters xsi:type="filter:CompositeFilterDescription" name="Hide Property Values">
        <filters xsi:type="filter:MappingFilter">
          <mappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV']"/>
          <mappings xsi:type="description_2:ContainerMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG']"/>
        </filters>
      </filters>
      <layout xsi:type="description_2:CompositeLayout" direction="LeftToRight"/>
      <defaultLayer name="Default">
        <nodeMappings name="PPD_Part" deletionDescription="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Path%20Description']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete%20PhysicalPath%20Involvement']" semanticCandidatesExpression="&lt;%ownedPhysicalPathInvolvements[involvedElement.filter(&quot;Part&quot;)]%>" semanticElements="&lt;%current + involvedElement%>" synchronizationLock="true" domainClass="PhysicalPathInvolvement">
          <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="&lt;%involvedElement.computePartLabel()%>" sizeComputationExpression="5" labelPosition="node" resizeKind="NSEW" width="10" height="5">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='yellow']"/>
          </style>
          <conditionnalStyles predicateExpression="service:isPhysicalPathEnd()">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="&lt;%involvedElement.computePartLabel()%>" sizeComputationExpression="5" labelPosition="node" resizeKind="NSEW" width="10" height="5">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='yellow']"/>
            </style>
          </conditionnalStyles>
        </nodeMappings>
        <nodeMappings name="PPD_PhysicalPath" deletionDescription="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Path%20Description']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete%20PhysicalPath%20Involvement']" semanticCandidatesExpression="&lt;%ownedPhysicalPathInvolvements[involvedElement.filter(&quot;PhysicalPath&quot;)]%>" semanticElements="&lt;%current + involvedElement%>" synchronizationLock="true" domainClass="PhysicalPathInvolvement">
          <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="&lt;%involvedElement.name%>" sizeComputationExpression="5" labelPosition="node" resizeKind="NSEW" width="10" height="5">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_yellow']"/>
          </style>
          <conditionnalStyles predicateExpression="service:isPhysicalPathEnd()">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="&lt;%involvedElement.name%>" sizeComputationExpression="5" labelPosition="node" resizeKind="NSEW" width="10" height="5">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_yellow']"/>
            </style>
          </conditionnalStyles>
        </nodeMappings>
        <edgeMappings name="PPD_PhysicalLink" deletionDescription="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Path%20Description']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete%20PhysicalPath%20Involvement']" semanticCandidatesExpression="&lt;%ownedPhysicalPathInvolvements[involvedElement.filter(&quot;PhysicalLink&quot;)]%>" semanticElements="&lt;%current + involvedElement%>" synchronizationLock="true" sourceMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Path%20Description']/@defaultLayer/@nodeMappings[name='PPD_Part'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Path%20Description']/@defaultLayer/@nodeMappings[name='PPD_PhysicalPath']" targetMapping="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Path%20Description']/@defaultLayer/@nodeMappings[name='PPD_Part'] //@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Path%20Description']/@defaultLayer/@nodeMappings[name='PPD_PhysicalPath']" targetFinderExpression="&lt;%nextInvolvements[involvedElement.filter(&quot;Part&quot;) || involvedElement.filter(&quot;PhysicalPath&quot;)].nFirst()%>" sourceFinderExpression="&lt;%getPreviousPhysicalPathInvolvements()[involvedElement.filter(&quot;Part&quot;) || involvedElement.filter(&quot;PhysicalPath&quot;)].nFirst()%>" domainClass="PhysicalPathInvolvement" useDomainElement="true">
          <style targetArrow="NoDecoration" endsCentering="Both">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='red']"/>
            <centerLabelStyleDescription labelExpression="&lt;%involvedElement.name%>">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <reusedMappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']"/>
        <reusedMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_ContrainedElements']"/>
        <reusedMappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV']"/>
        <reusedMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_PVconnector']"/>
        <reusedMappings xsi:type="description_2:ContainerMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG']"/>
        <reusedMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_PVGconnector']"/>
        <toolSections name="PhysicalPaths">
          <ownedTools xsi:type="tool_1:NodeCreationDescription" documentation="[Reusable Components] Creates a new step referencing the selected Physical Component Part." name="Involve Part" precondition="&lt;%$containerView.isValidPPDInvolvePart() %>" forceRefresh="true" nodeMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Path%20Description']/@defaultLayer/@nodeMappings[name='PPD_Part']">
            <filters precondition="&lt;%!target.isMultipartMode()%>" elementsToListen="&lt;%getEmptyList()%>"/>
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$container%>">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="select Part" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                  <parameters name="context" value="&lt;% $container %>"/>
                  <parameters name="scope" value="&lt;%$containerView.getPPDInvolvePartScope()%>"/>
                  <parameters name="multiple" value="true"/>
                  <parameters name="resultVariable" value="selectedParts"/>
                  <parameters name="wizardMessage" value="Select a Part to involve in &lt;%$container.name%>."/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%$selectedParts != &quot;WIZARD_CANCELED&quot;%>">
                  <subModelOperations xsi:type="tool:For" expression="&lt;%$selectedParts.filter(&quot;Part&quot;)%>" iteratorName="selectedPart">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$container%>">
                      <subModelOperations xsi:type="tool:CreateInstance" typeName="PhysicalPathInvolvement" referenceName="ownedPhysicalPathInvolvements">
                        <subModelOperations xsi:type="tool:SetValue" featureName="involved" valueExpression="&lt;%$selectedPart%>"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:NodeCreationDescription" documentation="[Singleton Components] Creates a new step referencing the selected Physical Component." name="Involve Component" precondition="&lt;%$containerView.isValidPPDInvolveComponent() %>" forceRefresh="true" nodeMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Path%20Description']/@defaultLayer/@nodeMappings[name='PPD_Part']">
            <filters precondition="&lt;%target.isMultipartMode()%>" elementsToListen="&lt;%getEmptyList()%>"/>
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$container%>">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="select Component" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                  <parameters name="context" value="&lt;% $container %>"/>
                  <parameters name="scope" value="&lt;%$containerView.getPPDInvolveComponentScope()%>"/>
                  <parameters name="multiple" value="true"/>
                  <parameters name="resultVariable" value="selectedComponents"/>
                  <parameters name="wizardMessage" value="Select a Component to involve in &lt;%$container.name%>."/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%$selectedComponents != &quot;WIZARD_CANCELED&quot;%>">
                  <subModelOperations xsi:type="tool:For" expression="&lt;%$selectedComponents.filter(&quot;Component&quot;).representingPartitions()%>" iteratorName="selectedPart">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$container%>">
                      <subModelOperations xsi:type="tool:CreateInstance" typeName="PhysicalPathInvolvement" referenceName="ownedPhysicalPathInvolvements">
                        <subModelOperations xsi:type="tool:SetValue" featureName="involved" valueExpression="&lt;%$selectedPart%>"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:NodeCreationDescription" documentation="Creates a new step referencing the selected Physical Path." name="Involve Physical Path" precondition="&lt;%$containerView.isValidPPDInvolvePhysicalPath() %>" forceRefresh="true" nodeMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Path%20Description']/@defaultLayer/@nodeMappings[name='PPD_PhysicalPath']">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$container%>">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="select functional Chain" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                  <parameters name="context" value="&lt;% $container %>"/>
                  <parameters name="scope" value="&lt;%$containerView.getPPDInvolvePhysicalPathScope()%>"/>
                  <parameters name="multiple" value="true"/>
                  <parameters name="resultVariable" value="selectedFunctions"/>
                  <parameters name="wizardMessage" value="Select a Physical Path to involve in &lt;%$container.name%>."/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%$selectedFunctions != &quot;WIZARD_CANCELED&quot;%>">
                  <subModelOperations xsi:type="tool:For" expression="&lt;%$selectedFunctions.filter(&quot;PhysicalPath&quot;)%>" iteratorName="selectedFunction">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$container%>">
                      <subModelOperations xsi:type="tool:CreateInstance" typeName="PhysicalPathReference" referenceName="ownedPhysicalPathInvolvements">
                        <subModelOperations xsi:type="tool:SetValue" featureName="involved" valueExpression="&lt;%$selectedFunction%>"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:EdgeCreationDescription" documentation="Creates a new step referencing one existing Physical Link between the Physical Components / Parts respectively referenced by the preceeding and following steps." name="Involve Physical Link" precondition="&lt;%isValidPPDInvolvePhysicalLink($preSource,$preTarget) %>" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Path%20Description']/@defaultLayer/@edgeMappings[name='PPD_PhysicalLink']">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$sourceView.getDiagramContainer().target%>">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="select Link" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                  <parameters name="context" value="&lt;%$sourceView.getDiagramContainer().target%>"/>
                  <parameters name="scope" value="&lt;%$source.getPPDInvolvePhysicalLinkScope($source, $target)%>"/>
                  <parameters name="multiple" value="false"/>
                  <parameters name="resultVariable" value="selectedExchange"/>
                  <parameters name="wizardMessage" value="Select an Physical Link to Involve."/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%$selectedExchange != &quot;WIZARD_CANCELED&quot;%>">
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="PhysicalPathInvolvement" referenceName="ownedPhysicalPathInvolvements" variableName="newInv">
                    <subModelOperations xsi:type="tool:SetValue" featureName="involved" valueExpression="&lt;%$selectedExchange%>"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="nextInvolvements" valueExpression="&lt;%$target%>"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$source%>">
                    <subModelOperations xsi:type="tool:SetValue" featureName="nextInvolvements" valueExpression="&lt;%$newInv%>"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolDescription" documentation="[Reusable Components] Creates two new steps respectively referencing one existing outgoing Physical Link and a target Physical Component." name="Involve Physical Link &amp; Target Part" precondition="&lt;%$containerView.isValidPPDInvolvePhysicalLinkAndPart()%>" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/PhysicalPathInvolvement.gif">
            <filters precondition="&lt;%!target.isMultipartMode()%>" elementsToListen="&lt;%getEmptyList()%>"/>
            <element name="element"/>
            <elementView name="elementView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView%>">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectExchanges" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                  <parameters name="context" value="&lt;% $element.involvedElement%>"/>
                  <parameters name="scope" value="&lt;%$elementView.getPPDInvolvePhysicalLinkAndPartScope()%>"/>
                  <parameters name="resultVariable" value="selectedExchanges"/>
                  <parameters name="wizardMessage" value="Select Physical Links and target Parts to involve in &lt;%$element.eContainer.name%>."/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%($selectedExchanges != &quot;WIZARD_CANCELED&quot;)%>">
                  <subModelOperations xsi:type="tool:For" expression="&lt;%$selectedExchanges%>">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$element.eContainer%>">
                      <subModelOperations xsi:type="tool:CreateInstance" typeName="PhysicalPathInvolvement" referenceName="ownedPhysicalPathInvolvements" variableName="invTargetPart">
                        <subModelOperations xsi:type="tool:SetValue" featureName="involved" valueExpression="&lt;%$i.getOppositePart($element.involvedElement)%>"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool:CreateInstance" typeName="PhysicalPathInvolvement" referenceName="ownedPhysicalPathInvolvements" variableName="invLink">
                        <subModelOperations xsi:type="tool:SetValue" featureName="involved" valueExpression="&lt;%$i%>"/>
                        <subModelOperations xsi:type="tool:SetValue" featureName="nextInvolvements" valueExpression="&lt;%$invTargetPart%>"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$element%>">
                        <subModelOperations xsi:type="tool:SetValue" featureName="nextInvolvements" valueExpression="&lt;%$invLink%>"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView.getDiagramContainer().forceRefresh%>"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolDescription" documentation="Creates two new steps respectively referencing one existing outgoing Physical Link and a target Physical Component Part." name="Involve Physical Link &amp; Target Component" precondition="&lt;%$containerView.isValidPPDInvolvePhysicalLinkAndComponent()%>" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/PhysicalPathInvolvement.gif">
            <filters precondition="&lt;%target.isMultipartMode()%>" elementsToListen="&lt;%getEmptyList()%>"/>
            <element name="element"/>
            <elementView name="elementView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView%>">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectExchanges" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                  <parameters name="context" value="&lt;% $element.involvedElement%>"/>
                  <parameters name="scope" value="&lt;%$elementView.getPPDInvolvePhysicalLinkAndComponentScope()%>"/>
                  <parameters name="resultVariable" value="selectedExchanges"/>
                  <parameters name="wizardMessage" value="Select Physical Links and target Components to involve in &lt;%$element.eContainer.name%>."/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%($selectedExchanges != &quot;WIZARD_CANCELED&quot;)%>">
                  <subModelOperations xsi:type="tool:For" expression="&lt;%$selectedExchanges%>">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$element.eContainer%>">
                      <subModelOperations xsi:type="tool:CreateInstance" typeName="PhysicalPathInvolvement" referenceName="ownedPhysicalPathInvolvements" variableName="invTargetPart">
                        <subModelOperations xsi:type="tool:SetValue" featureName="involved" valueExpression="&lt;%$i.getOppositePart($element.involvedElement)%>"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool:CreateInstance" typeName="PhysicalPathInvolvement" referenceName="ownedPhysicalPathInvolvements" variableName="invLink">
                        <subModelOperations xsi:type="tool:SetValue" featureName="involved" valueExpression="&lt;%$i%>"/>
                        <subModelOperations xsi:type="tool:SetValue" featureName="nextInvolvements" valueExpression="&lt;%$invTargetPart%>"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$element%>">
                        <subModelOperations xsi:type="tool:SetValue" featureName="nextInvolvements" valueExpression="&lt;%$invLink%>"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView.getDiagramContainer().forceRefresh%>"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolDescription" documentation="Creates two new steps respectively referencing one existing outgoing Physical Link and a target Physical Path." name="Involve Physical Link &amp; Target Physical Path" precondition="&lt;%$containerView.isValidPPDInvolvePhysicalLinkAndPhysicalPath()%>" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/PhysicalPathReference.gif">
            <element name="element"/>
            <elementView name="elementView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView%>">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectFunctionalExchanges" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromCheckBoxWizard">
                  <parameters name="context" value="&lt;% $elementView %>"/>
                  <parameters name="resultVariable" value="selectedFunctionalExchanges"/>
                  <parameters name="wizardMessage" value="Select Physical Links and Physical Paths to involve from &lt;%name%>"/>
                  <parameters name="type" value="PHYSICAL_LINKS__PHYSICAL_PATHS"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:DiagramCreationDescription" name="Physical Path Description" precondition="&lt;%isInLib()%>" titleExpression="[PPD] &lt;%current.name%>" diagramDescription="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Path%20Description']">
            <initialOperation/>
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
          </ownedTools>
          <ownedTools xsi:type="tool_1:DeleteElementDescription" name="Delete PhysicalPath Involvement">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;% $element %>">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="CapellaDeleteExternalAction" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.delete.CapellaDeleteExternalAction"/>
              </firstModelOperations>
            </initialOperation>
            <hook id="org.polarsys.capella.core.sirius.analysis.delete.CapellaDeleteActionHook"/>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ContainerDropDescription" name="Dnd Component" precondition="&lt;%isA(&quot;Part&quot;)%>" mappings="//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$newSemanticContainer%>">
                <subModelOperations xsi:type="tool:CreateInstance" typeName="PhysicalPathInvolvement" referenceName="ownedPhysicalPathInvolvements">
                  <subModelOperations xsi:type="tool:SetValue" featureName="involved" valueExpression="&lt;%$element%>"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
        </toolSections>
        <toolSections name="Common">
          <ownedTools xsi:type="tool_1:NodeCreationDescription" documentation="Create a new Constraint." name="Constraint" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Constraint.gif">
            <nodeMappings href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']"/>
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$container%>">
                <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% $containerView.filter(&quot;DDiagram&quot;).nSize() == 1 %>">
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="Constraint" referenceName="ownedConstraints">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%creationService%>"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:EdgeCreationDescription" documentation="Allocate a Source Constraint to an available Target Capella Element." name="ConstraintElement" precondition="&lt;%!( $preSource.constrainedElements.nContains($preTarget))%>" forceRefresh="true" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ClassCarries.gif">
            <edgeMappings href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_ContrainedElements']"/>
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:If" conditionExpression="&lt;%$source.filter(&quot;Constraint&quot;).nSize() == 1%>">
                <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% $source.constrainedElements.nSize() == 0%>">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$source%>">
                    <subModelOperations xsi:type="tool:SetValue" featureName="constrainedElements" valueExpression="&lt;%$target%>"/>
                    <subModelOperations xsi:type="tool:MoveElement" newContainerExpression="&lt;%$target%>" featureName="ownedConstraints"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="&lt;% $source.constrainedElements.nSize() != 0%>">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$source%>">
                    <subModelOperations xsi:type="tool:SetValue" featureName="constrainedElements" valueExpression="&lt;%$target%>"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolDescription" documentation="Creates or deletes graphical objects corresponding to existing Constraints. Removing a Constraint graphical object does not delete this Constraint from the model. This tool does not modify the semantic model." name="Show/Hide Constraints" label="Constraints" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool:AcceleoVariable" name="constraintsInDiagram" computationExpression="&lt;% getExistingConstraintsFromDiagram($elementView.getDiagramContainer())%>"/>
              <subVariables xsi:type="tool:AcceleoVariable" name="diagram" computationExpression="&lt;% $elementView.eContainer(&quot;DDiagram&quot;) %>"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView%>">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectedConstraints" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectLinksFromTransferWizard">
                  <parameters name="context" value="&lt;% $elementView%>"/>
                  <parameters name="scope" value="&lt;% getConstraintToInsertInDiagram() - $constraintsInDiagram%>"/>
                  <parameters name="initialSelection" value="&lt;%$constraintsInDiagram%>"/>
                  <parameters name="resultVariable" value="selectedConstraints"/>
                  <parameters name="wizardMessage" value="Select Constraints to show."/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%($selectedConstraints != &quot;WIZARD_CANCELED&quot;)%>">
                  <subModelOperations xsi:type="tool:For" expression="&lt;%$selectedConstraints%>">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%createConstraintWithConstaintedElementInDiagram($i,$diagram,$constraintsInDiagram,true)%>"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:For" expression="&lt;%$constraintsInDiagram%>">
                    <subModelOperations xsi:type="tool:If" conditionExpression="&lt;%! $selectedConstraints.nContains($i)%>">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView.getDiagramContainer().getNodesAndNodeListElements()[target == $i]%>">
                        <subModelOperations xsi:type="tool:DeleteView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:ChangeContext" browseExpression="&lt;%$elementView.getDiagramContainer().forceRefresh%>"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <reusedTools xsi:type="tool_1:ToolGroup" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='PV']"/>
          <reusedTools xsi:type="tool_1:ContainerDropDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20PV%20From%20Project%20Explorer']"/>
        </toolSections>
      </defaultLayer>
    </ownedRepresentations>
    <ownedJavaExtensions qualifiedClassName="org.polarsys.capella.core.sirius.analysis.CapellaServices"/>
    <ownedJavaExtensions qualifiedClassName="org.polarsys.capella.core.sirius.analysis.PhysicalServices"/>
    <ownedJavaExtensions qualifiedClassName="org.polarsys.capella.core.sirius.analysis.FaServices"/>
    <ownedJavaExtensions qualifiedClassName="org.polarsys.capella.core.sirius.analysis.DragAndDropServices"/>
    <ownedJavaExtensions qualifiedClassName="org.polarsys.capella.core.sirius.analysis.CsServices"/>
    <ownedJavaExtensions qualifiedClassName="org.polarsys.capella.core.sirius.analysis.RequirementServices"/>
    <ownedJavaExtensions qualifiedClassName="org.polarsys.capella.core.sirius.analysis.DiagramServices"/>
    <ownedJavaExtensions qualifiedClassName="org.polarsys.capella.core.sirius.analysis.DFServices"/>
    <ownedJavaExtensions qualifiedClassName="org.polarsys.capella.core.sirius.analysis.ABServices"/>
  </ownedViewpoints>
</description:Group>
